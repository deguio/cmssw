# Conditions read from  CMS_CONDITIONS  via FrontierProd 
import FWCore.ParameterSet.Config as cms

process = cms.Process("RECO")

process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring('file:step2.root'),
    secondaryFileNames = cms.untracked.vstring()
)
process.BeamHaloSummary = cms.EDProducer("BeamHaloSummaryProducer",
    CSCHaloDataLabel = cms.InputTag("CSCHaloData"),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    GlobalHaloDataLabel = cms.InputTag("GlobalHaloData"),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    l_EcalPhiWedgeConfidence = cms.double(0.7),
    l_EcalPhiWedgeConstituents = cms.int32(6),
    l_EcalPhiWedgeEnergy = cms.double(10.0),
    l_EcalPhiWedgeToF = cms.double(-200.0),
    l_EcalShowerShapesAngle = cms.double(0.51),
    l_EcalShowerShapesRoundness = cms.double(0.41),
    l_EcalSuperClusterEnergy = cms.double(10.0),
    l_EcalSuperClusterSize = cms.int32(3),
    l_HcalPhiWedgeConfidence = cms.double(0.7),
    l_HcalPhiWedgeConstituents = cms.int32(6),
    l_HcalPhiWedgeEnergy = cms.double(20.0),
    l_HcalPhiWedgeToF = cms.double(-100.0),
    t_EcalPhiWedgeConfidence = cms.double(0.9),
    t_EcalPhiWedgeConstituents = cms.int32(8),
    t_EcalPhiWedgeEnergy = cms.double(20.0),
    t_EcalPhiWedgeToF = cms.double(-200.0),
    t_EcalShowerShapesAngle = cms.double(0.51),
    t_EcalShowerShapesRoundness = cms.double(0.23),
    t_EcalSuperClusterEnergy = cms.double(10.0),
    t_EcalSuperClusterSize = cms.int32(3),
    t_HcalPhiWedgeConfidence = cms.double(0.9),
    t_HcalPhiWedgeConstituents = cms.int32(8),
    t_HcalPhiWedgeEnergy = cms.double(25.0),
    t_HcalPhiWedgeToF = cms.double(-100.0)
)


process.CSCHaloData = cms.EDProducer("CSCHaloDataProducer",
    ALCTDigiLabel = cms.InputTag("muonCSCDigis","MuonCSCALCTDigi"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    CosmicMuonLabel = cms.InputTag("muonsFromCosmics"),
    DetaParam = cms.double(0.1),
    DphiParam = cms.double(1.0),
    ExpectedBX = cms.int32(6),
    HLTBitLabel = cms.VInputTag(cms.InputTag("HLT_CSCBeamHalo"), cms.InputTag("HLT_CSCBeamHaloOverlapRing1"), cms.InputTag("HLT_CSCBeamHaloOverlapRing2"), cms.InputTag("HLT_CSCBeamHaloRing2or3")),
    HLTResultLabel = cms.InputTag("TriggerResults","","HLT"),
    InnerRMaxParam = cms.double(99999.0),
    InnerRMinParam = cms.double(0.0),
    L1MuGMTReadoutLabel = cms.InputTag("gtDigis"),
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        DTsegments = cms.InputTag("dt4DSegments"),
        TightMatchCSC = cms.bool(True),
        TightMatchDT = cms.bool(False)
    ),
    MatchingDEtaThreshold = cms.double(0.4),
    MatchingDPhiThreshold = cms.double(0.18),
    MatchingDWireThreshold = cms.int32(5),
    MaxDtMuonSegment = cms.double(-10.0),
    MaxFreeInverseBeta = cms.double(0.0),
    MaxOuterMomentumTheta = cms.double(3.0),
    MaxSegmentPhiDiff = cms.double(0.35),
    MaxSegmentRDiff = cms.double(10.0),
    MaxSegmentTheta = cms.double(0.7),
    MinOuterMomentumTheta = cms.double(0.1),
    MuonLabel = cms.InputTag("muons"),
    NormChi2Param = cms.double(8.0),
    OuterRMaxParam = cms.double(99999.0),
    OuterRMinParam = cms.double(0.0),
    RecHitTime0 = cms.double(0.0),
    RecHitTimeWindow = cms.double(25.0),
    SALabel = cms.InputTag("standAloneMuons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite'),
        RPCLayers = cms.bool(True)
    )
)


process.CastorTowerReco = cms.EDProducer("CastorTowerProducer",
    inputprocess = cms.string('castorreco'),
    maxtime = cms.double(99999.0),
    mintime = cms.double(-99999.0),
    towercut = cms.double(0.65)
)


process.CosmicMuonSeed = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.EcalHaloData = cms.EDProducer("EcalHaloDataProducer",
    AngleCutParam = cms.double(0.51),
    EBRecHitEnergyThresholdParam = cms.double(0.3),
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitEnergyThresholdParam = cms.double(0.3),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ESRecHitEnergyThresholdParam = cms.double(0.3),
    ESRecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    NHitsEcalThresholdParam = cms.int32(4),
    PhotonLabel = cms.InputTag("photons"),
    RoundnessCutParam = cms.double(0.41),
    SumEcalEnergyThresholdParam = cms.double(10.0),
    SuperClusterLabel = cms.InputTag("correctedHybridSuperClusters")
)


process.GlobalHaloData = cms.EDProducer("GlobalHaloDataProducer",
    CSCHaloDataLabel = cms.InputTag("CSCHaloData"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCSegmentLabel = cms.InputTag("CSCSegments"),
    CaloTowerEtThresholdParam = cms.double(0.3),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    EcalMaxMatchingRadiusParam = cms.double(330.0),
    EcalMinMatchingRadiusParam = cms.double(110.0),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    calotowerLabel = cms.InputTag("towerMaker"),
    metLabel = cms.InputTag("caloMet")
)


process.HcalHaloData = cms.EDProducer("HcalHaloDataProducer",
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    HBRecHitEnergyThresholdParam = cms.double(0.5),
    HERecHitEnergyThresholdParam = cms.double(0.5),
    HFRecHitLabel = cms.InputTag("hfreco"),
    HORecHitLabel = cms.InputTag("horeco"),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    NHitsHcalThresholdParam = cms.int32(4),
    SumHcalEnergyThresholdParam = cms.double(18)
)


process.JPTeidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7),
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0)
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4),
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    electronIDType = cms.string('classbased'),
    electronQuality = cms.string('tight'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.JetPlusTrackZSPCorJetAntiKt4 = cms.EDProducer("JetPlusTrackProducer",
    DzVertexCut = cms.double(0.2),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackNonEff.txt'),
    ElectronIds = cms.InputTag("JPTeidTight"),
    Electrons = cms.InputTag("gedGsfElectrons"),
    FixedPU = cms.int32(0),
    JetSplitMerge = cms.int32(2),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak4JetTracksAssociatorAtCaloFace"),
    JetTracksAssociationAtVertex = cms.InputTag("ak4JetTracksAssociatorAtVertexJPT"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackLeakage.txt'),
    MaxJetEta = cms.double(3.0),
    Muons = cms.InputTag("muons"),
    PU = cms.int32(-1),
    PtErrorQuality = cms.double(0.05),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_response.txt'),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    UseElectrons = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseMuons = cms.bool(True),
    UseOutOfConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UsePions = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    UseTrackQuality = cms.bool(True),
    UseZSP = cms.bool(False),
    VectorialCorrection = cms.bool(True),
    Verbose = cms.bool(True),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetAntiKt4'),
    ptCUT = cms.double(15.0),
    src = cms.InputTag("ak4CaloJets"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring()
)


process.MeasurementTrackerEvent = cms.EDProducer("MeasurementTrackerEventProducer",
    inactivePixelDetectorLabels = cms.VInputTag(cms.InputTag("siPixelDigis")),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    measurementTracker = cms.string(''),
    pixelClusterProducer = cms.string('siPixelClusters'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string('siStripClusters'),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.MeasurementTrackerEventPreSplitting = cms.EDProducer("MeasurementTrackerEventProducer",
    inactivePixelDetectorLabels = cms.VInputTag(cms.InputTag("siPixelDigis")),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    measurementTracker = cms.string(''),
    pixelClusterProducer = cms.string('siPixelClustersPreSplitting'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string('siStripClusters'),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.PhotonIDProd = cms.EDProducer("PhotonIDProducer",
    DoEcalIsoRelativeCut = cms.bool(True),
    DoEcalRecHitIsolationCut = cms.bool(True),
    DoEtaWidthCut = cms.bool(True),
    DoHadOverEMCut = cms.bool(True),
    DoHcalTowerIsolationCut = cms.bool(True),
    DoHollowConeNTrkCut = cms.bool(False),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    DoR9Cut = cms.bool(False),
    DoSolidConeNTrkCut = cms.bool(False),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    LooseEMHadOverEMEB = cms.double(0.05),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMSolidTrkEE = cms.double(999999999),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonR9CutEB = cms.double(0.0),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    TightPhotonHadOverEMEB = cms.double(0.05),
    TightPhotonHadOverEMEE = cms.double(0.05),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    TightPhotonR9CutEB = cms.double(0.0),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    doCutBased = cms.bool(True),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    photonLabel = cms.string(''),
    photonProducer = cms.string('photons')
)


process.PhotonIDProdGED = cms.EDProducer("PhotonIDProducer",
    DoEcalIsoRelativeCut = cms.bool(True),
    DoEcalRecHitIsolationCut = cms.bool(True),
    DoEtaWidthCut = cms.bool(True),
    DoHadOverEMCut = cms.bool(True),
    DoHcalTowerIsolationCut = cms.bool(True),
    DoHollowConeNTrkCut = cms.bool(False),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    DoR9Cut = cms.bool(False),
    DoSolidConeNTrkCut = cms.bool(False),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    LooseEMHadOverEMEB = cms.double(0.05),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMSolidTrkEE = cms.double(999999999),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonR9CutEB = cms.double(0.0),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    TightPhotonHadOverEMEB = cms.double(0.05),
    TightPhotonHadOverEMEE = cms.double(0.05),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    TightPhotonR9CutEB = cms.double(0.0),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    doCutBased = cms.bool(True),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    photonLabel = cms.string(''),
    photonProducer = cms.string('gedPhotons')
)


process.SETMuonSeed = cms.EDProducer("SETMuonSeedProducer",
    SETTrajBuilderParameters = cms.PSet(
        Apply_prePruning = cms.bool(True),
        CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
            0.0),
        CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
        CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
            0.253916),
        CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
            0.72802),
        CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
            3.478874),
        CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
        CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
        CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
        CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
            2.0142),
        CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
        CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
        CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
            0.514139),
        CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
        CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
            -4.267065),
        CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
        CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
        CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
            -4.241835),
        CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
        CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
            43.430395),
        CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
        DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
            0.222219),
        DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
        DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
        DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
            0.155638),
        DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
        DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
        DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
            -0.133269),
        DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
        DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
        DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
            0.261012),
        DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
        DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
        DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
            0.010984),
        DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
        DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
        DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
            -0.304346),
        DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
        DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            MinLocalSegmentAngle = cms.double(0.09),
            OutsideChamberErrorScale = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            maxActiveChambers = cms.int32(100)
        ),
        OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
            0.0),
        OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
        OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
            0.0),
        OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
        OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
            0.0),
        OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
        OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
            0.0),
        OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
        OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
            0.0),
        OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
        SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
            0.0),
        SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
        SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
            0.0),
        SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
        SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
            0.0),
        SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
        SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
            0.0),
        SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
        SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
            0.0),
        SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
        SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
            0.0),
        SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
        SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
            0.0),
        SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
        SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
            0.0),
        SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
        SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
            0.0),
        SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
        SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
            0.0),
        SME_11_0_scale = cms.vdouble(1.325085, 0.0),
        SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
            0.0),
        SME_12_0_scale = cms.vdouble(2.279181, 0.0),
        SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
            0.0),
        SME_13_0_scale = cms.vdouble(0.104905, 0.0),
        SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
            0.0),
        SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
        SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
            0.0),
        SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
        SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
            0.0),
        SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
            0.0),
        SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        UseSegmentsInTrajectory = cms.bool(False),
        scaleDT = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    beamSpotTag = cms.InputTag("offlineBeamSpot")
)


process.ak4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4CaloJetsForTrk = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("caloTowerForTrk"),
    srcPVs = cms.InputTag("firstStepPrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4CaloJetsForTrkPreSplitting = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("caloTowerForTrkPreSplitting"),
    srcPVs = cms.InputTag("firstStepPrimaryVerticesPreSplitting"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4JetExtender = cms.EDProducer("JetExtender",
    coneSize = cms.double(0.4),
    jet2TracksAtCALO = cms.InputTag("ak4JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("ak4JetTracksAssociatorAtVertex"),
    jets = cms.InputTag("ak4CaloJets")
)


process.ak4JetID = cms.EDProducer("JetIDProducer",
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    hoRecHitsColl = cms.InputTag("horeco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    src = cms.InputTag("ak4CaloJets"),
    useRecHits = cms.bool(True)
)


process.ak4JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    coneSize = cms.double(0.4),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("ak4CaloJets"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)


process.ak4JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4JetTracksAssociatorAtVertexJPT = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4CaloJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(True)
)


process.ak4JetTracksAssociatorAtVertexPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsCHS"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4JetTracksAssociatorExplicit = cms.EDProducer("JetTracksAssociatorExplicit",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsCHS"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4PFJets"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsCHS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("pfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsLegacyHPSPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    builders = cms.VPSet(cms.PSet(
        applyElecTrackQcuts = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        maxStripBuildIterations = cms.int32(-1),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        minStripEt = cms.double(1.0),
        name = cms.string('s'),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.2),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.03),
                minGammaEt = cms.double(1.5),
                minTrackHits = cms.uint32(8),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(1.0),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            leadingTrkOrPFCandOption = cms.string('leadPFCand'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.4),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minNeutralHadronEt = cms.double(30.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            vertexTrackFiltering = cms.bool(False),
            vxAssocQualityCuts = cms.PSet(
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            )
        ),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        stripEtaAssociationDistance = cms.double(0.05),
        stripPhiAssociationDistance = cms.double(0.2),
        updateStripAfterEachDaughter = cms.bool(False)
    )),
    jetSrc = cms.InputTag("ak4PFJets"),
    massHypothesis = cms.double(0.136),
    outputSelection = cms.string('pt > 0'),
    ranking = cms.VPSet(cms.PSet(
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selection = cms.string('algoIs("kStrips")'),
        selectionFailValue = cms.double(1000),
        selectionPassFunction = cms.string('abs(mass() - 0.13579)')
    ))
)


process.ak4PFJetsRecoTauChargedHadrons = cms.EDProducer("PFRecoTauChargedHadronProducer",
    builders = cms.VPSet(cms.PSet(
        chargedHadronCandidatesParticleIds = cms.vint32(1, 2, 3),
        dRmergeNeutralHadronWrtChargedHadron = cms.double(0.005),
        dRmergeNeutralHadronWrtElectron = cms.double(0.05),
        dRmergeNeutralHadronWrtNeutralHadron = cms.double(0.01),
        dRmergeNeutralHadronWrtOther = cms.double(0.005),
        dRmergePhotonWrtChargedHadron = cms.double(0.005),
        dRmergePhotonWrtElectron = cms.double(0.005),
        dRmergePhotonWrtNeutralHadron = cms.double(0.01),
        dRmergePhotonWrtOther = cms.double(0.005),
        maxUnmatchedBlockElementsNeutralHadron = cms.int32(1),
        maxUnmatchedBlockElementsPhoton = cms.int32(1),
        minBlockElementMatchesNeutralHadron = cms.int32(2),
        minBlockElementMatchesPhoton = cms.int32(2),
        minMergeChargedHadronPt = cms.double(100.0),
        minMergeGammaEt = cms.double(0.0),
        minMergeNeutralHadronEt = cms.double(0.0),
        name = cms.string('chargedPFCandidates'),
        plugin = cms.string('PFRecoTauChargedHadronFromPFCandidatePlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.2),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.03),
                minGammaEt = cms.double(1.5),
                minTrackHits = cms.uint32(8),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(1.0),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            leadingTrkOrPFCandOption = cms.string('leadPFCand'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.4),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minNeutralHadronEt = cms.double(30.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            vertexTrackFiltering = cms.bool(False),
            vxAssocQualityCuts = cms.PSet(
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            )
        )
    ), 
        cms.PSet(
            dRcone = cms.double(0.5),
            dRconeLimitedToJetArea = cms.bool(False),
            dRmergeNeutralHadron = cms.double(0.1),
            dRmergePhoton = cms.double(0.05),
            minMergeChargedHadronPt = cms.double(100.0),
            minMergeGammaEt = cms.double(0.0),
            minMergeNeutralHadronEt = cms.double(0.0),
            name = cms.string('tracks'),
            plugin = cms.string('PFRecoTauChargedHadronFromTrackPlugin'),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.2),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.03),
                    minGammaEt = cms.double(1.5),
                    minTrackHits = cms.uint32(8),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(1.0),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                leadingTrkOrPFCandOption = cms.string('leadPFCand'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.4),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(0.5),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(0.5),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                )
            ),
            srcTracks = cms.InputTag("generalTracks")
        ), 
        cms.PSet(
            chargedHadronCandidatesParticleIds = cms.vint32(5),
            dRmergeNeutralHadronWrtChargedHadron = cms.double(0.005),
            dRmergeNeutralHadronWrtElectron = cms.double(0.05),
            dRmergeNeutralHadronWrtNeutralHadron = cms.double(0.01),
            dRmergeNeutralHadronWrtOther = cms.double(0.005),
            dRmergePhotonWrtChargedHadron = cms.double(0.005),
            dRmergePhotonWrtElectron = cms.double(0.005),
            dRmergePhotonWrtNeutralHadron = cms.double(0.01),
            dRmergePhotonWrtOther = cms.double(0.005),
            maxUnmatchedBlockElementsNeutralHadron = cms.int32(1),
            maxUnmatchedBlockElementsPhoton = cms.int32(1),
            minBlockElementMatchesNeutralHadron = cms.int32(2),
            minBlockElementMatchesPhoton = cms.int32(2),
            minMergeChargedHadronPt = cms.double(0.0),
            minMergeGammaEt = cms.double(0.0),
            minMergeNeutralHadronEt = cms.double(0.0),
            name = cms.string('PFNeutralHadrons'),
            plugin = cms.string('PFRecoTauChargedHadronFromPFCandidatePlugin'),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.2),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.03),
                    minGammaEt = cms.double(1.5),
                    minTrackHits = cms.uint32(8),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(1.0),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                leadingTrkOrPFCandOption = cms.string('leadPFCand'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                pvFindingAlgo = cms.string('closestInDeltaZ'),
                recoverLeadingTrk = cms.bool(False),
                signalQualityCuts = cms.PSet(
                    maxDeltaZ = cms.double(0.4),
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(0.5),
                    minNeutralHadronEt = cms.double(30.0),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                ),
                vertexTrackFiltering = cms.bool(False),
                vxAssocQualityCuts = cms.PSet(
                    maxTrackChi2 = cms.double(100.0),
                    maxTransverseImpactParameter = cms.double(0.1),
                    minGammaEt = cms.double(0.5),
                    minTrackHits = cms.uint32(3),
                    minTrackPixelHits = cms.uint32(0),
                    minTrackPt = cms.double(0.5),
                    minTrackVertexWeight = cms.double(-1.0)
                )
            )
        )),
    jetRegionSrc = cms.InputTag("recoTauAK4PFJets08Region"),
    jetSrc = cms.InputTag("ak4PFJets"),
    outputSelection = cms.string('pt > 0.5'),
    ranking = cms.VPSet(cms.PSet(
        name = cms.string('ChargedPFCandidate'),
        plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
        selection = cms.string("algoIs(\'kChargedPFCandidate\')"),
        selectionFailValue = cms.double(1000.0),
        selectionPassFunction = cms.string('-pt')
    ), 
        cms.PSet(
            name = cms.string('ChargedPFCandidate'),
            plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
            selection = cms.string("algoIs(\'kTrack\')"),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt')
        ), 
        cms.PSet(
            name = cms.string('ChargedPFCandidate'),
            plugin = cms.string('PFRecoTauChargedHadronStringQuality'),
            selection = cms.string("algoIs(\'kPFNeutralHadron\')"),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt')
        ))
)


process.ak4TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    DxyTrVtxMax = cms.double(0.2),
    DzTrVtxMax = cms.double(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    MaxVtxZ = cms.double(15.0),
    MinVtxNdof = cms.int32(5),
    UseOnlyOnePV = cms.bool(False),
    UseOnlyVertexTracks = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('TrackJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("trackRefsForJets"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak5CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak5CastorJets")
)


process.ak5CastorJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("CastorTowerReco"),
    srcPVs = cms.InputTag("offlinePrimaryVertices")
)


process.ak7CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak7CastorJets")
)


process.ak7CastorJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("CastorTowerReco"),
    srcPVs = cms.InputTag("offlinePrimaryVertices")
)


process.ak8PFJetsCHS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("pfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCHSSoftDrop = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    R0 = cms.double(0.8),
    Rho_EtaMax = cms.double(4.4),
    beta = cms.double(0.0),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("pfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useSoftDrop = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    zcut = cms.double(0.1)
)


process.ak8PFJetsCHSSoftDropMass = cms.EDProducer("RecoJetDeltaRValueMapProducer",
    distMax = cms.double(0.8),
    matched = cms.InputTag("ak8PFJetsCHSSoftDrop"),
    src = cms.InputTag("ak8PFJetsCHS"),
    value = cms.string('mass')
)


process.allConversions = cms.EDProducer("ConversionProducer",
    AlgorithmName = cms.string('mixed'),
    AllowD0 = cms.bool(True),
    AllowDeltaCot = cms.bool(True),
    AllowDeltaPhi = cms.bool(False),
    AllowMinApproach = cms.bool(True),
    AllowOppCharge = cms.bool(True),
    AllowRightBC = cms.bool(False),
    AllowSingleLeg = cms.bool(False),
    AllowTrackBC = cms.bool(False),
    AllowVertex = cms.bool(True),
    DeltaCotTheta = cms.double(0.1),
    DeltaPhi = cms.double(0.2),
    EnergyBC = cms.double(0.3),
    EnergyTotalBC = cms.double(0.3),
    HalfwayEta = cms.double(0.1),
    MaxChi2Left = cms.double(10.0),
    MaxChi2Right = cms.double(10.0),
    MinApproachHigh = cms.double(1.0),
    MinApproachLow = cms.double(-0.25),
    MinHitsLeft = cms.int32(4),
    MinHitsRight = cms.int32(2),
    UsePvtx = cms.bool(True),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    bypassPreselEcal = cms.bool(False),
    bypassPreselEcalEcal = cms.bool(True),
    bypassPreselGsf = cms.bool(True),
    convertedPhotonCollection = cms.string(''),
    d0 = cms.double(0.0),
    dEtaTrackBC = cms.double(0.2),
    dEtacutForSCmatching = cms.double(0.03),
    dPhiTrackBC = cms.double(1.0),
    dPhicutForSCmatching = cms.double(0.05),
    deltaEta = cms.double(0.4),
    dz = cms.double(5.0),
    maxDelta = cms.double(0.01),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfTrackInPU = cms.int32(999999),
    maxReducedChiSq = cms.double(225.0),
    maxTrackRho = cms.double(120.0),
    maxTrackZ = cms.double(300.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(10.0),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    rCut = cms.double(2.0),
    scBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
    src = cms.InputTag("gsfGeneralInOutOutInConversionTrackMerger"),
    vtxChi2 = cms.double(0.0005)
)


process.ancientMuonSeed = cms.EDProducer("MuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    crackWindow = cms.double(0.04),
    deltaEtaCrackSearchWindow = cms.double(0.25),
    deltaEtaSearchWindow = cms.double(0.2),
    deltaPhiSearchWindow = cms.double(0.25),
    scaleDT = cms.bool(True)
)


process.caloMet = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMet'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(False),
    src = cms.InputTag("towerMaker")
)


process.caloMetBE = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMetBE'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(True),
    src = cms.InputTag("towerMaker")
)


process.caloMetBEFO = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMetBEFO'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(False),
    src = cms.InputTag("towerMakerWithHO")
)


process.caloMetM = cms.EDProducer("MuonMET",
    metTypeInputTag = cms.InputTag("CaloMET"),
    muonMETDepositValueMapInputTag = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    muonsInputTag = cms.InputTag("muons"),
    uncorMETInputTag = cms.InputTag("caloMet")
)


process.caloTowerForTrk = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbheprereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.caloTowerForTrkPreSplitting = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbheprereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.calomuons = cms.EDProducer("CaloMuonProducer",
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    inputCollection = cms.InputTag("muons1stStep"),
    inputMuons = cms.InputTag("muons1stStep"),
    inputTracks = cms.InputTag("generalTracks"),
    minCaloCompatibility = cms.double(0.6),
    minPt = cms.double(1.0)
)


process.candidateVertexArbitrator = cms.EDProducer("CandidateVertexArbitrator",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("candidateVertexMerger"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(0.4),
    tracks = cms.InputTag("particleFlow")
)


process.candidateVertexMerger = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.7),
    minSignificance = cms.double(2),
    secondaryVertices = cms.InputTag("inclusiveCandidateVertexFinder")
)


process.castorDigis = cms.EDProducer("CastorRawToDigi",
    CastorCtdc = cms.bool(False),
    CastorFirstFED = cms.int32(690),
    ComplainEmptyData = cms.untracked.bool(False),
    ExceptionEmptyData = cms.untracked.bool(False),
    ExpectedOrbitMessageTime = cms.int32(-1),
    FEDs = cms.untracked.vint32(690, 691, 692),
    FilterDataQuality = cms.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackTTP = cms.bool(True),
    UseNominalOrbitMessageTime = cms.bool(True),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(False)
)


process.castorreco = cms.EDProducer("CastorSimpleReconstructor",
    Subdetector = cms.string('CASTOR'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("castorDigis"),
    doSaturationCorr = cms.bool(True),
    firstSample = cms.int32(4),
    maxADCvalue = cms.int32(127),
    samplesToAdd = cms.int32(2),
    setSaturationFlag = cms.bool(True),
    tsFromDB = cms.bool(True)
)


process.chargeCut2069Clusters = cms.EDProducer("ClusterChargeMasker",
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepClusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters")
)


process.ckfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    ComponentName = cms.string('ckfInOutTracksFromConversions'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection'),
    src = cms.InputTag("conversionTrackCandidates","inOutTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection')
)


process.ckfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('outInEcalSeededConv'),
    ComponentName = cms.string('ckfOutInTracksFromConversions'),
    Fitter = cms.string('KFFitterForOutIn'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection'),
    src = cms.InputTag("conversionTrackCandidates","outInTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection')
)


process.cleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitSeverityToBeExcluded = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(True),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.clusterSummaryProducer = cms.EDProducer("ClusterSummaryProducer",
    doPixels = cms.bool(True),
    doStrips = cms.bool(True),
    pixelClusters = cms.InputTag("siPixelClustersPreSplitting"),
    stripClusters = cms.InputTag("siStripClusters"),
    verbose = cms.bool(False),
    wantedSubDets = cms.vstring('TOB', 
        'TIB', 
        'TID', 
        'TEC', 
        'STRIP', 
        'BPIX', 
        'FPIX', 
        'PIXEL'),
    wantedUserSubDets = cms.VPSet()
)


process.cmsTopTagPFJetsCHS = cms.EDProducer("CATopJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    algorithm = cms.int32(1),
    centralEtaCut = cms.double(2.5),
    debugLevel = cms.untracked.int32(0),
    deltarBins = cms.vdouble(0.19, 0.19, 0.19),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    etFrac = cms.double(0.7),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('CambridgeAachen'),
    jetCollInstanceName = cms.string('caTopSubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nCellBins = cms.vdouble(1.9, 1.9, 1.9),
    nSigmaPU = cms.double(1.0),
    ptFracBins = cms.vdouble(0.05, 0.05, 0.05),
    rBins = cms.vdouble(0.8, 0.8, 0.8),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    sumEtBins = cms.vdouble(0, 1600, 2600),
    sumEtEtaCut = cms.double(3.0),
    tagAlgo = cms.int32(0),
    useAdjacency = cms.int32(2),
    useDeterministicSeed = cms.bool(True),
    useMaxTower = cms.bool(False),
    verbose = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True)
)


process.combinatoricRecoTaus = cms.EDProducer("RecoTauProducer",
    buildNullTaus = cms.bool(True),
    builders = cms.VPSet(cms.PSet(
        decayModes = cms.VPSet(cms.PSet(
            maxPiZeros = cms.uint32(0),
            maxTracks = cms.uint32(6),
            nCharged = cms.uint32(1),
            nPiZeros = cms.uint32(0)
        ), 
            cms.PSet(
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(1)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(1),
                nPiZeros = cms.uint32(2)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(2),
                nPiZeros = cms.uint32(0)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(3),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(2),
                nPiZeros = cms.uint32(1)
            ), 
            cms.PSet(
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6),
                nCharged = cms.uint32(3),
                nPiZeros = cms.uint32(0)
            )),
        isolationConeSize = cms.double(0.5),
        name = cms.string('combinatoric'),
        pfCandSrc = cms.InputTag("particleFlow"),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.2),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.03),
                minGammaEt = cms.double(1.5),
                minTrackHits = cms.uint32(8),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(1.0),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            leadingTrkOrPFCandOption = cms.string('leadPFCand'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.4),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minNeutralHadronEt = cms.double(30.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            vertexTrackFiltering = cms.bool(False),
            vxAssocQualityCuts = cms.PSet(
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            )
        )
    )),
    chargedHadronSrc = cms.InputTag("ak4PFJetsRecoTauChargedHadrons"),
    jetRegionSrc = cms.InputTag("recoTauAK4PFJets08Region"),
    jetSrc = cms.InputTag("ak4PFJets"),
    maxJetAbsEta = cms.double(2.5),
    minJetPt = cms.double(14.0),
    modifiers = cms.VPSet(cms.PSet(
        name = cms.string('sipt'),
        plugin = cms.string('RecoTauImpactParameterSignificancePlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.2),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.03),
                minGammaEt = cms.double(1.5),
                minTrackHits = cms.uint32(8),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(1.0),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            leadingTrkOrPFCandOption = cms.string('leadPFCand'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            pvFindingAlgo = cms.string('closestInDeltaZ'),
            recoverLeadingTrk = cms.bool(False),
            signalQualityCuts = cms.PSet(
                maxDeltaZ = cms.double(0.4),
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minNeutralHadronEt = cms.double(30.0),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            ),
            vertexTrackFiltering = cms.bool(False),
            vxAssocQualityCuts = cms.PSet(
                maxTrackChi2 = cms.double(100.0),
                maxTransverseImpactParameter = cms.double(0.1),
                minGammaEt = cms.double(0.5),
                minTrackHits = cms.uint32(3),
                minTrackPixelHits = cms.uint32(0),
                minTrackPt = cms.double(0.5),
                minTrackVertexWeight = cms.double(-1.0)
            )
        )
    ), 
        cms.PSet(
            DataType = cms.string('AOD'),
            EcalStripSumE_deltaEta = cms.double(0.03),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin')
        ), 
        cms.PSet(
            dRaddNeutralHadron = cms.double(0.12),
            dRaddPhoton = cms.double(-1.0),
            minGammaEt = cms.double(10.0),
            minNeutralHadronEt = cms.double(50.0),
            name = cms.string('tau_en_reconstruction'),
            plugin = cms.string('PFRecoTauEnergyAlgorithmPlugin'),
            verbosity = cms.int32(0)
        ), 
        cms.PSet(
            name = cms.string('TTIworkaround'),
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    piZeroSrc = cms.InputTag("ak4PFJetsLegacyHPSPiZeros")
)


process.combinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.combinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedMVAComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.combinedSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.conditionsInEdm = cms.EDProducer("ConditionDumperInEdm",
    gtEvmDigisLabel = cms.InputTag("gtEvmDigis")
)


process.convClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(30.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("tobTecStepClusters"),
    overrideTrkQuals = cms.InputTag("tobTecStepSelector","tobTecStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("tobTecStepTracks")
)


process.convLayerPairs = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters")
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        skipClusters = cms.InputTag("convClusters"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TIB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TID1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("convClusters"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("convClusters"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("convClusters"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("convClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix2+BPix3', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'BPix3+TIB1', 
        'BPix3+TIB2', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TIB1+TIB2', 
        'TIB1+TIB3', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB2+TID2_pos', 
        'TIB2+TID2_neg', 
        'TIB2+TIB3', 
        'TIB2+TIB4', 
        'TIB3+TIB4', 
        'TIB3+TOB1', 
        'TIB3+TID1_pos', 
        'TIB3+TID1_neg', 
        'TIB4+TOB1', 
        'TIB4+TOB2', 
        'TOB1+TOB2', 
        'TOB1+TOB3', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TOB2+TOB3', 
        'TOB2+TOB4', 
        'TOB2+TEC1_pos', 
        'TOB2+TEC1_neg', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC1_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg')
)


process.convStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("convStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(3.0),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(5.0, 8.0),
        d0_par2 = cms.vdouble(5.0, 8.0),
        dz_par1 = cms.vdouble(5.0, 8.0),
        dz_par2 = cms.vdouble(5.0, 8.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(1),
        minNumberLayers = cms.uint32(3),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('convStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.001),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('convStepTight'),
            preFilterName = cms.string('convStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(2.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(5.0, 8.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(1),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('convStep'),
            preFilterName = cms.string('convStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.convStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('conversionStep'),
    Fitter = cms.string('convStepFitterSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("convTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.convTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('convCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("convClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("photonConvTrajSeedFromSingleLeg","convSeedCandidates"),
    useHitsSplitting = cms.bool(True)
)


process.conversionStepConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('conversionStepTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.conversionStepTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("convStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("convStepSelector","convStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(1)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.conversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForConversions')
    ),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcECut = cms.double(1.5),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    bcEtCut = cms.double(1.5),
    ecalIsoCut_offset = cms.double(999999999),
    ecalIsoCut_slope = cms.double(0.0),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    fractionShared = cms.double(0.5),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    isoConeR = cms.double(0.4),
    isoEMin = cms.double(0.08),
    isoEtMin = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoInnerConeR = cms.double(3.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsInOut = cms.int32(50),
    maxNumOfSeedsOutIn = cms.int32(50),
    minSCEt = cms.double(20.0),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    scHybridBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
    useEtCut = cms.bool(True),
    useHitsSplitting = cms.bool(False),
    useNumXstals = cms.bool(True),
    vetoClusteredHits = cms.bool(False)
)


process.conversions = cms.EDProducer("ConvertedPhotonProducer",
    AlgorithmName = cms.string('ecalSeeded'),
    MVA_weights_location = cms.string('RecoEgamma/EgammaTools/data/TMVAnalysis_Likelihood.weights.txt'),
    bcBarrelCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    bcEndcapCollection = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    cleanedConvertedPhotonCollection = cms.string(''),
    conversionIOTrackProducer = cms.string('ckfInOutTracksFromConversions'),
    conversionOITrackProducer = cms.string('ckfOutInTracksFromConversions'),
    convertedPhotonCollection = cms.string('uncleanedConversions'),
    dRForConversionRecovery = cms.double(0.3),
    deltaCotCut = cms.double(0.05),
    generalTracksSrc = cms.InputTag("generalTracks"),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCollection = cms.string(''),
    inOutTrackSCAssociation = cms.string('inOutTrackSCAssociationCollection'),
    maxDelta = cms.double(0.01),
    maxHOverE = cms.double(0.15),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfCandidates = cms.int32(3),
    maxReducedChiSq = cms.double(225.0),
    minApproachDisCut = cms.double(0.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(20.0),
    outInTrackCollection = cms.string(''),
    outInTrackSCAssociation = cms.string('outInTrackSCAssociationCollection'),
    recoverOneTrackCase = cms.bool(True),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    scIslandEndcapProducer = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower")
)


process.correctedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.correctedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(False),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(6.0),
        brLinearLowThr = cms.double(0.9),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("multi5x5SuperClustersWithPreshower"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5')
)


process.cosmicMuons = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(False),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(False)
    )
)


process.cosmicMuons1Leg = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(True)
    )
)


process.cosmicsVeto = cms.EDProducer("CosmicsMuonIdProducer",
    CosmicCompFillerParameters = cms.PSet(
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        angleCut = cms.double(0.1),
        corrTimeNeg = cms.double(-10),
        corrTimePos = cms.double(5),
        deltaPt = cms.double(0.1),
        hIpTrdxy = cms.double(0.02),
        hIpTrvProb = cms.double(0.5),
        ipCut = cms.double(0.02),
        largedxy = cms.double(2.0),
        largedxyMult = cms.double(3.0),
        maxdxyLoose = cms.double(0.01),
        maxdxyLooseMult = cms.double(0.01),
        maxdxyTight = cms.double(1.0),
        maxdxyTightMult = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        maxdzLooseMult = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        maxdzTightMult = cms.double(10.0),
        maxvertRho = cms.double(5),
        maxvertZ = cms.double(20),
        minvProb = cms.double(0.001),
        nChamberMatches = cms.int32(1),
        nTrackThreshold = cms.int32(3),
        offTimeNegLoose = cms.double(-15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        offTimeNegTight = cms.double(-20.0),
        offTimeNegTightMult = cms.double(-20.0),
        offTimePosLoose = cms.double(15.0),
        offTimePosLooseMult = cms.double(15.0),
        offTimePosTight = cms.double(25.0),
        offTimePosTightMult = cms.double(25.0),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        sharedHits = cms.int32(5)
    ),
    muonCollection = cms.InputTag("muons1stStep"),
    trackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks"))
)


process.cosmicsVetoSeeds = cms.EDProducer("TrajectorySeedFromMuonProducer",
    muonCollectionTag = cms.InputTag("muons1stStep"),
    skipMatchedMuons = cms.bool(False),
    trackCollectionTag = cms.InputTag("generalTracks")
)


process.cosmicsVetoTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("cosmicsVetoSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicsVetoTracks = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("cosmicsVetoTracksRaw")
)


process.cosmicsVetoTracksRaw = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicsVetoTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.csc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    CSCDebug = cms.untracked.bool(False),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    CSCStripClusterChargeCut = cms.double(25.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    CSCStripPeakThreshold = cms.double(10.0),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCUseCalibrations = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(False),
    CSCUseStaticPedestals = cms.bool(False),
    CSCUseTimingCorrections = cms.bool(True),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCstripWireDeltaTime = cms.int32(8),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    UseAverageTime = cms.bool(False),
    UseFivePoleFit = cms.bool(True),
    UseParabolaFit = cms.bool(False),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023),
    readBadChambers = cms.bool(True),
    readBadChannels = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi")
)


process.cscSegments = cms.EDProducer("CSCSegmentProducer",
    algo_psets = cms.VPSet(cms.PSet(
        algo_name = cms.string('CSCSegAlgoSK'),
        algo_psets = cms.VPSet(cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.003),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        ), 
            cms.PSet(
                chi2Max = cms.double(99999.0),
                dPhiFineMax = cms.double(0.025),
                dPhiMax = cms.double(0.025),
                dRPhiFineMax = cms.double(3.0),
                dRPhiMax = cms.double(8.0),
                minLayersApart = cms.int32(2),
                verboseInfo = cms.untracked.bool(True),
                wideSeg = cms.double(3.0)
            )),
        chamber_types = cms.vstring('ME1/a', 
            'ME1/b', 
            'ME1/2', 
            'ME1/3', 
            'ME2/1', 
            'ME2/2', 
            'ME3/1', 
            'ME3/2', 
            'ME4/1'),
        parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
            1, 1, 1, 1)
    ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoTC'),
            algo_psets = cms.VPSet(cms.PSet(
                SegmentSorting = cms.int32(1),
                chi2Max = cms.double(6000.0),
                chi2ndfProbMin = cms.double(0.0001),
                dPhiFineMax = cms.double(0.02),
                dPhiMax = cms.double(0.003),
                dRPhiFineMax = cms.double(6.0),
                dRPhiMax = cms.double(1.2),
                minLayersApart = cms.int32(2),
                verboseInfo = cms.untracked.bool(True)
            ), 
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.013),
                    dPhiMax = cms.double(0.00198),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1)
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoDF'),
            algo_psets = cms.VPSet(cms.PSet(
                CSCSegmentDebug = cms.untracked.bool(False),
                Pruning = cms.untracked.bool(False),
                chi2Max = cms.double(5000.0),
                dPhiFineMax = cms.double(0.025),
                dRPhiFineMax = cms.double(8.0),
                dXclusBoxMax = cms.double(8.0),
                dYclusBoxMax = cms.double(8.0),
                maxRatioResidualPrune = cms.double(3.0),
                minHitsForPreClustering = cms.int32(10),
                minHitsPerSegment = cms.int32(3),
                minLayersApart = cms.int32(2),
                nHitsPerClusterIsShower = cms.int32(20),
                preClustering = cms.untracked.bool(False),
                tanPhiMax = cms.double(0.5),
                tanThetaMax = cms.double(1.2)
            ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(12.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(12.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.8),
                    tanThetaMax = cms.double(2.0)
                ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(30),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
                2, 1, 2, 1)
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoST'),
            algo_psets = cms.VPSet(cms.PSet(
                BPMinImprovement = cms.double(10000.0),
                BrutePruning = cms.bool(True),
                CSCDebug = cms.untracked.bool(False),
                CorrectTheErrors = cms.bool(True),
                Covariance = cms.double(0.0),
                ForceCovariance = cms.bool(False),
                ForceCovarianceAll = cms.bool(False),
                NormChi2Cut2D = cms.double(20.0),
                NormChi2Cut3D = cms.double(10.0),
                Pruning = cms.bool(True),
                SeedBig = cms.double(0.0015),
                SeedSmall = cms.double(0.0002),
                curvePenalty = cms.double(2.0),
                curvePenaltyThreshold = cms.double(0.85),
                dPhiFineMax = cms.double(0.025),
                dRPhiFineMax = cms.double(8.0),
                dXclusBoxMax = cms.double(4.0),
                dYclusBoxMax = cms.double(8.0),
                hitDropLimit4Hits = cms.double(0.6),
                hitDropLimit5Hits = cms.double(0.8),
                hitDropLimit6Hits = cms.double(0.3333),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                maxRatioResidualPrune = cms.double(3),
                maxRecHitsInCluster = cms.int32(20),
                minHitsPerSegment = cms.int32(3),
                onlyBestSegment = cms.bool(False),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True),
                prePrun = cms.bool(True),
                prePrunLimit = cms.double(3.17),
                tanPhiMax = cms.double(0.5),
                tanThetaMax = cms.double(1.2),
                useShowering = cms.bool(False),
                yweightPenalty = cms.double(1.5),
                yweightPenaltyThreshold = cms.double(1.0)
            ), 
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(24),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1)
        )),
    algo_type = cms.int32(4),
    inputObjects = cms.InputTag("csc2DRecHits")
)


process.csctfDigis = cms.EDProducer("CSCTFUnpacker",
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3),
    mappingFile = cms.string(''),
    producer = cms.InputTag("rawDataCollector"),
    slot2sector = cms.vint32(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0),
    swapME1strips = cms.bool(False)
)


process.dedxHarmonic2 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxHitInfo = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.dedxTruncated40 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.detachedTripletStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("detachedTripletStepTracks"), cms.InputTag("detachedTripletStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(0.13, 0.13),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("detachedTripletStepSelector","detachedTripletStepVtx"), cms.InputTag("detachedTripletStepSelector","detachedTripletStepTrk")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    shareFrac = cms.double(0.13),
    writeOnlyTrkQuals = cms.bool(True)
)


process.detachedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag("initialStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("initialStepTracks")
)


process.detachedTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.detachedTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("detachedTripletStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(15.0),
            originRadius = cms.double(1.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.3)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.detachedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter3_13TeV_v0'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("detachedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(1.2, 3.0),
        d0_par2 = cms.vdouble(1.3, 3.0),
        dz_par1 = cms.vdouble(1.2, 3.0),
        dz_par2 = cms.vdouble(1.3, 3.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.5),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('detachedTripletStepVtxLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.4, 4.0),
            d0_par2 = cms.vdouble(1.4, 4.0),
            dz_par1 = cms.vdouble(1.4, 4.0),
            dz_par2 = cms.vdouble(1.4, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrkLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.9),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 3.0),
            d0_par2 = cms.vdouble(1.2, 3.0),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepVtxTight'),
            preFilterName = cms.string('detachedTripletStepVtxLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrkTight'),
            preFilterName = cms.string('detachedTripletStepTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepVtx'),
            preFilterName = cms.string('detachedTripletStepVtxLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 4.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrk'),
            preFilterName = cms.string('detachedTripletStepTrkLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.detachedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("detachedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("detachedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.detachedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('detachedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("detachedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.displacedGlobalMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaR = cms.double(0.2),
            DeltaZ_Region = cms.double(15.9),
            EscapePt = cms.double(1.5),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.double(0.2),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.string(''),
            OnDemand = cms.double(-1.0),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.double(0.2),
            Phi_min = cms.double(0.1),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseFixedRegion = cms.bool(False),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            vertexCollection = cms.InputTag("pixelVertices")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("displacedStandAloneMuons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("displacedTracks")
)


process.displacedMuonSeeds = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(False),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.displacedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("displacedMuonSeeds"),
    MuonTrajectoryBuilder = cms.string('StandAloneMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.displacedTracks = cms.EDProducer("DuplicateListMerger",
    candidateSource = cms.InputTag("duplicateDisplacedTrackCandidates","candidateMap"),
    diffHitsCut = cms.int32(5),
    mergedMVAVals = cms.InputTag("duplicateDisplacedTrackSelector","MVAVals"),
    mergedSource = cms.InputTag("mergedDuplicateDisplacedTracks"),
    minTrkProbCut = cms.double(0.0),
    newQuality = cms.string('confirmed'),
    originalSource = cms.InputTag("preDuplicateMergingDisplacedTracks")
)


process.dt1DCosmicRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)


process.dt1DRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)


process.dt4DCosmicSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits"),
    recHits2DLabel = cms.InputTag("dt2DCosmicSegments")
)


process.dt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dttfDigis = cms.EDProducer("DTTFFEDReader",
    DTTF_FED_Source = cms.InputTag("rawDataCollector"),
    verbose = cms.untracked.bool(False)
)


process.duplicateDisplacedTrackCandidates = cms.EDProducer("DuplicateTrackMerger",
    forestLabel = cms.string('MVADuplicate'),
    maxDCA = cms.double(30.0),
    maxDLambda = cms.double(0.3),
    maxDPhi = cms.double(0.3),
    maxDQoP = cms.double(0.25),
    maxDdsz = cms.double(10.0),
    maxDdxy = cms.double(10.0),
    minBDTG = cms.double(-0.1),
    minDeltaR3d = cms.double(-4.0),
    minP = cms.double(0.4),
    minpT = cms.double(0.2),
    source = cms.InputTag("preDuplicateMergingDisplacedTracks"),
    ttrhBuilderName = cms.string('WithAngleAndTemplate'),
    useInnermostState = cms.bool(True)
)


process.duplicateDisplacedTrackSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("mergedDuplicateDisplacedTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(0),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('duplicateDisplacedTrackSelectorLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.duplicateTrackCandidates = cms.EDProducer("DuplicateTrackMerger",
    forestLabel = cms.string('MVADuplicate'),
    maxDCA = cms.double(30.0),
    maxDLambda = cms.double(0.3),
    maxDPhi = cms.double(0.3),
    maxDQoP = cms.double(0.25),
    maxDdsz = cms.double(10.0),
    maxDdxy = cms.double(10.0),
    minBDTG = cms.double(-0.1),
    minDeltaR3d = cms.double(-4.0),
    minP = cms.double(0.4),
    minpT = cms.double(0.2),
    source = cms.InputTag("preDuplicateMergingGeneralTracks"),
    ttrhBuilderName = cms.string('WithAngleAndTemplate'),
    useInnermostState = cms.bool(True)
)


process.duplicateTrackSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("mergedDuplicateTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(0),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('duplicateTrackSelectorLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.earlyDisplacedMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("displacedStandAloneMuons")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(3.0),
    minPCaloMuon = cms.double(3.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.earlyGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("initialStepTracks"), cms.InputTag("jetCoreRegionalStepTracks"), cms.InputTag("lowPtTripletStepTracks"), cms.InputTag("pixelPairStepTracks"), cms.InputTag("detachedTripletStepTracks"), 
        cms.InputTag("mixedTripletStepTracks"), cms.InputTag("pixelLessStepTracks"), cms.InputTag("tobTecStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1, 1, 1, 
        1, 1, 1),
    indivShareFrac = cms.vdouble(1.0, 0.19, 0.16, 0.19, 0.13, 
        0.11, 0.11, 0.09),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("initialStep"), cms.InputTag("jetCoreRegionalStepSelector","jetCoreRegionalStep"), cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"), cms.InputTag("pixelPairStepSelector","pixelPairStep"), cms.InputTag("detachedTripletStep"), 
        cms.InputTag("mixedTripletStep"), cms.InputTag("pixelLessStep"), cms.InputTag("tobTecStepSelector","tobTecStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3, 4, 
            5, 6, 7)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.earlyMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("standAloneMuons","UpdatedAtVtx")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(3.0),
    minPCaloMuon = cms.double(3.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.ecalCompactTrigPrim = cms.EDProducer("EcalCompactTrigPrimProducer",
    inColl = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    outColl = cms.string('')
)


process.ecalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("ecalDigis"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeFEToBeRecovered = cms.string('eeFE'),
    eeIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    eeIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    eeSrFlagCollection = cms.InputTag("ecalDigis"),
    integrityBlockSizeErrors = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    integrityTTIdErrors = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors")
)


process.ecalDigis = cms.EDProducer("EcalRawToDigi",
    DoRegional = cms.bool(False),
    FEDs = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    FedLabel = cms.InputTag("listfeds"),
    InputLabel = cms.InputTag("rawDataCollector"),
    eventPut = cms.bool(True),
    feIdCheck = cms.bool(True),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True),
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(1, 2, 3, 4, 5, 
        6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 
        16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 
        26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 
        46, 47, 48, 49, 50, 
        51, 52, 53, 54),
    orderedFedList = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    silentMode = cms.untracked.bool(True),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    tccUnpacking = cms.bool(True)
)


process.ecalDrivenElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    SeedConfiguration = cms.PSet(
        DeltaPhi1High = cms.double(0.08),
        DeltaPhi1Low = cms.double(0.23),
        DeltaPhi2B = cms.double(0.008),
        DeltaPhi2F = cms.double(0.012),
        HighPtThreshold = cms.double(35.0),
        LowPtThreshold = cms.double(5.0),
        PhiMax2B = cms.double(0.002),
        PhiMax2F = cms.double(0.003),
        PhiMin2B = cms.double(-0.002),
        PhiMin2F = cms.double(-0.003),
        SCEtCut = cms.double(0.0),
        SizeWindowENeg = cms.double(0.675),
        applyHOverECut = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaZ1WithVertex = cms.double(25.0),
        dynamicPhiRoad = cms.bool(True),
        ePhiMax1 = cms.double(0.075),
        ePhiMin1 = cms.double(-0.125),
        fromTrackerSeeds = cms.bool(True),
        hOverEConeSize = cms.double(0.15),
        hOverEHBMinE = cms.double(0.7),
        hOverEHFMinE = cms.double(0.8),
        hOverEPtMin = cms.double(0.0),
        hcalRecHits = cms.InputTag("hbhereco"),
        hcalTowers = cms.InputTag("towerMaker"),
        initialSeeds = cms.InputTag("newCombinedSeeds"),
        maxHBarrel = cms.double(0.0),
        maxHEndcaps = cms.double(0.0),
        maxHOverEBarrel = cms.double(0.15),
        maxHOverEEndcaps = cms.double(0.15),
        measurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
        measurementTrackerName = cms.string(''),
        nSigmasDeltaZ1 = cms.double(5.0),
        pPhiMax1 = cms.double(0.125),
        pPhiMin1 = cms.double(-0.075),
        preFilteredSeeds = cms.bool(False),
        r2MaxF = cms.double(0.15),
        r2MinF = cms.double(-0.15),
        rMaxI = cms.double(0.2),
        rMinI = cms.double(-0.2),
        searchInTIDTEC = cms.bool(True),
        useRecoVertex = cms.bool(False),
        vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
        z2MaxB = cms.double(0.09),
        z2MinB = cms.double(-0.09)
    ),
    barrelSuperClusters = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    endcapSuperClusters = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower")
)


process.ecalDrivenGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    useGsfPfRecTracks = cms.bool(True)
)


process.ecalDrivenGsfElectrons = cms.EDProducer("GsfElectronEcalDrivenProducer",
    ElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    MaxElePtForOnlyMVA = cms.double(50.0),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_9Dec2013.weights.xml'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    addPflowElectrons = cms.bool(True),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0.0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0.0),
    gedElectronMode = cms.bool(False),
    gsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hOverEConeSize = cms.double(0.15),
    hOverEConeSizePflow = cms.double(0.15),
    hOverEPtMin = cms.double(0.0),
    hOverEPtMinPflow = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    intRadiusBarrelTk = cms.double(0.015),
    intRadiusEcalBarrel = cms.double(3.0),
    intRadiusEcalEndcaps = cms.double(3.0),
    intRadiusEndcapTk = cms.double(0.015),
    intRadiusHcal = cms.double(0.15),
    isBarrel = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    isEndcaps = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    isFiducial = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    jurassicWidth = cms.double(1.5),
    maxDeltaEtaBarrel = cms.double(0.02),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxDeltaEtaEndcaps = cms.double(0.02),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    maxDrbTk = cms.double(999999999.0),
    maxEOverPBarrel = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    maxFbremBarrel = cms.double(999999999.0),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    maxHBarrel = cms.double(0.0),
    maxHBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxHOverEEndcaps = cms.double(0.15),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    maxVtxDistTk = cms.double(0.2),
    minEOverPBarrel = cms.double(0.0),
    minEOverPBarrelPflow = cms.double(0.0),
    minEOverPEndcaps = cms.double(0.0),
    minEOverPEndcapsPflow = cms.double(0.0),
    minMVA = cms.double(-0.4),
    minMVAPflow = cms.double(-0.4),
    minMvaByPassForIsolated = cms.double(-0.4),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    minSCEtBarrel = cms.double(4.0),
    minSCEtBarrelPflow = cms.double(0.0),
    minSCEtEndcaps = cms.double(4.0),
    minSCEtEndcapsPflow = cms.double(0.0),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    previousGsfElectronsTag = cms.InputTag(""),
    ptMinTk = cms.double(0.7),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    seedFromTEC = cms.bool(True),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    stripBarrelTk = cms.double(0.015),
    stripEndcapTk = cms.double(0.015),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    useCombinationRegression = cms.bool(False),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useIsolationValues = cms.bool(False),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.ecalMultiFitUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerMultiFit'),
    algoPSet = cms.PSet(
        EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
        EBtimeConstantTerm = cms.double(0.6),
        EBtimeFitLimits_Lower = cms.double(0.2),
        EBtimeFitLimits_Upper = cms.double(1.4),
        EBtimeFitParameters = cms.vdouble(-2.015452, 3.130702, -12.3473, 41.88921, -82.83944, 
            91.01147, -50.35761, 11.05621),
        EBtimeNconst = cms.double(28.5),
        EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
        EEtimeConstantTerm = cms.double(1.0),
        EEtimeFitLimits_Lower = cms.double(0.2),
        EEtimeFitLimits_Upper = cms.double(1.4),
        EEtimeFitParameters = cms.vdouble(-2.390548, 3.553628, -17.62341, 67.67538, -133.213, 
            140.7432, -75.41106, 16.20277),
        EEtimeNconst = cms.double(31.8),
        EcalPulseShapeParameters = cms.PSet(
            EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
                0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
            EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
                0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
            EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
                0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
            EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
                -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
                0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
                -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
                -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
                8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
                1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
                0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
                2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
                -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
                6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
                7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
                5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
                1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
                -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
                1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
                3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
                1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
                6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
                0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
                6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
                0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
                7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
                6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
                5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
                3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
            EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
                0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
                0.0693181, 0.0475044),
            EBdigiCollection = cms.string(''),
            EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
                0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
            EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
                0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
            EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
                0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
            EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
                -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
                0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
                -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
                -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
                6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
                1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
                0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
                3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
                -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
                6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
                9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
                4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
                1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
                -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
                2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
                4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
                2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
                8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
                0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
                8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
                0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
                9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
                7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
                6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
                3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07),
            EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
                0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
                0.0874288, 0.061957),
            EEdigiCollection = cms.string(''),
            ESdigiCollection = cms.string(''),
            EcalPreMixStage1 = cms.bool(False),
            EcalPreMixStage2 = cms.bool(False),
            UseLCcorrection = cms.untracked.bool(True)
        ),
        activeBXs = cms.vint32(-5, -4, -3, -2, -1, 
            0, 1, 2, 3, 4),
        ampErrorCalculation = cms.bool(True),
        amplitudeThresholdEB = cms.double(10),
        amplitudeThresholdEE = cms.double(10),
        chi2ThreshEB_ = cms.double(65.0),
        chi2ThreshEE_ = cms.double(50.0),
        doPrefitEB = cms.bool(False),
        doPrefitEE = cms.bool(False),
        ebPulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194),
        ebSpikeThreshold = cms.double(1.042),
        eePulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194),
        kPoorRecoFlagEB = cms.bool(True),
        kPoorRecoFlagEE = cms.bool(False),
        outOfTimeThresholdGain12mEB = cms.double(5),
        outOfTimeThresholdGain12mEE = cms.double(1000),
        outOfTimeThresholdGain12pEB = cms.double(5),
        outOfTimeThresholdGain12pEE = cms.double(1000),
        outOfTimeThresholdGain61mEB = cms.double(5),
        outOfTimeThresholdGain61mEE = cms.double(1000),
        outOfTimeThresholdGain61pEB = cms.double(5),
        outOfTimeThresholdGain61pEE = cms.double(1000),
        prefitMaxChiSqEB = cms.double(25.0),
        prefitMaxChiSqEE = cms.double(10.0),
        timealgo = cms.string('RatioMethod'),
        useLumiInfoRunHeader = cms.bool(True)
    )
)


process.ecalPreshowerDigis = cms.EDProducer("ESRawToDigi",
    ESdigiCollection = cms.string(''),
    InstanceES = cms.string(''),
    LookupTable = cms.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    debugMode = cms.untracked.bool(False),
    sourceTag = cms.InputTag("rawDataCollector")
)


process.ecalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESdigiCollection = cms.InputTag("ecalPreshowerDigis"),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker')
)


process.ecalRecHit = cms.EDProducer("EcalRecHitProducer",
    ChannelStatusToBeExcluded = cms.vstring('kNoisy', 
        'kNNoisy', 
        'kFixedG6', 
        'kFixedG1', 
        'kFixedG0', 
        'kNonRespondingIsolated', 
        'kDeadVFE', 
        'kDeadFE', 
        'kNoDataNoTP'),
    EBLaserMAX = cms.double(3.0),
    EBLaserMIN = cms.double(0.5),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    EBuncalibRecHitCollection = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EELaserMAX = cms.double(8.0),
    EELaserMIN = cms.double(0.5),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    EEuncalibRecHitCollection = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    algo = cms.string('EcalRecHitWorkerSimple'),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    cleaningConfig = cms.PSet(
        cThreshold_barrel = cms.double(4),
        cThreshold_double = cms.double(10),
        cThreshold_endcap = cms.double(15),
        e4e1Threshold_barrel = cms.double(0.08),
        e4e1Threshold_endcap = cms.double(0.3),
        e4e1_a_barrel = cms.double(0.02),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_barrel = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e6e2thresh = cms.double(0.04),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        tightenCrack_e1_double = cms.double(2),
        tightenCrack_e1_single = cms.double(1),
        tightenCrack_e4e1_single = cms.double(2.5),
        tightenCrack_e6e2_double = cms.double(3)
    ),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    ebDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebDetId"),
    ebFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebFE"),
    eeDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeDetId"),
    eeFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeFE"),
    flagsMapDBReco = cms.PSet(
        kDead = cms.vstring('kNoDataNoTP'),
        kGood = cms.vstring('kOk', 
            'kDAC', 
            'kNoLaser', 
            'kNoisy'),
        kNeighboursRecovered = cms.vstring('kFixedG0', 
            'kNonRespondingIsolated', 
            'kDeadVFE'),
        kNoisy = cms.vstring('kNNoisy', 
            'kFixedG6', 
            'kFixedG1'),
        kTowerRecovered = cms.vstring('kDeadFE')
    ),
    killDeadChannels = cms.bool(True),
    laserCorrection = cms.bool(True),
    logWarningEtThreshold_EB_FE = cms.double(50),
    logWarningEtThreshold_EE_FE = cms.double(50),
    recoverEBFE = cms.bool(True),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    recoverEEFE = cms.bool(True),
    recoverEEIsolatedChannels = cms.bool(False),
    recoverEEVFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('NeuralNetworks'),
    singleChannelRecoveryThreshold = cms.double(8),
    triggerPrimitiveDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalTPSkim = cms.EDProducer("EcalTPSkimmer",
    chStatusToSelectTP = cms.vuint32(13),
    doBarrel = cms.bool(True),
    doEndcap = cms.bool(True),
    skipModule = cms.bool(False),
    tpInputCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    tpOutputCollection = cms.string('')
)


process.egmGedGsfElectronPFNoPileUpIsolation = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(cms.PSet(
        VetoConeSizeBarrel = cms.double(0.0),
        VetoConeSizeEndcaps = cms.double(0.015),
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h+'),
        isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
        miniAODVertexCodes = cms.vuint32(2, 3)
    ), 
        cms.PSet(
            VetoConeSizeBarrel = cms.double(0.0),
            VetoConeSizeEndcaps = cms.double(0.0),
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('h0'),
            isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3)
        ), 
        cms.PSet(
            VetoConeSizeBarrel = cms.double(0.0),
            VetoConeSizeEndcaps = cms.double(0.08),
            coneSize = cms.double(0.3),
            isolateAgainst = cms.string('gamma'),
            isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
            miniAODVertexCodes = cms.vuint32(2, 3)
        )),
    srcForIsolationCone = cms.InputTag("pfNoPileUpCandidates"),
    srcToIsolate = cms.InputTag("gedGsfElectrons")
)


process.egmGedGsfElectronPFPileUpIsolation = cms.EDProducer("CITKPFIsolationSumProducer",
    isolationConeDefinitions = cms.VPSet(cms.PSet(
        VetoConeSizeBarrel = cms.double(0.0),
        VetoConeSizeEndcaps = cms.double(0.015),
        coneSize = cms.double(0.3),
        isolateAgainst = cms.string('h+'),
        isolationAlgo = cms.string('ElectronPFIsolationWithConeVeto'),
        miniAODVertexCodes = cms.vuint32(0, 1)
    )),
    srcForIsolationCone = cms.InputTag("pfPileUpAllChargedParticles"),
    srcToIsolate = cms.InputTag("gedGsfElectrons")
)


process.eidLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7),
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0)
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4),
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    electronIDType = cms.string('classbased'),
    electronQuality = cms.string('loose'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidRobustHighEnergy = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7),
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0)
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4),
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    electronIDType = cms.string('robust'),
    electronQuality = cms.string('highenergy'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidRobustLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7),
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0)
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4),
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    electronIDType = cms.string('robust'),
    electronQuality = cms.string('loose'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidRobustTight = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7),
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0)
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4),
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    electronIDType = cms.string('robust'),
    electronQuality = cms.string('tight'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.eidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    additionalCategories = cms.bool(True),
    algorithm = cms.string('eIDCB'),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7),
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0)
    ),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4),
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544)
    ),
    electronIDType = cms.string('classbased'),
    electronQuality = cms.string('tight'),
    electronVersion = cms.string(''),
    etBinning = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    src = cms.InputTag("gedGsfElectrons"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS")
)


process.electronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForElectrons')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("electronMergedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.electronEcalPFClusterIsolationProducer = cms.EDProducer("ElectronEcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedGsfElectrons"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducer = cms.InputTag("particleFlowClusterECAL")
)


process.electronGsfTracks = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("electronCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.electronHcalPFClusterIsolationProducer = cms.EDProducer("ElectronHcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedGsfElectrons"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducerHCAL = cms.InputTag("particleFlowClusterHCAL"),
    useHF = cms.bool(False)
)


process.electronMergedSeeds = cms.EDProducer("ElectronSeedMerger",
    EcalBasedSeeds = cms.InputTag("ecalDrivenElectronSeeds"),
    TkBasedSeeds = cms.InputTag("trackerDrivenElectronSeeds","SeedsForGsf")
)


process.firstStepPrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(4.0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            dzCutOff = cms.double(4.0),
            vertexSize = cms.double(0.01)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(5.0),
        maxNormalizedChi2 = cms.double(20.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("initialStepTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.firstStepPrimaryVerticesPreSplitting = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(4.0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            dzCutOff = cms.double(4.0),
            vertexSize = cms.double(0.01)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(5.0),
        maxNormalizedChi2 = cms.double(20.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("initialStepTracksPreSplitting"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.fixedGridRhoAll = cms.EDProducer("FixedGridRhoProducer",
    EtaRegion = cms.string('All'),
    pfCandidatesTag = cms.InputTag("particleFlow")
)


process.fixedGridRhoFastjetAll = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("particleFlow")
)


process.fixedGridRhoFastjetAllCalo = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("towerMaker")
)


process.fixedGridRhoFastjetCentralCalo = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("towerMaker")
)


process.fixedGridRhoFastjetCentralChargedPileUp = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("particleFlow"),
    src = cms.InputTag("pfPileUpAllChargedParticles")
)


process.fixedGridRhoFastjetCentralNeutral = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(2.5),
    pfCandidatesTag = cms.InputTag("particleFlow"),
    src = cms.InputTag("pfAllNeutralHadronsAndPhotons")
)


process.gctDigis = cms.EDProducer("GctRawToDigi",
    checkHeaders = cms.untracked.bool(False),
    gctFedId = cms.untracked.int32(745),
    hltMode = cms.bool(False),
    inputLabel = cms.InputTag("rawDataCollector"),
    numberOfGctSamplesToUnpack = cms.uint32(1),
    numberOfRctSamplesToUnpack = cms.uint32(1),
    unpackSharedRegions = cms.bool(False),
    unpackerVersion = cms.uint32(0),
    verbose = cms.untracked.bool(False)
)


process.gedElPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoValueCharged03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueChargedAll03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueGamma03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueNeutral03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValuePU03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedGsfElectronCores = cms.EDProducer("GEDGsfElectronCoreProducer",
    GEDEMUnbiased = cms.InputTag("particleFlowEGamma"),
    ctfTracks = cms.InputTag("generalTracks"),
    gsfTracks = cms.InputTag("electronGsfTracks")
)


process.gedGsfElectrons = cms.EDProducer("GEDGsfElectronFinalizer",
    outputCollectionLabel = cms.string(''),
    pfCandidatesTag = cms.InputTag("particleFlowTmp"),
    pfIsolationValues = cms.PSet(
        pfSumChargedHadronPt = cms.InputTag("gedElPFIsoValueCharged03"),
        pfSumNeutralHadronEt = cms.InputTag("gedElPFIsoValueNeutral03"),
        pfSumPUPt = cms.InputTag("gedElPFIsoValuePU03"),
        pfSumPhotonEt = cms.InputTag("gedElPFIsoValueGamma03")
    ),
    previousGsfElectronsTag = cms.InputTag("gedGsfElectronsTmp")
)


process.gedGsfElectronsTmp = cms.EDProducer("GEDGsfElectronProducer",
    ElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    MaxElePtForOnlyMVA = cms.double(50.0),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    addPflowElectrons = cms.bool(True),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(True),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring('gedelectron_p4combination_offline'),
    combinationWeightsFromDB = cms.bool(True),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(False),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(False),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring('gedelectron_EBCorrection_offline_v1', 
        'gedelectron_EECorrection_offline_v1', 
        'gedelectron_EBUncertainty_offline_v1', 
        'gedelectron_EEUncertainty_offline_v1'),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0.0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0.0),
    gedElectronMode = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("gedGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hOverEConeSize = cms.double(0.15),
    hOverEConeSizePflow = cms.double(0.15),
    hOverEPtMin = cms.double(0.0),
    hOverEPtMinPflow = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    intRadiusBarrelTk = cms.double(0.015),
    intRadiusEcalBarrel = cms.double(3.0),
    intRadiusEcalEndcaps = cms.double(3.0),
    intRadiusEndcapTk = cms.double(0.015),
    intRadiusHcal = cms.double(0.15),
    isBarrel = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    isEndcaps = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    isFiducial = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    jurassicWidth = cms.double(1.5),
    maxDeltaEtaBarrel = cms.double(0.02),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxDeltaEtaEndcaps = cms.double(0.02),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    maxDrbTk = cms.double(999999999.0),
    maxEOverPBarrel = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    maxFbremBarrel = cms.double(999999999.0),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    maxHBarrel = cms.double(0.0),
    maxHBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxHOverEEndcaps = cms.double(0.15),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    maxVtxDistTk = cms.double(0.2),
    minEOverPBarrel = cms.double(0.0),
    minEOverPBarrelPflow = cms.double(0.0),
    minEOverPEndcaps = cms.double(0.0),
    minEOverPEndcapsPflow = cms.double(0.0),
    minMVA = cms.double(-0.4),
    minMVAPflow = cms.double(-0.4),
    minMvaByPassForIsolated = cms.double(-0.4),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    minSCEtBarrel = cms.double(4.0),
    minSCEtBarrelPflow = cms.double(0.0),
    minSCEtEndcaps = cms.double(4.0),
    minSCEtEndcapsPflow = cms.double(0.0),
    outputEGMPFValueMap = cms.string(''),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    previousGsfElectronsTag = cms.InputTag(""),
    ptMinTk = cms.double(0.7),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    seedFromTEC = cms.bool(True),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    stripBarrelTk = cms.double(0.015),
    stripEndcapTk = cms.double(0.015),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    useCombinationRegression = cms.bool(True),
    useEcalRegression = cms.bool(True),
    useGsfPfRecTracks = cms.bool(True),
    useIsolationValues = cms.bool(False),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.gedPhotonCore = cms.EDProducer("GEDPhotonCoreProducer",
    gedPhotonCoreCollection = cms.string(''),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds")
)


process.gedPhotons = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromRefinedSCRegression'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("gedPhotonsTmp"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('final'),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('gedphoton_EBCorrection_offline_v1'),
        regressionKeyEE = cms.string('gedphoton_EECorrection_offline_v1'),
        uncertaintyKeyEB = cms.string('gedphoton_EBUncertainty_offline_v1'),
        uncertaintyKeyEE = cms.string('gedphoton_EEUncertainty_offline_v1'),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('valMapPFEgammaCandToPhoton')
)


process.gedPhotonsTmp = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromRefinedSCRegression'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("gedPhotonCore"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('tmp'),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('gedphoton_EBCorrection_offline_v1'),
        regressionKeyEE = cms.string('gedphoton_EECorrection_offline_v1'),
        uncertaintyKeyEB = cms.string('gedphoton_EBUncertainty_offline_v1'),
        uncertaintyKeyEE = cms.string('gedphoton_EEUncertainty_offline_v1'),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('valMapPFEgammaCandToPhoton')
)


process.generalConversionStepConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("generalConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("conversionStepConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.generalConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('generalTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.generalInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("inOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("generalConversionStepConversionTrackMerger"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.generalTracks = cms.EDProducer("DuplicateListMerger",
    candidateSource = cms.InputTag("duplicateTrackCandidates","candidateMap"),
    diffHitsCut = cms.int32(5),
    mergedMVAVals = cms.InputTag("duplicateTrackSelector","MVAVals"),
    mergedSource = cms.InputTag("mergedDuplicateTracks"),
    minTrkProbCut = cms.double(0.0),
    newQuality = cms.string('confirmed'),
    originalSource = cms.InputTag("preDuplicateMergingGeneralTracks")
)


process.generalV0Candidates = cms.EDProducer("V0Producer",
    doKShorts = cms.bool(True),
    doLambdas = cms.bool(True),
    innerHitPosCut = cms.double(4.0),
    kShortMassCut = cms.double(0.07),
    lambdaMassCut = cms.double(0.05),
    mPiPiCut = cms.double(0.6),
    tkChi2Cut = cms.double(10.0),
    tkDCACut = cms.double(2.0),
    tkIPSigCut = cms.double(2.0),
    tkNHitsCut = cms.int32(7),
    tkPtCut = cms.double(0.35),
    trackRecoAlgorithm = cms.InputTag("generalTracks"),
    useRefTracks = cms.bool(True),
    v0CosThetaCut = cms.double(0.9998),
    vertexFitter = cms.bool(True),
    vtxChi2Cut = cms.double(15.0),
    vtxDecayRSigCut = cms.double(10.0)
)


process.ghostTrackBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('ghostTrackComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("ghostTrackVertexTagInfos"))
)


process.ghostTrackVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(1),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('gtvr'),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        maxFitChi2 = cms.double(10.0),
        mergeThreshold = cms.double(3.0),
        primcut = cms.double(2.0),
        seccut = cms.double(4.0)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.glbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    BaseLabel = cms.string('GLB'),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    InputCollection = cms.InputTag("globalMuons"),
    InputLinksCollection = cms.InputTag("globalMuons"),
    MaxChi2 = cms.double(100000.0),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    nSigma = cms.double(3.0)
)


process.globalMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaR = cms.double(0.2),
            DeltaZ_Region = cms.double(15.9),
            EscapePt = cms.double(1.5),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.double(0.2),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.string(''),
            OnDemand = cms.double(-1.0),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.double(0.2),
            Phi_min = cms.double(0.1),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseFixedRegion = cms.bool(False),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            vertexCollection = cms.InputTag("pixelVertices")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks")
)


process.globalSETMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaR = cms.double(0.2),
            DeltaZ_Region = cms.double(15.9),
            EscapePt = cms.double(1.5),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.double(0.2),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.string(''),
            OnDemand = cms.double(-1.0),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.double(0.2),
            Phi_min = cms.double(0.1),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseFixedRegion = cms.bool(False),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            vertexCollection = cms.InputTag("pixelVertices")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("standAloneSETMuons","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks")
)


process.gsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('electronGsfTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(False),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(True)
)


process.gsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("generalInOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("gsfConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.gtDigis = cms.EDProducer("L1GlobalTriggerRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("rawDataCollector"),
    UnpackBxInEvent = cms.int32(-1),
    Verbosity = cms.untracked.int32(0)
)


process.gtEvmDigis = cms.EDProducer("L1GlobalTriggerEvmRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    BstLengthBytes = cms.int32(-1),
    EvmGtFedId = cms.untracked.int32(812),
    EvmGtInputTag = cms.InputTag("rawDataCollector"),
    UnpackBxInEvent = cms.int32(-1)
)


process.hbheprereco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HBHE'),
    applyPedConstraint = cms.bool(True),
    applyPulseJitter = cms.bool(False),
    applyTimeConstraint = cms.bool(True),
    applyTimeSlew = cms.bool(True),
    applyUnconstrainedFit = cms.bool(False),
    chargeMax = cms.double(6.0),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(6.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string('HBHE'),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    fitTimes = cms.int32(1),
    flagParameters = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    hscpParameters = cms.PSet(
        TimingEnergyThreshold = cms.double(30.0),
        fracLeaderMax = cms.double(0.7),
        fracLeaderMin = cms.double(0.4),
        outerMax = cms.double(0.1),
        outerMin = cms.double(0.0),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        r2Max = cms.double(0.5),
        r2Min = cms.double(0.1),
        slopeMax = cms.double(-0.6),
        slopeMin = cms.double(-1.5)
    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string('HBHE'),
    meanPed = cms.double(0.0),
    meanTime = cms.double(-5.5),
    noise = cms.double(1),
    pedSigma = cms.double(0.5),
    puCorrMethod = cms.int32(2),
    pulseJitter = cms.double(1.0),
    pulseShapeParameters = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.5, -0.4, -0.3, 
            0.1),
        TS4TS5LowerThreshold = cms.vdouble(100, 120, 160, 200, 300, 
            500),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(4),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(2),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingShapedCutsFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    timeMax = cms.double(7),
    timeMin = cms.double(-18),
    timeSigma = cms.double(5.0),
    timingshapedcutsParameters = cms.PSet(
        ignorehighest = cms.bool(False),
        ignorelowest = cms.bool(True),
        tfilterEnvelope = cms.vdouble(50.0, -2.0, 4.25, 52.0, -2.0, 
            4.09, 54.0, -2.0, 3.95, 56.0, 
            -2.0, 3.82, 58.0, -2.0, 3.71, 
            60.0, -2.0, 3.6, 63.0, -2.0, 
            3.46, 66.0, -2.0, 3.33, 69.0, 
            -2.0, 3.22, 73.0, -2.0, 3.1, 
            77.0, -2.0, 2.99, 82.0, -2.0, 
            2.87, 88.0, -2.0, 2.75, 95.0, 
            -2.0, 2.64, 103.0, -2.0, 2.54, 
            113.0, -2.0, 2.44, 127.0, -2.0, 
            2.33, 146.0, -2.0, 2.23, 176.0, 
            -2.0, 2.13, 250.0, -2.0, 2.0),
        win_gain = cms.double(3.0),
        win_offset = cms.double(0.0)
    ),
    ts345chi2 = cms.double(100.0),
    ts3chi2 = cms.double(5.0),
    ts4Max = cms.double(500.0),
    ts4Min = cms.double(5.0),
    ts4chi2 = cms.double(15.0),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.hbhereco = cms.EDProducer("HBHEIsolatedNoiseReflagger",
    EBThreshold = cms.double(0.07),
    EEThreshold = cms.double(0.3),
    EcalAcceptSeverityLevel = cms.uint32(3),
    HBThreshold = cms.double(0.7),
    HEDThreshold = cms.double(0.8),
    HESThreshold = cms.double(0.8),
    HcalAcceptSeverityLevel = cms.uint32(9),
    LooseDiHitEne = cms.double(50.0),
    LooseEcalIsol = cms.double(0.08),
    LooseHPDEne1 = cms.double(10.0),
    LooseHPDEne2 = cms.double(80.0),
    LooseHPDHits1 = cms.int32(6),
    LooseHPDHits2 = cms.int32(3),
    LooseHcalIsol = cms.double(0.08),
    LooseMonoHitEne = cms.double(35.0),
    LooseRBXEne1 = cms.double(10.0),
    LooseRBXEne2 = cms.double(300.0),
    LooseRBXHits1 = cms.int32(14),
    LooseRBXHits2 = cms.int32(10),
    LooseTrackIsol = cms.double(0.1),
    MinValidTrackNHits = cms.int32(5),
    MinValidTrackPt = cms.double(0.3),
    MinValidTrackPtBarrel = cms.double(0.9),
    TightDiHitEne = cms.double(15.0),
    TightEcalIsol = cms.double(0.04),
    TightHPDEne1 = cms.double(10.0),
    TightHPDEne2 = cms.double(25.0),
    TightHPDHits1 = cms.int32(5),
    TightHPDHits2 = cms.int32(3),
    TightHcalIsol = cms.double(0.04),
    TightMonoHitEne = cms.double(15.0),
    TightRBXEne1 = cms.double(10.0),
    TightRBXEne2 = cms.double(50.0),
    TightRBXHits1 = cms.int32(12),
    TightRBXHits2 = cms.int32(10),
    TightTrackIsol = cms.double(0.05),
    UseEcalRecoveredHits = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    debug = cms.untracked.bool(False),
    ebInput = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeInput = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheInput = cms.InputTag("hbheprereco"),
    trackExtrapolationInput = cms.InputTag("trackExtrapolator")
)


process.hcalDigis = cms.EDProducer("HcalRawToDigi",
    ComplainEmptyData = cms.untracked.bool(False),
    ElectronicsMap = cms.string(''),
    ExpectedOrbitMessageTime = cms.untracked.int32(-1),
    FEDs = cms.untracked.vint32(),
    FilterDataQuality = cms.bool(True),
    HcalFirstFED = cms.untracked.int32(700),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    UnpackZDC = cms.untracked.bool(True),
    UnpackerMode = cms.untracked.int32(0),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(True)
)


process.hcalnoise = cms.EDProducer("HcalNoiseInfoProducer",
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalRecHitFlagsToBeExcluded = cms.vint32(11, 12, 13, 14, 15),
    TS4TS5EnergyThreshold = cms.double(50),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    calibdigiHBHEthreshold = cms.double(15),
    calibdigiHBHEtimeslices = cms.vint32(3, 4, 5, 6),
    calibdigiHFthreshold = cms.double(-999),
    calibdigiHFtimeslices = cms.vint32(0, 1, 2, 3, 4, 
        5, 6, 7, 8, 9),
    caloTowerCollName = cms.string('towerMaker'),
    digiCollName = cms.string('hcalDigis'),
    fillCaloTowers = cms.bool(True),
    fillDigis = cms.bool(True),
    fillRecHits = cms.bool(True),
    fillTracks = cms.bool(True),
    hlMaxHPDEMF = cms.double(-9999.0),
    hlMaxRBXEMF = cms.double(0.01),
    jetCollName = cms.string('ak4PFJets'),
    lMaxHighEHitTime = cms.double(9999.0),
    lMaxLowEHitTime = cms.double(9999.0),
    lMaxRatio = cms.double(999.0),
    lMinHPDHits = cms.int32(17),
    lMinHPDNoOtherHits = cms.int32(10),
    lMinHighEHitTime = cms.double(-9999.0),
    lMinLowEHitTime = cms.double(-9999.0),
    lMinRBXHits = cms.int32(999),
    lMinRatio = cms.double(-999.0),
    lMinZeros = cms.int32(10),
    lRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.5, 0.0, 
        0.0, 1.0, -0.5),
    maxCaloTowerIEta = cms.int32(20),
    maxNHF = cms.double(0.9),
    maxProblemRBXs = cms.int32(72),
    maxTrackEta = cms.double(2.0),
    maxjetindex = cms.int32(0),
    minEEMF = cms.double(50.0),
    minERatio = cms.double(50.0),
    minEZeros = cms.double(10.0),
    minHighHitE = cms.double(25.0),
    minLowHitE = cms.double(10.0),
    minR45HitE = cms.double(5.0),
    minRecHitE = cms.double(1.5),
    minTrackPt = cms.double(1.0),
    pMaxHPDEMF = cms.double(0.02),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    pMaxRBXEMF = cms.double(0.02),
    pMaxRatio = cms.double(0.85),
    pMinE = cms.double(40.0),
    pMinEEMF = cms.double(10.0),
    pMinERatio = cms.double(25.0),
    pMinEZeros = cms.double(5.0),
    pMinHPDHits = cms.int32(10),
    pMinHPDNoOtherHits = cms.int32(7),
    pMinHighEHitTime = cms.double(-4.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinRBXHits = cms.int32(20),
    pMinRBXRechitR45Count = cms.int32(1),
    pMinRBXRechitR45EnergyFraction = cms.double(0.1),
    pMinRBXRechitR45Fraction = cms.double(0.1),
    pMinRatio = cms.double(0.75),
    pMinZeros = cms.int32(4),
    recHitCollName = cms.string('hbhereco'),
    tMaxHighEHitTime = cms.double(6.0),
    tMaxLowEHitTime = cms.double(9999.0),
    tMaxRatio = cms.double(999.0),
    tMinHPDHits = cms.int32(16),
    tMinHPDNoOtherHits = cms.int32(9),
    tMinHighEHitTime = cms.double(-7.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMinRBXHits = cms.int32(50),
    tMinRatio = cms.double(-999.0),
    tMinZeros = cms.int32(8),
    tRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.2, 0.0, 
        0.0, 1.0, -0.2),
    trackCollName = cms.string('generalTracks')
)


process.hfEMClusters = cms.EDProducer("HFEMClusterProducer",
    correctionType = cms.int32(1),
    forcePulseFlagMC = cms.bool(False),
    hits = cms.InputTag("hfreco"),
    maximumRenergy = cms.double(50),
    maximumSL = cms.double(98),
    minTowerEnergy = cms.double(4.0),
    seedThresholdET = cms.double(5.0),
    usePMTFlag = cms.bool(True),
    usePulseFlag = cms.bool(True)
)


process.hfRecoEcalCandidate = cms.EDProducer("HFRecoEcalCandidateProducer",
    Correct = cms.bool(True),
    HFDBvector = cms.vdouble(1.0, 1.0, 0.899, 0.994, 0.958, 
        0.942, 0.943, 0.96, 0.928, 0.922, 
        0.896, 0.812, 1.0, 1.0, 0.82, 
        0.917, 0.952, 0.929, 0.975, 0.984, 
        1.012, 0.971, 1.016, 0.938, 1.0, 
        1.0, 0.0, 0.0, -0.0036, -0.0087, 
        -0.0049, -0.0161, -0.0072, -0.0033, -0.0066, 
        -0.0062, -0.0045, -0.009, 0.0, 0.0, 
        -0.0056, -0.0024, -0.0064, -0.0063, -0.0078, 
        -0.0079, -0.0075, -0.0074, 0.0009, -0.018, 
        0.0, 0.0, 1.0, 1.0, 1.0565, 
        1.0432, 1.0714, 1.114, 1.0908, 1.0576, 
        1.0821, 1.0807, 1.0885, 1.1783, 1.0, 
        1.0, 1.157, 1.0631, 1.0401, 1.0803, 
        1.0506, 1.0491, 1.0235, 1.0643, 0.991, 
        1.0489, 1.0, 1.0),
    HFDBversion = cms.int32(1),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    e1e9Cut = cms.vdouble(-1, 99),
    e9e25Cut = cms.double(0.94),
    eCOREe9Cut = cms.vdouble(-1, 99),
    eSeLCut = cms.vdouble(-1, 99),
    hfclusters = cms.InputTag("hfEMClusters"),
    intercept2DCut = cms.double(0.815),
    intercept2DSlope = cms.double(0.475)
)


process.hfreco = cms.EDProducer("HcalHitReconstructor",
    HFInWindowStat = cms.PSet(
        hflongEthresh = cms.double(40.0),
        hflongMaxWindowTime = cms.vdouble(10),
        hflongMinWindowTime = cms.vdouble(-10),
        hfshortEthresh = cms.double(40.0),
        hfshortMaxWindowTime = cms.vdouble(10),
        hfshortMinWindowTime = cms.vdouble(-12)
    ),
    PETstat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_R = cms.vdouble(0.98),
        long_R_29 = cms.vdouble(0.8),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_R = cms.vdouble(0.8),
        short_R_29 = cms.vdouble(0.8)
    ),
    S8S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(True),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        long_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        short_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1)
    ),
    S9S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(False),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927)
    ),
    Subdetector = cms.string('HF'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hcalDigis"),
    digiTimeFromDB = cms.bool(True),
    digistat = cms.PSet(
        HFdigiflagCoef = cms.vdouble(0.93, -0.38275, -0.012667),
        HFdigiflagExpectedPeak = cms.int32(2),
        HFdigiflagFirstSample = cms.int32(1),
        HFdigiflagMinEthreshold = cms.double(40),
        HFdigiflagSamplesToAdd = cms.int32(3)
    ),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(1),
    firstSample = cms.int32(2),
    hfTimingTrustParameters = cms.PSet(
        hfTimingTrustLevel1 = cms.int32(1),
        hfTimingTrustLevel2 = cms.int32(4)
    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    puCorrMethod = cms.int32(0),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(1),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(False),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(True),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.horeco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    puCorrMethod = cms.int32(0),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.hpsPFTauDiscriminationByDeadECALElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    dR = cms.double(0.08),
    minStatus = cms.uint32(12)
)


process.hpsPFTauDiscriminationByDecayModeFinding = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    coneSizeFormula = cms.string('max(min(0.1, 3.0/pt()), 0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        maxMass = cms.string('1.'),
        minMass = cms.double(-1000.0),
        nCharged = cms.uint32(1),
        nChargedPFCandsMin = cms.uint32(1),
        nPiZeros = cms.uint32(0),
        nTracksMin = cms.uint32(1)
    ), 
        cms.PSet(
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            minMass = cms.double(0.3),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            maxMass = cms.string('1.5'),
            minMass = cms.double(0.8),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        )),
    matchingCone = cms.double(0.5),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(True)
)


process.hpsPFTauDiscriminationByDecayModeFindingNewDMs = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    coneSizeFormula = cms.string('max(min(0.1, 3.0/pt()), 0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        maxMass = cms.string('1.'),
        minMass = cms.double(-1000.0),
        nCharged = cms.uint32(1),
        nChargedPFCandsMin = cms.uint32(1),
        nPiZeros = cms.uint32(0),
        nTracksMin = cms.uint32(1)
    ), 
        cms.PSet(
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            minMass = cms.double(0.3),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            maxMass = cms.string('1.2'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            maxMass = cms.string('1.5'),
            minMass = cms.double(0.8),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        )),
    matchingCone = cms.double(0.5),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(False)
)


process.hpsPFTauDiscriminationByDecayModeFindingOldDMs = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    coneSizeFormula = cms.string('max(min(0.1, 3.0/pt()), 0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        maxMass = cms.string('1.'),
        minMass = cms.double(-1000.0),
        nCharged = cms.uint32(1),
        nChargedPFCandsMin = cms.uint32(1),
        nPiZeros = cms.uint32(0),
        nTracksMin = cms.uint32(1)
    ), 
        cms.PSet(
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            minMass = cms.double(0.3),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            maxMass = cms.string('1.5'),
            minMass = cms.double(0.8),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        )),
    matchingCone = cms.double(0.5),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(True)
)


process.hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw = cms.EDProducer("PFRecoTauDiscriminationByIsolationMVA2",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    loadMVAfromDB = cms.bool(True),
    mvaName = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1'),
    mvaOpt = cms.string('newDMwLT'),
    srcChargedIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationChargedIsoPtSum"),
    srcNeutralIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationNeutralIsoPtSum"),
    srcPUcorrPtSum = cms.InputTag("hpsPFTauMVA3IsolationPUcorrPtSum"),
    srcTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw = cms.EDProducer("PFRecoTauDiscriminationByIsolationMVA2",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    loadMVAfromDB = cms.bool(True),
    mvaName = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1'),
    mvaOpt = cms.string('newDMwoLT'),
    srcChargedIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationChargedIsoPtSum"),
    srcNeutralIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationNeutralIsoPtSum"),
    srcPUcorrPtSum = cms.InputTag("hpsPFTauMVA3IsolationPUcorrPtSum"),
    srcTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw = cms.EDProducer("PFRecoTauDiscriminationByIsolationMVA2",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    loadMVAfromDB = cms.bool(True),
    mvaName = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1'),
    mvaOpt = cms.string('oldDMwLT'),
    srcChargedIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationChargedIsoPtSum"),
    srcNeutralIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationNeutralIsoPtSum"),
    srcPUcorrPtSum = cms.InputTag("hpsPFTauMVA3IsolationPUcorrPtSum"),
    srcTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw = cms.EDProducer("PFRecoTauDiscriminationByIsolationMVA2",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    loadMVAfromDB = cms.bool(True),
    mvaName = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1'),
    mvaOpt = cms.string('oldDMwoLT'),
    srcChargedIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationChargedIsoPtSum"),
    srcNeutralIsoPtSum = cms.InputTag("hpsPFTauMVA3IsolationNeutralIsoPtSum"),
    srcPUcorrPtSum = cms.InputTag("hpsPFTauMVA3IsolationPUcorrPtSum"),
    srcTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_BremCombined = cms.bool(False),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ApplyCut_EcalCrackCut = cms.bool(False),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EmFraction = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    ApplyCut_PFElectronMVA = cms.bool(True),
    BremCombined_Fraction = cms.double(0.99),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Mass = cms.double(0.55),
    BremCombined_StripSize = cms.double(0.03),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    EOverPLead_maxValue = cms.double(1.8),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    EmFraction_maxValue = cms.double(0.9),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    HcalTotOverPLead_minValue = cms.double(0.1),
    PFElectronMVA_maxValue = cms.double(0.6),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    )
)


process.hpsPFTauDiscriminationByLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.0729'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByLooseIsolationMVA3newDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff80'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw")
)


process.hpsPFTauDiscriminationByLooseIsolationMVA3newDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff80'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff80'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw")
)


process.hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff80'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw")
)


process.hpsPFTauDiscriminationByLooseMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    a = cms.double(0.5),
    b = cms.double(0.5),
    c = cms.double(0.0),
    checkNumMatches = cms.bool(False),
    discriminatorOption = cms.string('noSegMatch'),
    maxNumberOfMatches = cms.int32(0)
)


process.hpsPFTauDiscriminationByLooseMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dRmuonMatch = cms.double(0.3),
    dRmuonMatchLimitedToJetArea = cms.bool(False),
    discriminatorOption = cms.string('loose'),
    doCaloMuonVeto = cms.bool(False),
    maskHitsCSC = cms.vint32(0, 0, 0, 0),
    maskHitsDT = cms.vint32(0, 0, 0, 0),
    maskHitsRPC = cms.vint32(0, 0, 0, 0),
    maskMatchesCSC = cms.vint32(1, 0, 0, 0),
    maskMatchesDT = cms.vint32(0, 0, 0, 0),
    maskMatchesRPC = cms.vint32(0, 0, 0, 0),
    maxNumberOfHitsLast2Stations = cms.int32(0),
    maxNumberOfMatches = cms.int32(0),
    minPtMatchedMuon = cms.double(5.0),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByLooseMuonRejection3 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dRmuonMatch = cms.double(0.3),
    dRmuonMatchLimitedToJetArea = cms.bool(False),
    discriminatorOption = cms.string('custom'),
    doCaloMuonVeto = cms.bool(True),
    maskHitsCSC = cms.vint32(0, 0, 0, 0),
    maskHitsDT = cms.vint32(0, 0, 0, 0),
    maskHitsRPC = cms.vint32(0, 0, 0, 0),
    maskMatchesCSC = cms.vint32(1, 0, 0, 0),
    maskMatchesDT = cms.vint32(0, 0, 0, 0),
    maskMatchesRPC = cms.vint32(0, 0, 0, 0),
    maxNumberOfHitsLast2Stations = cms.int32(-1),
    maxNumberOfMatches = cms.int32(1),
    minPtMatchedMuon = cms.double(5.0),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByMVA5LooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff96'),
        variable = cms.string('pt')
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff96'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff96'),
            variable = cms.string('pt')
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection")
)


process.hpsPFTauDiscriminationByMVA5MediumElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff91'),
        variable = cms.string('pt')
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff91'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff91'),
            variable = cms.string('pt')
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection")
)


process.hpsPFTauDiscriminationByMVA5TightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff85'),
        variable = cms.string('pt')
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff85'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff85'),
            variable = cms.string('pt')
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection")
)


process.hpsPFTauDiscriminationByMVA5VLooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff99'),
        variable = cms.string('pt')
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff99'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff99'),
            variable = cms.string('pt')
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection")
)


process.hpsPFTauDiscriminationByMVA5VTightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff79'),
        variable = cms.string('pt')
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff79'),
            variable = cms.string('pt')
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff79'),
            variable = cms.string('pt')
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA5rawElectronRejection")
)


process.hpsPFTauDiscriminationByMVA5rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA5",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    loadMVAfromDB = cms.bool(True),
    method = cms.string('BDTG'),
    minMVANoEleMatchWOgWOgsfBL = cms.double(0.0),
    minMVANoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVANoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVANoEleMatchWOgWgsfEC = cms.double(0.0),
    minMVANoEleMatchWgWOgsfBL = cms.double(0.0),
    minMVANoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVANoEleMatchWgWgsfBL = cms.double(0.0),
    minMVANoEleMatchWgWgsfEC = cms.double(0.0),
    minMVAWOgWOgsfBL = cms.double(0.0),
    minMVAWOgWOgsfEC = cms.double(0.0),
    minMVAWOgWgsfBL = cms.double(0.0),
    minMVAWOgWgsfEC = cms.double(0.0),
    minMVAWgWOgsfBL = cms.double(0.0),
    minMVAWgWOgsfEC = cms.double(0.0),
    minMVAWgWgsfBL = cms.double(0.0),
    minMVAWgWgsfEC = cms.double(0.0),
    mvaName_NoEleMatch_wGwGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL'),
    mvaName_NoEleMatch_wGwGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC'),
    mvaName_NoEleMatch_wGwoGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL'),
    mvaName_NoEleMatch_wGwoGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC'),
    mvaName_NoEleMatch_woGwGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL'),
    mvaName_NoEleMatch_woGwGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC'),
    mvaName_NoEleMatch_woGwoGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL'),
    mvaName_NoEleMatch_woGwoGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC'),
    mvaName_wGwGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL'),
    mvaName_wGwGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC'),
    mvaName_wGwoGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL'),
    mvaName_wGwoGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC'),
    mvaName_woGwGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL'),
    mvaName_woGwGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC'),
    mvaName_woGwoGSF_BL = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL'),
    mvaName_woGwoGSF_EC = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC'),
    returnMVA = cms.bool(True),
    srcGsfElectrons = cms.InputTag("gedGsfElectrons")
)


process.hpsPFTauDiscriminationByMVALooseMuonRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVArawMuonRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_againstMuonMVAv1_WPeff99_5'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_againstMuonMVAv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVArawMuonRejection")
)


process.hpsPFTauDiscriminationByMVAMediumMuonRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVArawMuonRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_againstMuonMVAv1_WPeff99_0'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_againstMuonMVAv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVArawMuonRejection")
)


process.hpsPFTauDiscriminationByMVATightMuonRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByMVArawMuonRejection","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_againstMuonMVAv1_WPeff98_0'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_againstMuonMVAv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVArawMuonRejection")
)


process.hpsPFTauDiscriminationByMVArawMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuonMVA",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    dRmuonMatch = cms.double(0.3),
    loadMVAfromDB = cms.bool(True),
    mvaMin = cms.double(0.0),
    mvaName = cms.string('RecoTauTag_againstMuonMVAv1'),
    returnMVA = cms.bool(True),
    srcMuons = cms.InputTag("muons")
)


process.hpsPFTauDiscriminationByMediumChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_BremCombined = cms.bool(False),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ApplyCut_EcalCrackCut = cms.bool(True),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EmFraction = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    ApplyCut_PFElectronMVA = cms.bool(True),
    BremCombined_Fraction = cms.double(0.99),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Mass = cms.double(0.55),
    BremCombined_StripSize = cms.double(0.03),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    EOverPLead_maxValue = cms.double(1.8),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    EmFraction_maxValue = cms.double(0.9),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    HcalTotOverPLead_minValue = cms.double(0.1),
    PFElectronMVA_maxValue = cms.double(-0.1),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    )
)


process.hpsPFTauDiscriminationByMediumIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.8),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.8),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.2739'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.8),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.8),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByMediumIsolationMVA3newDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff70'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw")
)


process.hpsPFTauDiscriminationByMediumIsolationMVA3newDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff70'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff70'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw")
)


process.hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff70'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw")
)


process.hpsPFTauDiscriminationByMediumMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    a = cms.double(0.5),
    b = cms.double(0.5),
    c = cms.double(0.0),
    checkNumMatches = cms.bool(False),
    discriminatorOption = cms.string('noAllArbitrated'),
    maxNumberOfMatches = cms.int32(0)
)


process.hpsPFTauDiscriminationByMediumMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dRmuonMatch = cms.double(0.3),
    dRmuonMatchLimitedToJetArea = cms.bool(False),
    discriminatorOption = cms.string('medium'),
    doCaloMuonVeto = cms.bool(False),
    maskHitsCSC = cms.vint32(0, 0, 0, 0),
    maskHitsDT = cms.vint32(0, 0, 0, 0),
    maskHitsRPC = cms.vint32(0, 0, 0, 0),
    maskMatchesCSC = cms.vint32(1, 0, 0, 0),
    maskMatchesDT = cms.vint32(0, 0, 0, 0),
    maskMatchesRPC = cms.vint32(0, 0, 0, 0),
    maxNumberOfHitsLast2Stations = cms.int32(0),
    maxNumberOfMatches = cms.int32(0),
    minPtMatchedMuon = cms.double(5.0),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawSumPt = cms.bool(True),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawSumPt = cms.bool(True),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawSumPt = cms.bool(True),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawSumPt = cms.bool(True),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByTightChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_BremCombined = cms.bool(True),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ApplyCut_EcalCrackCut = cms.bool(True),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EmFraction = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    ApplyCut_PFElectronMVA = cms.bool(True),
    BremCombined_Fraction = cms.double(0.99),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Mass = cms.double(0.55),
    BremCombined_StripSize = cms.double(0.03),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    EOverPLead_maxValue = cms.double(1.8),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    EmFraction_maxValue = cms.double(0.9),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    HcalTotOverPLead_minValue = cms.double(0.1),
    PFElectronMVA_maxValue = cms.double(-0.1),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    )
)


process.hpsPFTauDiscriminationByTightIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByTightIsolationMVA3newDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff60'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw")
)


process.hpsPFTauDiscriminationByTightIsolationMVA3newDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff60'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByTightIsolationMVA3oldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff60'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw")
)


process.hpsPFTauDiscriminationByTightIsolationMVA3oldDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff60'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw")
)


process.hpsPFTauDiscriminationByTightMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    a = cms.double(0.5),
    b = cms.double(0.5),
    c = cms.double(0.0),
    checkNumMatches = cms.bool(False),
    discriminatorOption = cms.string('noAllArbitratedWithHOP'),
    maxNumberOfMatches = cms.int32(0)
)


process.hpsPFTauDiscriminationByTightMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dRmuonMatch = cms.double(0.3),
    dRmuonMatchLimitedToJetArea = cms.bool(False),
    discriminatorOption = cms.string('tight'),
    doCaloMuonVeto = cms.bool(False),
    maskHitsCSC = cms.vint32(0, 0, 0, 0),
    maskHitsDT = cms.vint32(0, 0, 0, 0),
    maskHitsRPC = cms.vint32(0, 0, 0, 0),
    maskMatchesCSC = cms.vint32(1, 0, 0, 0),
    maskMatchesDT = cms.vint32(0, 0, 0, 0),
    maskMatchesRPC = cms.vint32(0, 0, 0, 0),
    maxNumberOfHitsLast2Stations = cms.int32(0),
    maxNumberOfMatches = cms.int32(0),
    minPtMatchedMuon = cms.double(5.0),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByTightMuonRejection3 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    HoPMin = cms.double(0.2),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dRmuonMatch = cms.double(0.3),
    dRmuonMatchLimitedToJetArea = cms.bool(False),
    discriminatorOption = cms.string('custom'),
    doCaloMuonVeto = cms.bool(True),
    maskHitsCSC = cms.vint32(0, 0, 0, 0),
    maskHitsDT = cms.vint32(0, 0, 0, 0),
    maskHitsRPC = cms.vint32(0, 0, 0, 0),
    maskMatchesCSC = cms.vint32(1, 0, 0, 0),
    maskMatchesDT = cms.vint32(0, 0, 0, 0),
    maskMatchesRPC = cms.vint32(0, 0, 0, 0),
    maxNumberOfHitsLast2Stations = cms.int32(0),
    maxNumberOfMatches = cms.int32(1),
    minPtMatchedMuon = cms.double(5.0),
    srcMuons = cms.InputTag("muons"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByVLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    customOuterCone = cms.double(0.3),
    deltaBetaFactor = cms.string('0.1647'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(3.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    customOuterCone = cms.double(0.3),
    deltaBetaFactor = cms.string('0.1647'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(3.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByVLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    customOuterCone = cms.double(0.3),
    deltaBetaFactor = cms.string('0.38'),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(2.0),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        ),
        preIso = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(True),
    customOuterCone = cms.double(0.3),
    deltaBetaFactor = cms.string('0.0729'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(2.0),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff90'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw")
)


process.hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff90'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff90'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw")
)


process.hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff90'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw")
)


process.hpsPFTauDiscriminationByVTightIsolationMVA3newDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff50'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw")
)


process.hpsPFTauDiscriminationByVTightIsolationMVA3newDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff50'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff50'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw")
)


process.hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff50'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw")
)


process.hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff40'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw")
)


process.hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff40'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw"),
    verbosity = cms.int32(0)
)


process.hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff40'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw")
)


process.hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwoLT = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    key = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw","category"),
    loadMVAfromDB = cms.bool(True),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff40'),
        variable = cms.string('pt')
    )),
    mvaOutput_normalization = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization'),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw")
)


process.hpsPFTauMVA3IsolationChargedIsoPtSum = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    customOuterCone = cms.double(0.5),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawPUsumPt = cms.bool(False),
    storeRawSumPt = cms.bool(True),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauMVA3IsolationNeutralIsoPtSum = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    customOuterCone = cms.double(0.5),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawPUsumPt = cms.bool(False),
    storeRawSumPt = cms.bool(True),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauMVA3IsolationPUcorrPtSum = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    ApplyDiscriminationByWeightedECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
            cut = cms.double(0.5)
        )
    ),
    UseAllPFCandsForWeights = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyOccupancyCut = cms.bool(False),
    applyRelativeSumPtCut = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    applySumPtCut = cms.bool(False),
    customOuterCone = cms.double(0.5),
    deltaBetaFactor = cms.string('0.4576'),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    relativeSumPtCut = cms.double(0.0),
    relativeSumPtOffset = cms.double(0.0),
    rhoConeSize = cms.double(0.5),
    rhoProducer = cms.InputTag("fixedGridRhoFastjetAll"),
    rhoUEOffsetCorrection = cms.double(1.0),
    storeRawPUsumPt = cms.bool(True),
    storeRawSumPt = cms.bool(False),
    verbosity = cms.int32(0),
    vertexSrc = cms.InputTag("offlinePrimaryVertices")
)


process.hpsPFTauPrimaryVertexProducer = cms.EDProducer("PFTauPrimaryVertexProducer",
    Algorithm = cms.int32(1),
    ElectronTag = cms.InputTag(""),
    MuonTag = cms.InputTag(""),
    PFTauTag = cms.InputTag("hpsPFTauProducer"),
    PVTag = cms.InputTag("offlinePrimaryVertices"),
    RemoveElectronTracks = cms.bool(False),
    RemoveMuonTracks = cms.bool(False),
    TrackCollectionTag = cms.InputTag("generalTracks"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    cut = cms.string('pt > 18.0 & abs(eta) < 2.4'),
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
        selectionCut = cms.double(0.5)
    )),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.2),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.03),
            minGammaEt = cms.double(1.5),
            minTrackHits = cms.uint32(8),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(1.0),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        leadingTrkOrPFCandOption = cms.string('leadPFCand'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        pvFindingAlgo = cms.string('closestInDeltaZ'),
        recoverLeadingTrk = cms.bool(False),
        signalQualityCuts = cms.PSet(
            maxDeltaZ = cms.double(0.4),
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minNeutralHadronEt = cms.double(30.0),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        ),
        vertexTrackFiltering = cms.bool(False),
        vxAssocQualityCuts = cms.PSet(
            maxTrackChi2 = cms.double(100.0),
            maxTransverseImpactParameter = cms.double(0.1),
            minGammaEt = cms.double(0.5),
            minTrackHits = cms.uint32(3),
            minTrackPixelHits = cms.uint32(0),
            minTrackPt = cms.double(0.5),
            minTrackVertexWeight = cms.double(-1.0)
        )
    ),
    useBeamSpot = cms.bool(True),
    useSelectedTaus = cms.bool(False)
)


process.hpsPFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefs")
)


process.hpsPFTauProducerSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        selectionFailValue = cms.double(0),
        selectionPassFunction = cms.string('abs(charge())-1')
    ), 
        cms.PSet(
            name = cms.string('leadStripPtLt2_5'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('signalPiZeroCandidates().size() = 0 | signalPiZeroCandidates()[0].pt() > 2.5'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('0')
        ), 
        cms.PSet(
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin'),
            src = cms.InputTag("hpsSelectionDiscriminator")
        ), 
        cms.PSet(
            name = cms.string('Pt'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadPFCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-pt()'),
            tolerance = cms.double(0.01)
        ), 
        cms.PSet(
            name = cms.string('StripMultiplicity'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadPFCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('-signalPiZeroCandidates().size()')
        ), 
        cms.PSet(
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selection = cms.string('leadPFCand().isNonnull()'),
            selectionFailValue = cms.double(1000.0),
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum() + isolationPFGammaCandsEtSum()')
        )),
    src = cms.InputTag("combinatoricRecoTaus")
)


process.hpsPFTauSecondaryVertexProducer = cms.EDProducer("PFTauSecondaryVertexProducer",
    PFTauTag = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauTransverseImpactParameters = cms.EDProducer("PFTauTransverseImpactParameters",
    PFTauPVATag = cms.InputTag("hpsPFTauPrimaryVertexProducer"),
    PFTauSVATag = cms.InputTag("hpsPFTauSecondaryVertexProducer"),
    PFTauTag = cms.InputTag("hpsPFTauProducer"),
    useFullCalculation = cms.bool(False)
)


process.hpsSelectionDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    coneSizeFormula = cms.string('max(min(0.1, 3.0/pt()), 0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        maxMass = cms.string('1.'),
        minMass = cms.double(-1000.0),
        nCharged = cms.uint32(1),
        nChargedPFCandsMin = cms.uint32(1),
        nPiZeros = cms.uint32(0),
        nTracksMin = cms.uint32(1)
    ), 
        cms.PSet(
            assumeStripMass = cms.double(0.1349),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
            minMass = cms.double(0.3),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            assumeStripMass = cms.double(0.0),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            maxPi0Mass = cms.double(0.2),
            minMass = cms.double(0.4),
            minPi0Mass = cms.double(0.05),
            nCharged = cms.uint32(1),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(2),
            nTracksMin = cms.uint32(1)
        ), 
        cms.PSet(
            maxMass = cms.string('1.2'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
            minMass = cms.double(0.0),
            nCharged = cms.uint32(2),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(1),
            nTracksMin = cms.uint32(2)
        ), 
        cms.PSet(
            maxMass = cms.string('1.5'),
            minMass = cms.double(0.8),
            nCharged = cms.uint32(3),
            nChargedPFCandsMin = cms.uint32(1),
            nPiZeros = cms.uint32(0),
            nTracksMin = cms.uint32(2)
        )),
    matchingCone = cms.double(0.5),
    minTauPt = cms.double(0.0),
    requireTauChargedHadronsToBeChargedPFCands = cms.bool(False)
)


process.hybridSuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollection = cms.string('hybridBarrelBasicClusters'),
    bcCollectionUncleanOnly = cms.string('uncleanOnlyHybridBarrelBasicClusters'),
    cleanBcCollection = cms.InputTag("cleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    cleanScCollection = cms.InputTag("cleanedHybridSuperClusters"),
    scCollection = cms.string(''),
    scCollectionUncleanOnly = cms.string('uncleanOnlyHybridSuperClusters'),
    uncleanBcCollection = cms.InputTag("uncleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    uncleanScCollection = cms.InputTag("uncleanedHybridSuperClusters")
)


process.impactParameterTagInfos = cms.EDProducer("TrackIPProducer",
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jetTracks = cms.InputTag("ak4JetTracksAssociatorAtVertexPF"),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumNumberOfPixelHits = cms.int32(2),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.inOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('ckfInOutTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(True)
)


process.inOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("inOutConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("outInConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.inclusiveCandidateSecondaryVertices = cms.EDProducer("CandidateVertexMerger",
    maxFraction = cms.double(0.2),
    minSignificance = cms.double(10.0),
    secondaryVertices = cms.InputTag("candidateVertexArbitrator")
)


process.inclusiveCandidateVertexFinder = cms.EDProducer("InclusiveCandidateVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        seedMax3DIPSignificance = cms.double(9999.0),
        seedMax3DIPValue = cms.double(9999.0),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(30),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    minHits = cms.uint32(8),
    minPt = cms.double(0.8),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("particleFlow"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(2.5),
    vertexMinDLenSig = cms.double(0.5),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1.0),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.inclusiveSecondaryVertexFinderTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveSecondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.inclusiveSecondaryVertices = cms.EDProducer("VertexMerger",
    maxFraction = cms.double(0.2),
    minSignificance = cms.double(10.0),
    secondaryVertices = cms.InputTag("trackVertexArbitrator")
)


process.inclusiveVertexFinder = cms.EDProducer("InclusiveVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterizer = cms.PSet(
        clusterMaxDistance = cms.double(0.05),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5),
        distanceRatio = cms.double(20),
        seedMax3DIPSignificance = cms.double(9999.0),
        seedMax3DIPValue = cms.double(9999.0),
        seedMin3DIPSignificance = cms.double(1.2),
        seedMin3DIPValue = cms.double(0.005)
    ),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    maxNTracks = cms.uint32(30),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    minHits = cms.uint32(8),
    minPt = cms.double(0.8),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useDirectVertexFitter = cms.bool(True),
    useVertexReco = cms.bool(True),
    vertexMinAngleCosine = cms.double(0.95),
    vertexMinDLen2DSig = cms.double(2.5),
    vertexMinDLenSig = cms.double(0.5),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        primcut = cms.double(1.0),
        seccut = cms.double(3),
        smoothing = cms.bool(True)
    )
)


process.initialStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("initialStepTracks"), cms.InputTag("initialStepTracks"), cms.InputTag("initialStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1),
    indivShareFrac = cms.vdouble(1.0, 1.0, 1.0),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("initialStepSelector","initialStepV1"), cms.InputTag("initialStepSelector","initialStepV2"), cms.InputTag("initialStepSelector","initialStepV3")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2)
    )),
    shareFrac = cms.double(0.99),
    writeOnlyTrkQuals = cms.bool(True)
)


process.initialStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("initialStepSeeds")
)


process.initialStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.initialStepSeedLayersPreSplitting = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.initialStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("initialStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.02),
            precise = cms.bool(True),
            ptMin = cms.double(0.6)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.initialStepSeedsPreSplitting = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClustersPreSplitting"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCachePreSplitting")
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("initialStepSeedLayersPreSplitting")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.02),
            precise = cms.bool(True),
            ptMin = cms.double(0.6)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.initialStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter0_13TeV_v0'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("initialStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('initialStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepTight'),
            preFilterName = cms.string('initialStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepV1'),
            preFilterName = cms.string('initialStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepV2'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 4.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepV3'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.initialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("initialStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.initialStepTrackCandidatesPreSplitting = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEventPreSplitting"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryBuilderPreSplitting')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("initialStepSeedsPreSplitting"),
    useHitsSplitting = cms.bool(True)
)


process.initialStepTrackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("initialStepTracks")
)


process.initialStepTrackRefsForJetsPreSplitting = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("initialStepTracksPreSplitting")
)


process.initialStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("initialStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.initialStepTracksPreSplitting = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEventPreSplitting"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("initialStepTrackCandidatesPreSplitting"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.interestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdEBU = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridBarrelBasicClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdPFEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALBarrel"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdPFEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALEndcap"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdPFES = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowSuperClusterECAL","particleFlowBasicClusterECALPreshower"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(False),
    keepNextToDead = cms.bool(False),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    severityLevel = cms.int32(-1)
)


process.interestingEcalDetIdRefinedEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowEGamma","EBEEClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdRefinedEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowEGamma","EBEEClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.interestingEcalDetIdRefinedES = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("particleFlowEGamma","ESClusters"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(False),
    keepNextToDead = cms.bool(False),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    severityLevel = cms.int32(-1)
)


process.interestingGamIsoDetIdEB = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    emObjectLabel = cms.InputTag("photons"),
    energyCut = cms.double(0.095),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGamIsoDetIdEE = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    emObjectLabel = cms.InputTag("photons"),
    energyCut = cms.double(0.0),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0.11),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.interestingGedEgammaIsoESDetId = cms.EDProducer("EgammaIsoESDetIdCollectionProducer",
    ecalPFClustersLabel = cms.InputTag("particleFlowClusterECALRemade"),
    eeClusToESMapLabel = cms.InputTag("particleFlowClusterECALRemade"),
    elesLabel = cms.InputTag("gedGsfElectrons"),
    interestingDetIdCollection = cms.string(''),
    maxDR = cms.double(0.4),
    minEleEt = cms.double(20),
    minPhoEt = cms.double(20),
    minSCEt = cms.double(500),
    phosLabel = cms.InputTag("gedPhotons"),
    superClustersLabel = cms.InputTag("particleFlowEGamma")
)


process.interestingGedEgammaIsoHCALDetId = cms.EDProducer("EgammaIsoHcalDetIdCollectionProducer",
    elesLabel = cms.InputTag("gedGsfElectrons"),
    interestingDetIdCollection = cms.string(''),
    maxDIEta = cms.int32(5),
    maxDIPhi = cms.int32(5),
    minEleEt = cms.double(20),
    minEnergyHCAL = cms.double(0.8),
    minPhoEt = cms.double(20),
    minSCEt = cms.double(20),
    phosLabel = cms.InputTag("gedPhotons"),
    recHitsLabel = cms.InputTag("hbhereco"),
    superClustersLabel = cms.InputTag("particleFlowEGamma")
)


process.interestingGedEleIsoDetIdEB = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    emObjectLabel = cms.InputTag("gedGsfElectrons"),
    energyCut = cms.double(0.095),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGedEleIsoDetIdEE = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    emObjectLabel = cms.InputTag("gedGsfElectrons"),
    energyCut = cms.double(0.0),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0.11),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.interestingGedGamIsoDetIdEB = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    emObjectLabel = cms.InputTag("gedPhotons"),
    energyCut = cms.double(0.095),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.interestingGedGamIsoDetIdEE = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    emObjectLabel = cms.InputTag("gedPhotons"),
    energyCut = cms.double(0.0),
    etCandCut = cms.double(0.0),
    etCut = cms.double(0.11),
    innerRadius = cms.double(0.0),
    interestingDetIdCollection = cms.string(''),
    outerRadius = cms.double(0.6),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.interestingTrackEcalDetIds = cms.EDProducer("InterestingTrackEcalDetIdProducer",
    MinTrackPt = cms.double(50.0),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackCollection = cms.InputTag("generalTracks")
)


process.jetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.jetCoreRegionalStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        hitErrorRPhi = cms.double(0.0027),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        hitErrorRPhi = cms.double(0.0051),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'BPix3+TIB1', 
        'BPix3+TIB2')
)


process.jetCoreRegionalStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("jetCoreRegionalStepSeedLayers"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
        RegionPSet = cms.PSet(
            JetSrc = cms.InputTag("jetsForCoreTracking"),
            deltaEtaRegion = cms.double(0.2),
            deltaPhiRegion = cms.double(0.2),
            howToUseMeasurementTracker = cms.double(-1.0),
            measurementTrackerName = cms.string('MeasurementTrackerEvent'),
            originHalfLength = cms.double(0.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(10.0),
            vertexSrc = cms.InputTag("firstStepGoodPrimaryVertices")
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(True),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.jetCoreRegionalStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("jetCoreRegionalStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('jetCoreRegionalStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('jetCoreRegionalStepTight'),
            preFilterName = cms.string('jetCoreRegionalStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('jetCoreRegionalStep'),
            preFilterName = cms.string('jetCoreRegionalStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.jetCoreRegionalStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('jetCoreRegionalStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(10000),
    src = cms.InputTag("jetCoreRegionalStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.jetCoreRegionalStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('jetCoreRegionalStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("jetCoreRegionalStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.jetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.l1GtTriggerMenuLite = cms.EDProducer("L1GtTriggerMenuLiteProducer")


process.l1L1GtObjectMap = cms.EDProducer("ConvertObjectMapRecord",
    L1GtObjectMapTag = cms.InputTag("hltL1GtObjectMap")
)


process.l1extraParticles = cms.EDProducer("L1ExtraParticlesProd",
    centralBxOnly = cms.bool(False),
    centralJetSource = cms.InputTag("caloStage1LegacyFormatDigis","cenJets"),
    etHadSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etTotalSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    forwardJetSource = cms.InputTag("caloStage1LegacyFormatDigis","forJets"),
    hfRingBitCountsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    hfRingEtSumsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    htMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    ignoreHtMiss = cms.bool(False),
    isoTauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","isoTauJets"),
    isolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","isoEm"),
    muonSource = cms.InputTag("gtDigis"),
    nonIsolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","nonIsoEm"),
    produceCaloParticles = cms.bool(True),
    produceMuonParticles = cms.bool(True),
    tauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","tauJets")
)


process.logErrorHarvester = cms.EDProducer("LogErrorHarvester")


process.lowPtTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("detachedTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("detachedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("detachedTripletStepTracks")
)


process.lowPtTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.lowPtTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("lowPtTripletStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.02),
            precise = cms.bool(True),
            ptMin = cms.double(0.2)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.lowPtTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter1_13TeV_v0'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("lowPtTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.6),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('lowPtTripletStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtTripletStepTight'),
            preFilterName = cms.string('lowPtTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.55, 4.0),
            d0_par2 = cms.vdouble(0.55, 4.0),
            dz_par1 = cms.vdouble(0.65, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.4),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtTripletStep'),
            preFilterName = cms.string('lowPtTripletStepLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.lowPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('lowPtTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('lowPtTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("lowPtTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("lowPtTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.lowPtTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('lowPtTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("lowPtTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mergedDuplicateDisplacedTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("duplicateDisplacedTrackCandidates","candidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mergedDuplicateTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("duplicateTrackCandidates","candidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mixedTripletStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("mixedTripletStepTracks"), cms.InputTag("mixedTripletStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(0.11, 0.11),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("mixedTripletStepSelector","mixedTripletStepVtx"), cms.InputTag("mixedTripletStepSelector","mixedTripletStepTrk")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    shareFrac = cms.double(0.11),
    writeOnlyTrkQuals = cms.bool(True)
)


process.mixedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("chargeCut2069Clusters"),
    overrideTrkQuals = cms.InputTag("pixelPairStepSelector","pixelPairStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("pixelPairStepTracks")
)


process.mixedTripletStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepSeedClusterMask"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("mixedTripletStepSeeds")
)


process.mixedTripletStepSeedLayersA = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(1),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg')
)


process.mixedTripletStepSeedLayersB = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    layerList = cms.vstring('BPix2+BPix3+TIB1')
)


process.mixedTripletStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("mixedTripletStepSeedsA"), cms.InputTag("mixedTripletStepSeedsB"))
)


process.mixedTripletStepSeedsA = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("mixedTripletStepSeedLayersA")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(15.0),
            originRadius = cms.double(1.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.4)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.mixedTripletStepSeedsB = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("mixedTripletStepSeedLayersB")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(10.0),
            originRadius = cms.double(1.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.6)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.mixedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter4_13TeV_v0'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("mixedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(1.2, 3.0),
        d0_par2 = cms.vdouble(1.3, 3.0),
        dz_par1 = cms.vdouble(1.2, 3.0),
        dz_par2 = cms.vdouble(1.3, 3.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.5),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('mixedTripletStepVtxLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrkLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 3.0),
            d0_par2 = cms.vdouble(1.2, 3.0),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepVtxTight'),
            preFilterName = cms.string('mixedTripletStepVtxLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 4.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrkTight'),
            preFilterName = cms.string('mixedTripletStepTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepVtx'),
            preFilterName = cms.string('mixedTripletStepVtxLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.8, 4.0),
            d0_par2 = cms.vdouble(0.8, 4.0),
            dz_par1 = cms.vdouble(0.8, 4.0),
            dz_par2 = cms.vdouble(0.8, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrk'),
            preFilterName = cms.string('mixedTripletStepTrkLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.mixedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('mixedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("mixedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    src = cms.InputTag("mixedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.mixedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('mixedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("mixedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","ecal"), cms.InputTag("muons1stStep","hcal"), cms.InputTag("muons1stStep","ho"))
)


process.muIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","jets"))
)


process.muIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","tracker"))
)


process.muPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("muons1stStep"),
    trackType = cms.string('candidate')
)


process.muPFIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFMeanDRIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('meanDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositCharged"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositGamma"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositNeutral"),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.3),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muPFSumDRIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        deltaR = cms.double(0.4),
        mode = cms.string('sumDR'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("muPFIsoDepositPU"),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        weight = cms.string('1')
    ))
)


process.muidAllArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('AllArbitrated')
)


process.muidGMStaChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMStaChiCompatibility')
)


process.muidGMTkChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkChiCompatibility')
)


process.muidGMTkKinkTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkKinkTight')
)


process.muidGlobalMuonPromptTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GlobalMuonPromptTight')
)


process.muidRPCMuLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('RPCMuLoose')
)


process.muidTM2DCompatibilityLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityLoose')
)


process.muidTM2DCompatibilityTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityTight')
)


process.muidTMLastStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngLoose')
)


process.muidTMLastStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngTight')
)


process.muidTMLastStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationLoose')
)


process.muidTMLastStationOptimizedLowPtLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtLoose')
)


process.muidTMLastStationOptimizedLowPtTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtTight')
)


process.muidTMLastStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationTight')
)


process.muidTMOneStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngLoose')
)


process.muidTMOneStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngTight')
)


process.muidTMOneStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationLoose')
)


process.muidTMOneStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationTight')
)


process.muidTrackerMuonArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TrackerMuonArbitrated')
)


process.multi5x5BasicClustersCleaned = cms.EDProducer("Multi5x5ClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    barrelHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    doBarrel = cms.bool(False),
    doEndcap = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    endcapHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    reassignSeedCrysToClusterItSeeds = cms.bool(True)
)


process.multi5x5BasicClustersUncleaned = cms.EDProducer("Multi5x5ClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    RecHitFlagToBeExcluded = cms.vstring(),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    barrelHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    doBarrel = cms.bool(False),
    doEndcap = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    endcapHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    reassignSeedCrysToClusterItSeeds = cms.bool(True)
)


process.multi5x5PreshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    PreshowerClusterShapeCollectionX = cms.string('multi5x5PreshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('multi5x5PreshowerYClustersShape'),
    debugLevel = cms.string('INFO'),
    endcapSClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    preshPi0Nstrip = cms.int32(5),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshStripEnergyCut = cms.double(0.0)
)


process.multi5x5SuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollection = cms.string('multi5x5EndcapBasicClusters'),
    bcCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapBasicClusters'),
    cleanBcCollection = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    cleanScCollection = cms.InputTag("multi5x5SuperClustersCleaned","multi5x5EndcapSuperClusters"),
    scCollection = cms.string('multi5x5EndcapSuperClusters'),
    scCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapSuperClusters'),
    uncleanBcCollection = cms.InputTag("multi5x5BasicClustersUncleaned","multi5x5EndcapBasicClusters"),
    uncleanScCollection = cms.InputTag("multi5x5SuperClustersUncleaned","multi5x5EndcapSuperClusters")
)


process.multi5x5SuperClustersCleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelClusterTag = cms.InputTag("multi5x5BasicClusters","multi5x5BarrelBasicClustersCleaned"),
    barrelEtaSearchRoad = cms.double(0.06),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryMin = cms.int32(2),
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            b = cms.double(108.8),
            c = cms.double(0.1201)
        )
    ),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterTag = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.multi5x5SuperClustersUncleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelClusterTag = cms.InputTag("multi5x5BasicClusters","multi5x5BarrelBasicClustersCleaned"),
    barrelEtaSearchRoad = cms.double(0.06),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryMin = cms.int32(2),
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            b = cms.double(108.8),
            c = cms.double(0.1201)
        )
    ),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterProducer = cms.string('multi5x5BasicClustersUncleaned'),
    endcapClusterTag = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.multi5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esPhiClusterDeltaPhi = cms.double(0.12),
    esStripEnergyCut = cms.double(0.0),
    etThresh = cms.double(0.0),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.muonCSCDigis = cms.EDProducer("CSCDCCUnpacker",
    Debug = cms.untracked.bool(False),
    ErrorMask = cms.uint32(0),
    ExaminerMask = cms.uint32(535557110),
    FormatedEventDump = cms.untracked.bool(False),
    InputObjects = cms.InputTag("rawDataCollector"),
    PrintEventNumber = cms.untracked.bool(False),
    SuppressZeroLCT = cms.untracked.bool(True),
    UnpackStatusDigis = cms.bool(False),
    UseExaminer = cms.bool(True),
    UseFormatStatus = cms.bool(True),
    UseSelectiveUnpacking = cms.bool(True),
    VisualFEDInspect = cms.untracked.bool(False),
    VisualFEDShort = cms.untracked.bool(False),
    runDQM = cms.untracked.bool(False)
)


process.muonDTDigis = cms.EDProducer("DTUnpackingModule",
    dataType = cms.string('DDU'),
    dqmOnly = cms.bool(False),
    inputLabel = cms.InputTag("rawDataCollector"),
    maxFEDid = cms.untracked.int32(779),
    minFEDid = cms.untracked.int32(770),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        localDAQ = cms.untracked.bool(False),
        performDataIntegrityMonitor = cms.untracked.bool(False),
        rosParameters = cms.PSet(
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False),
            performDataIntegrityMonitor = cms.untracked.bool(False),
            readDDUIDfromDDU = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            writeSC = cms.untracked.bool(True)
        )
    ),
    useStandardFEDid = cms.bool(True)
)


process.muonEcalDetIds = cms.EDProducer("InterestingEcalDetIdProducer",
    inputCollection = cms.InputTag("muons1stStep")
)


process.muonMETValueMapProducer = cms.EDProducer("MuonMETValueMapProducer",
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    isAlsoTkMu = cms.bool(True),
    maxEta = cms.double(2.5),
    maxNormChi2 = cms.double(10.0),
    maxd0 = cms.double(0.2),
    minPt = cms.double(10.0),
    minnHits = cms.int32(11),
    minnValidStaHits = cms.int32(1),
    muonInputTag = cms.InputTag("muons"),
    towerEtThreshold = cms.double(0.3),
    useHO = cms.bool(False),
    useRecHits = cms.bool(False),
    useTrackAssociatorPositions = cms.bool(True)
)


process.muonRPCDigis = cms.EDProducer("RPCUnpackingModule",
    InputLabel = cms.InputTag("rawDataCollector"),
    doSynchro = cms.bool(True)
)


process.muonSeededSeedsInOut = cms.EDProducer("MuonReSeeder",
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RefitDirection = cms.string('alongMomentum'),
    RefitRPCHits = cms.bool(True),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    cut = cms.string('pt > 2'),
    debug = cms.untracked.bool(False),
    insideOut = cms.bool(True),
    layersToKeep = cms.int32(5),
    src = cms.InputTag("earlyMuons")
)


process.muonSeededSeedsOutIn = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(True),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("earlyMuons"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.muonSeededSeedsOutInDisplaced = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(False),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("earlyDisplacedMuons"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.muonSeededTrackCandidatesInOut = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForInOut')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("muonSeededSeedsInOut"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesOutIn = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForOutIn')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    src = cms.InputTag("muonSeededSeedsOutIn"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesOutInDisplaced = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForOutInDisplaced')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    src = cms.InputTag("muonSeededSeedsOutInDisplaced"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTracksInOut = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepInOut'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesInOut"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksInOutSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksInOut"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(10.0),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(7),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(3),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(5),
        nSigmaZ = cms.double(4.0),
        name = cms.string('muonSeededTracksInOutLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksInOutTight'),
            preFilterName = cms.string('muonSeededTracksInOutLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksInOutHighPurity'),
            preFilterName = cms.string('muonSeededTracksInOutTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksOutIn = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepOutIn'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesOutIn"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksOutInDisplaced = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepOutIn'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesOutInDisplaced"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksOutInDisplacedSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksOutInDisplaced"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(10.0),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(7),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(3),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(5),
        nSigmaZ = cms.double(4.0),
        name = cms.string('muonSeededTracksOutInDisplacedLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInDisplacedTight'),
            preFilterName = cms.string('muonSeededTracksOutInDisplacedLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInDisplacedHighPurity'),
            preFilterName = cms.string('muonSeededTracksOutInDisplacedTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksOutInSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksOutIn"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(10.0),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(7),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(3),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(5),
        nSigmaZ = cms.double(4.0),
        name = cms.string('muonSeededTracksOutInLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInTight'),
            preFilterName = cms.string('muonSeededTracksOutInLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInHighPurity'),
            preFilterName = cms.string('muonSeededTracksOutInTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonShowerInformation = cms.EDProducer("MuonShowerInformationProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    ShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    ),
    muonCollection = cms.InputTag("muons1stStep"),
    trackCollection = cms.InputTag("generalTracks")
)


process.muons = cms.EDProducer("MuonProducer",
    ActivateDebug = cms.untracked.bool(False),
    CosmicIdMap = cms.InputTag("cosmicsVeto"),
    EcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    FillCosmicsIdMap = cms.bool(True),
    FillDetectorBasedIsolation = cms.bool(True),
    FillPFIsolation = cms.bool(True),
    FillPFMomentumAndAssociation = cms.bool(True),
    FillSelectorMaps = cms.bool(True),
    FillShoweringInfo = cms.bool(True),
    FillTimingInfo = cms.bool(True),
    HcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    HoIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    InputMuons = cms.InputTag("muons1stStep"),
    JetIsoDeposits = cms.InputTag("muIsoDepositJets"),
    PFCandidates = cms.InputTag("particleFlowTmp"),
    PFIsolation = cms.PSet(
        pfIsoMeanDRProfileR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU03")
        ),
        pfIsoMeanDRProfileR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU04")
        ),
        pfIsoSumDRProfileR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFSumDRIsoValuePU03")
        ),
        pfIsoSumDRProfileR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFSumDRIsoValuePU04")
        ),
        pfIsolationR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFIsoValuePU03")
        ),
        pfIsolationR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFIsoValuePU04")
        )
    ),
    SelectorMaps = cms.VInputTag(cms.InputTag("muidTMLastStationOptimizedLowPtLoose"), cms.InputTag("muidTMLastStationOptimizedLowPtTight"), cms.InputTag("muidTM2DCompatibilityLoose"), cms.InputTag("muidTM2DCompatibilityTight"), cms.InputTag("muidTrackerMuonArbitrated"), 
        cms.InputTag("muidTMLastStationAngLoose"), cms.InputTag("muidGlobalMuonPromptTight"), cms.InputTag("muidGMStaChiCompatibility"), cms.InputTag("muidTMLastStationAngTight"), cms.InputTag("muidGMTkChiCompatibility"), 
        cms.InputTag("muidTMOneStationAngTight"), cms.InputTag("muidTMOneStationAngLoose"), cms.InputTag("muidTMLastStationLoose"), cms.InputTag("muidTMLastStationTight"), cms.InputTag("muidTMOneStationTight"), 
        cms.InputTag("muidTMOneStationLoose"), cms.InputTag("muidAllArbitrated"), cms.InputTag("muidGMTkKinkTight"), cms.InputTag("muidRPCMuLoose")),
    ShowerInfoMap = cms.InputTag("muonShowerInformation"),
    TrackIsoDeposits = cms.InputTag("muIsoDepositTk")
)


process.muons1stStep = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("globalMuons"), cms.InputTag("standAloneMuons","UpdatedAtVtx"), cms.InputTag("tevMuons","firstHit"), cms.InputTag("tevMuons","picky"), 
        cms.InputTag("tevMuons","dyt")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsFromCosmics = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("cosmicMuons")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("cosmicMuons"),
    inputCollectionTypes = cms.vstring('outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsFromCosmics1Leg = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("cosmicMuons1Leg")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("cosmicMuons1Leg"),
    inputCollectionTypes = cms.vstring('outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.newCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("initialStepSeeds"), cms.InputTag("pixelPairStepSeeds"), cms.InputTag("mixedTripletStepSeeds"), cms.InputTag("pixelLessStepSeeds"), cms.InputTag("tripletElectronSeeds"), 
        cms.InputTag("pixelPairElectronSeeds"), cms.InputTag("stripPairElectronSeeds"))
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotProducer")


process.offlinePrimaryVertices = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.03),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices")
)


process.offlinePrimaryVerticesWithBS = cms.EDProducer("RecoChargedRefCandidatePrimaryVertexSorter",
    assignment = cms.PSet(
        maxDistanceToJetAxis = cms.double(0.07),
        maxDxyForJetAxisAssigment = cms.double(0.1),
        maxDxyForNotReconstructedPrimary = cms.double(0.01),
        maxDxySigForNotReconstructedPrimary = cms.double(2),
        maxDzForJetAxisAssigment = cms.double(0.1),
        maxDzForPrimaryAssignment = cms.double(0.03),
        maxDzSigForPrimaryAssignment = cms.double(5.0),
        maxJetDeltaR = cms.double(0.5),
        minJetPt = cms.double(25)
    ),
    jets = cms.InputTag("ak4CaloJetsForTrk"),
    particles = cms.InputTag("trackRefsForJetsBeforeSorting"),
    produceAssociationToOriginalVertices = cms.bool(False),
    produceNoPileUpCollection = cms.bool(False),
    producePileUpCollection = cms.bool(False),
    produceSortedVertices = cms.bool(True),
    qualityForPrimary = cms.int32(3),
    sorting = cms.PSet(

    ),
    usePVMET = cms.bool(True),
    vertices = cms.InputTag("unsortedOfflinePrimaryVertices","WithBS")
)


process.outInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('ckfOutInTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(True)
)


process.particleBasedIsolation = cms.EDProducer("ParticleBasedIsoProducer",
    electronProducer = cms.InputTag("gedGsfElectrons"),
    electronTmpProducer = cms.InputTag("gedGsfElectronsTmp"),
    pfBlockBasedIsolationSetUp = cms.PSet(
        ComponentName = cms.string('pfBlockBasedIsolation'),
        coneSize = cms.double(9999999999)
    ),
    pfCandidates = cms.InputTag("particleFlow"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonProducer = cms.InputTag("gedPhotons"),
    photonTmpProducer = cms.InputTag("gedPhotonsTmp"),
    valueMapElePFblockIso = cms.string('gedGsfElectrons'),
    valueMapEleToEG = cms.string(''),
    valueMapPhoPFblockIso = cms.string('gedPhotons'),
    valueMapPhoToEG = cms.string('valMapPFEgammaCandToPhoton')
)


process.particleFlow = cms.EDProducer("PFLinker",
    FillMuonRefs = cms.bool(True),
    GsfElectrons = cms.InputTag("gedGsfElectrons"),
    Muons = cms.InputTag("muons","muons1stStep2muonsMap"),
    OutputPF = cms.string(''),
    PFCandidate = cms.VInputTag(cms.InputTag("particleFlowTmp")),
    Photons = cms.InputTag("gedPhotons"),
    ProducePFCandidates = cms.bool(True),
    ValueMapElectrons = cms.string('electrons'),
    ValueMapMerged = cms.string('all'),
    ValueMapPhotons = cms.string('photons')
)


process.particleFlowBlock = cms.EDProducer("PFBlockProducer",
    debug = cms.untracked.bool(False),
    elementImporters = cms.VPSet(cms.PSet(
        gsfsAreSecondary = cms.bool(False),
        importerName = cms.string('GSFTrackImporter'),
        source = cms.InputTag("pfTrackElec"),
        superClustersArePF = cms.bool(True)
    ), 
        cms.PSet(
            importerName = cms.string('ConvBremTrackImporter'),
            source = cms.InputTag("pfTrackElec")
        ), 
        cms.PSet(
            importerName = cms.string('SuperClusterImporter'),
            maximumHoverE = cms.double(0.5),
            minPTforBypass = cms.double(100.0),
            minSuperClusterPt = cms.double(10.0),
            source_eb = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
            source_ee = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
            source_towers = cms.InputTag("towerMaker"),
            superClustersArePF = cms.bool(True)
        ), 
        cms.PSet(
            importerName = cms.string('ConversionTrackImporter'),
            source = cms.InputTag("pfConversions")
        ), 
        cms.PSet(
            importerName = cms.string('NuclearInteractionTrackImporter'),
            source = cms.InputTag("pfDisplacedTrackerVertex")
        ), 
        cms.PSet(
            DPtOverPtCuts_byTrackAlgo = cms.vdouble(-1.0, -1.0, -1.0, 1.0, 1.0),
            NHitCuts_byTrackAlgo = cms.vuint32(3, 3, 3, 3, 3),
            cleanBadConvertedBrems = cms.bool(True),
            importerName = cms.string('GeneralTracksImporter'),
            muonSrc = cms.InputTag("muons1stStep"),
            source = cms.InputTag("pfTrack"),
            useIterativeTracking = cms.bool(True)
        ), 
        cms.PSet(
            BCtoPFCMap = cms.InputTag("particleFlowSuperClusterECAL","PFClusterAssociationEBEE"),
            importerName = cms.string('ECALClusterImporter'),
            source = cms.InputTag("particleFlowClusterECAL")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHCAL")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHO")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHF")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterPS")
        )),
    linkDefinitions = cms.VPSet(cms.PSet(
        linkType = cms.string('PS1:ECAL'),
        linkerName = cms.string('PreshowerAndECALLinker'),
        useKDTree = cms.bool(True)
    ), 
        cms.PSet(
            linkType = cms.string('PS2:ECAL'),
            linkerName = cms.string('PreshowerAndECALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:ECAL'),
            linkerName = cms.string('TrackAndECALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HCAL'),
            linkerName = cms.string('TrackAndHCALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HO'),
            linkerName = cms.string('TrackAndHOLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:HCAL'),
            linkerName = cms.string('ECALAndHCALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HCAL:HO'),
            linkerName = cms.string('HCALAndHOLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HFEM:HFHAD'),
            linkerName = cms.string('HFEMAndHFHADLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:TRACK'),
            linkerName = cms.string('TrackAndTrackLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:ECAL'),
            linkerName = cms.string('ECALAndECALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:ECAL'),
            linkerName = cms.string('GSFAndECALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:GSF'),
            linkerName = cms.string('TrackAndGSFLinker'),
            useConvertedBrems = cms.bool(True),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:BREM'),
            linkerName = cms.string('GSFAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:GSF'),
            linkerName = cms.string('GSFAndGSFLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:BREM'),
            linkerName = cms.string('ECALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:HCAL'),
            linkerName = cms.string('GSFAndHCALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HCAL:BREM'),
            linkerName = cms.string('HCALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            SuperClusterMatchByRef = cms.bool(True),
            linkType = cms.string('SC:ECAL'),
            linkerName = cms.string('SCAndECALLinker'),
            useKDTree = cms.bool(False)
        )),
    verbose = cms.untracked.bool(False)
)


process.particleFlowClusterECAL = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        algoName = cms.string('PFClusterEMEnergyCorrector'),
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        recHitsEBLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    inputECAL = cms.InputTag("particleFlowClusterECALUncorrected"),
    inputPS = cms.InputTag("particleFlowClusterPS"),
    minimumPSEnergy = cms.double(0.0)
)


process.particleFlowClusterECALUncorrected = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_BARREL'),
            gatheringThreshold = cms.double(0.08),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_BARREL'),
            recHitEnergyNorm = cms.double(0.08)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(cms.PSet(
        algoName = cms.string('SpikeAndDoubleSpikeCleaner'),
        cleaningByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_BARREL'),
            doubleSpikeS6S2 = cms.double(0.04),
            doubleSpikeThresh = cms.double(10.0),
            energyThresholdModifier = cms.double(2.0),
            fractionThresholdModifier = cms.double(3.0),
            minS4S1_a = cms.double(0.04),
            minS4S1_b = cms.double(-0.024),
            singleSpikeThresh = cms.double(4.0)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                doubleSpikeS6S2 = cms.double(-1.0),
                doubleSpikeThresh = cms.double(1000000000.0),
                energyThresholdModifier = cms.double(2.0),
                fractionThresholdModifier = cms.double(3.0),
                minS4S1_a = cms.double(0.02),
                minS4S1_b = cms.double(-0.0125),
                singleSpikeThresh = cms.double(15.0)
            ))
    )),
    recHitsSource = cms.InputTag("particleFlowRecHitECAL"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_ENDCAP'),
            seedingThreshold = cms.double(0.6),
            seedingThresholdPt = cms.double(0.15)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.23),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterHBHE = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL1'),
            gatheringThreshold = cms.double(0.8),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_ENDCAP'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        clusterTimeResFromSeed = cms.bool(False),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        maxNSigmaTime = cms.double(10.0),
        minChi2Prob = cms.double(0.0),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL1'),
            recHitEnergyNorm = cms.double(0.8)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.8)
            )),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08),
        timeResolutionCalcBarrel = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeResolutionCalcEndcap = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeSigmaEB = cms.double(10.0),
        timeSigmaEE = cms.double(10.0)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHBHE"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL1'),
            seedingThreshold = cms.double(1.0),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_ENDCAP'),
                seedingThreshold = cms.double(1.1),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterHCAL = cms.EDProducer("PFMultiDepthClusterProducer",
    clustersSource = cms.InputTag("particleFlowClusterHBHE"),
    energyCorrector = cms.PSet(

    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('PFMultiDepthClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        minFractionToKeep = cms.double(1e-07),
        nSigmaEta = cms.double(2.0),
        nSigmaPhi = cms.double(2.0)
    ),
    positionReCalc = cms.PSet(

    )
)


process.particleFlowClusterHF = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            gatheringThreshold = cms.double(0.8),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            recHitEnergyNorm = cms.double(0.8)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                recHitEnergyNorm = cms.double(0.8)
            )),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(cms.PSet(
        algoName = cms.string('SpikeAndDoubleSpikeCleaner'),
        cleaningByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            doubleSpikeS6S2 = cms.double(-1.0),
            doubleSpikeThresh = cms.double(1000000000.0),
            energyThresholdModifier = cms.double(1.0),
            fractionThresholdModifier = cms.double(1.0),
            minS4S1_a = cms.double(0.11),
            minS4S1_b = cms.double(-0.19),
            singleSpikeThresh = cms.double(80.0)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                doubleSpikeS6S2 = cms.double(-1.0),
                doubleSpikeThresh = cms.double(1000000000.0),
                energyThresholdModifier = cms.double(1.0),
                fractionThresholdModifier = cms.double(1.0),
                minS4S1_a = cms.double(0.045),
                minS4S1_b = cms.double(-0.08),
                singleSpikeThresh = cms.double(120.0)
            ))
    )),
    recHitsSource = cms.InputTag("particleFlowRecHitHF"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(0),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            seedingThreshold = cms.double(1.4),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                seedingThreshold = cms.double(1.4),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterHO = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL2_RING0'),
            gatheringThreshold = cms.double(0.05),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                gatheringThreshold = cms.double(0.05),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL2_RING0'),
            recHitEnergyNorm = cms.double(0.05)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                recHitEnergyNorm = cms.double(0.05)
            )),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHO"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL2_RING0'),
            seedingThreshold = cms.double(0.08),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                seedingThreshold = cms.double(0.08),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterPS = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('PS1'),
            gatheringThreshold = cms.double(6e-05),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('PS2'),
                gatheringThreshold = cms.double(6e-05),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(6e-05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('PS1'),
            recHitEnergyNorm = cms.double(6e-05)
        ), 
            cms.PSet(
                detector = cms.string('PS2'),
                recHitEnergyNorm = cms.double(6e-05)
            )),
        showerSigma = cms.double(0.3),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitPS"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('PS1'),
            seedingThreshold = cms.double(0.00012),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('PS2'),
                seedingThreshold = cms.double(0.00012),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    avfParameters = cms.PSet(
        Tini = cms.double(256.0),
        ratio = cms.double(0.25),
        sigmacut = cms.double(6.0)
    ),
    debug = cms.untracked.bool(False),
    longSize = cms.double(5),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    minAdaptWeight = cms.double(0.5),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    primaryVertexCut = cms.double(2.5),
    switchOff2TrackVertex = cms.untracked.bool(True),
    tecCut = cms.double(220),
    tobCut = cms.double(100),
    tracksSelectorParameters = cms.PSet(
        bSelectTracks = cms.bool(True),
        dxy_min = cms.double(0.2),
        nChi2_max = cms.double(5.0),
        nChi2_min = cms.double(0.5),
        nHits_min = cms.int32(6),
        nOuterHits_max = cms.int32(9),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    transvSize = cms.double(1.0),
    verbose = cms.untracked.bool(False),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    vertexIdentifierParameters = cms.PSet(
        angles = cms.vdouble(15, 15),
        bIdentifyVertices = cms.bool(True),
        logPrimSec_min = cms.double(0.0),
        looper_eta_max = cms.double(0.1),
        masses = cms.vdouble(0.05, 0.485, 0.515, 0.48, 0.52, 
            1.107, 1.125, 0.2),
        pt_kink_min = cms.double(3.0),
        pt_min = cms.double(0.5)
    )
)


process.particleFlowDisplacedVertexCandidate = cms.EDProducer("PFDisplacedVertexCandidateProducer",
    dcaCut = cms.double(0.5),
    dcaPInnerHitCut = cms.double(1000.0),
    debug = cms.untracked.bool(False),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    primaryVertexCut = cms.double(2.2),
    trackCollection = cms.InputTag("generalTracks"),
    tracksSelectorParameters = cms.PSet(
        dxy = cms.double(0.2),
        nChi2_max = cms.double(5.0),
        pt_min = cms.double(0.2),
        pt_min_prim = cms.double(0.8)
    ),
    verbose = cms.untracked.bool(False)
)


process.particleFlowEGamma = cms.EDProducer("PFEGammaProducer",
    EEtoPS_source = cms.InputTag("particleFlowClusterECAL"),
    X0_Map = cms.string('RecoParticleFlow/PFProducer/data/allX0histos.root'),
    algoType = cms.uint32(0),
    blocks = cms.InputTag("particleFlowBlock"),
    calibHF_a_EMHAD = cms.vdouble(1.42215, 1.00496, 0.68961, 0.81656, 0.98504, 
        0.98504, 1.00802, 1.0593, 1.4576, 1.4576),
    calibHF_a_EMonly = cms.vdouble(0.96945, 0.96701, 0.76309, 0.82268, 0.87583, 
        0.89718, 0.98674, 1.4681, 1.458, 1.458),
    calibHF_b_EMHAD = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_b_HADonly = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_eta_step = cms.vdouble(0.0, 2.9, 3.0, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4),
    calibHF_use = cms.bool(False),
    calibPFSCEle_Fbrem_barrel = cms.vdouble(0.6, 6, -0.0255975, 0.0576727, 0.975442, 
        -0.000546394, 1.26147, 25, -0.02025, 0.04537, 
        0.9728, -0.0008962, 1.172),
    calibPFSCEle_Fbrem_endcap = cms.vdouble(0.9, 6.5, -0.0692932, 0.101776, 0.995338, 
        -0.00236548, 0.874998, 1.653, -0.0750184, 0.147, 
        0.923165, 0.000474665, 1.10782),
    calibPFSCEle_barrel = cms.vdouble(1.004, -1.536, 22.88, -1.467, 0.3555, 
        0.6227, 14.65, 2051, 25, 0.9932, 
        -0.5444, 0, 0.5438, 0.7109, 7.645, 
        0.2904, 0),
    calibPFSCEle_endcap = cms.vdouble(1.153, -16.5975, 5.668, -0.1772, 16.22, 
        7.326, 0.0483, -4.068, 9.406),
    cleanedHF = cms.VInputTag(cms.InputTag("particleFlowRecHitHCAL","Cleaned"), cms.InputTag("particleFlowClusterHF","Cleaned")),
    coneEcalIsoForEgammaSC = cms.double(0.3),
    coneTrackIsoForEgammaSC = cms.double(0.3),
    cosmicRejectionDistance = cms.double(1.0),
    debug = cms.untracked.bool(True),
    dptRel_DispVtx = cms.double(10.0),
    dzPV = cms.double(0.2),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    eventFactorForCosmics = cms.double(10.0),
    eventFractionForCleaning = cms.double(0.5),
    eventFractionForRejection = cms.double(0.8),
    factors_45 = cms.vdouble(10.0, 100.0),
    iCfgCandConnector = cms.PSet(
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5.0),
        dptRel_PrimaryTrack = cms.double(10.0),
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1.0)
    ),
    maxDPtOPt = cms.double(1.0),
    maxDeltaPhiPt = cms.double(7.0),
    maxSignificance = cms.double(2.5),
    metFactorForCleaning = cms.double(4.0),
    metFactorForFakes = cms.double(4.0),
    metFactorForHighEta = cms.double(25.0),
    metFactorForRejection = cms.double(4.0),
    metSignificanceForCleaning = cms.double(3.0),
    metSignificanceForRejection = cms.double(4.0),
    minDeltaMet = cms.double(0.4),
    minEnergyForPunchThrough = cms.double(100.0),
    minHFCleaningPt = cms.double(5.0),
    minMomentumForPunchThrough = cms.double(100.0),
    minPixelHits = cms.int32(1),
    minPtForPostCleaning = cms.double(20.0),
    minSignificance = cms.double(2.5),
    minSignificanceReduction = cms.double(1.4),
    minTrackerHits = cms.int32(8),
    muon_ECAL = cms.vdouble(0.5, 0.5),
    muon_HCAL = cms.vdouble(3.0, 3.0),
    muon_HO = cms.vdouble(0.9, 0.9),
    muons = cms.InputTag("muons1stStep"),
    nTrackIsoForEgammaSC = cms.uint32(2),
    nsigma_TRACK = cms.double(1.0),
    pf_GlobC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFGlobalCorr_14Dec2011.root'),
    pf_Res_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFRes_14Dec2011.root'),
    pf_convID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_pfConversionAug0411.txt'),
    pf_conv_mvaCut = cms.double(0.0),
    pf_electronID_crackCorrection = cms.bool(False),
    pf_electronID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_PfElectrons23Jan_IntToFloat.txt'),
    pf_electron_mvaCut = cms.double(-0.1),
    pf_electron_output_col = cms.string('electrons'),
    pf_locC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFClusterLCorr_14Dec2011.root'),
    pf_nsigma_ECAL = cms.double(0.0),
    pf_nsigma_HCAL = cms.double(1.0),
    postHFCleaning = cms.bool(False),
    postMuonCleaning = cms.bool(True),
    produceEGCandsWithNoSuperCluster = cms.bool(False),
    ptErrorScale = cms.double(8.0),
    ptFactorForHighEta = cms.double(2.0),
    pt_Error = cms.double(1.0),
    punchThroughFactor = cms.double(3.0),
    punchThroughMETFactor = cms.double(4.0),
    rejectTracks_Bad = cms.bool(True),
    rejectTracks_Step45 = cms.bool(True),
    sumEtEcalIsoForEgammaSC_barrel = cms.double(1.0),
    sumEtEcalIsoForEgammaSC_endcap = cms.double(2.0),
    sumPtTrackIsoForEgammaSC_barrel = cms.double(4.0),
    sumPtTrackIsoForEgammaSC_endcap = cms.double(4.0),
    sumPtTrackIsoForPhoton = cms.double(2.0),
    sumPtTrackIsoSlopeForPhoton = cms.double(0.001),
    trackQuality = cms.string('highPurity'),
    useCalibrationsFromDB = cms.bool(True),
    useEGammaElectrons = cms.bool(True),
    useEGammaSupercluster = cms.bool(True),
    useHO = cms.bool(True),
    usePFConversions = cms.bool(True),
    usePFDecays = cms.bool(False),
    usePFElectrons = cms.bool(True),
    usePFNuclearInteractions = cms.bool(True),
    usePFPhotons = cms.bool(True),
    usePFSCEleCalib = cms.bool(True),
    usePhotonReg = cms.bool(False),
    useRegressionFromDB = cms.bool(True),
    useVerticesForNeutral = cms.bool(True),
    verbose = cms.untracked.bool(True),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.particleFlowForChargedMET = cms.EDProducer("ParticleFlowForChargedMETProducer",
    PFCollectionLabel = cms.InputTag("particleFlow"),
    PVCollectionLabel = cms.InputTag("offlinePrimaryVertices"),
    dzCut = cms.double(0.2),
    neutralEtThreshold = cms.double(-1.0)
)


process.particleFlowPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlow")
)


process.particleFlowRecHitECAL = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFEBRecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestThreshold'),
            threshold = cms.double(0.08)
        ), 
            cms.PSet(
                cleaningThreshold = cms.double(2.0),
                name = cms.string('PFRecHitQTestECAL'),
                skipTTRecoveredHits = cms.bool(True),
                timingCleaning = cms.bool(True),
                topologicalCleaning = cms.bool(True)
            )),
        src = cms.InputTag("ecalRecHit","EcalRecHitsEB")
    ), 
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestThreshold'),
                threshold = cms.double(0.3)
            ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )),
            src = cms.InputTag("ecalRecHit","EcalRecHitsEE")
        ))
)


process.particleFlowRecHitHBHE = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitHCALNavigator'),
        sigmaCut = cms.double(4.0),
        timeResolutionCalc = cms.PSet(
            constantTerm = cms.double(1.92),
            constantTermLowE = cms.double(6.0),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(8.64),
            noiseTermLowE = cms.double(0.0),
            threshHighE = cms.double(8.0),
            threshLowE = cms.double(2.0)
        )
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHBHERecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestThreshold'),
            threshold = cms.double(0.8)
        ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )),
        src = cms.InputTag("hbhereco")
    ))
)


process.particleFlowRecHitHF = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitHCALNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        EMDepthCorrection = cms.double(22.0),
        HADDepthCorrection = cms.double(25.0),
        HFCalib29 = cms.double(1.07),
        LongFibre_Cut = cms.double(120.0),
        LongFibre_Fraction = cms.double(0.1),
        ShortFibre_Cut = cms.double(60.0),
        ShortFibre_Fraction = cms.double(0.01),
        name = cms.string('PFHFRecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            cleaningThresholds = cms.vdouble(0.0, 120.0, 60.0),
            flags = cms.vstring('Standard', 
                'HFLong', 
                'HFShort'),
            maxSeverities = cms.vint32(11, 9, 9),
            name = cms.string('PFRecHitQTestHCALChannel')
        ), 
            cms.PSet(
                cuts = cms.VPSet(cms.PSet(
                    depth = cms.int32(1),
                    threshold = cms.double(1.2)
                ), 
                    cms.PSet(
                        depth = cms.int32(2),
                        threshold = cms.double(1.8)
                    )),
                name = cms.string('PFRecHitQTestHCALThresholdVsDepth')
            )),
        src = cms.InputTag("hfreco"),
        thresh_HF = cms.double(0.4)
    ))
)


process.particleFlowRecHitHO = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitHCALNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHORecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestThreshold'),
            threshold = cms.double(0.05)
        ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )),
        src = cms.InputTag("horeco")
    ))
)


process.particleFlowRecHitPS = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitPreshowerNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFPSRecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestThreshold'),
            threshold = cms.double(7e-06)
        )),
        src = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
    ))
)


process.particleFlowSuperClusterECAL = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    doSatelliteClusterMerge = cms.bool(False),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v1'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v1'),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50.0),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.0),
    thresh_PFClusterES = cms.double(0.0),
    thresh_PFClusterEndcap = cms.double(0.0),
    thresh_PFClusterSeedBarrel = cms.double(1.0),
    thresh_PFClusterSeedEndcap = cms.double(1.0),
    thresh_SCEt = cms.double(4.0),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowTmp = cms.EDProducer("PFProducer",
    GedElectronValueMap = cms.InputTag("gedGsfElectronsTmp"),
    GedPhotonValueMap = cms.InputTag("gedPhotonsTmp","valMapPFEgammaCandToPhoton"),
    PFEGammaCandidates = cms.InputTag("particleFlowEGamma"),
    X0_Map = cms.string('RecoParticleFlow/PFProducer/data/allX0histos.root'),
    algoType = cms.uint32(0),
    blocks = cms.InputTag("particleFlowBlock"),
    calibHF_a_EMHAD = cms.vdouble(1.42215, 1.00496, 0.68961, 0.81656, 0.98504, 
        0.98504, 1.00802, 1.0593, 1.4576, 1.4576),
    calibHF_a_EMonly = cms.vdouble(0.96945, 0.96701, 0.76309, 0.82268, 0.87583, 
        0.89718, 0.98674, 1.4681, 1.458, 1.458),
    calibHF_b_EMHAD = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_b_HADonly = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_eta_step = cms.vdouble(0.0, 2.9, 3.0, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4),
    calibHF_use = cms.bool(False),
    calibPFSCEle_Fbrem_barrel = cms.vdouble(0.6, 6, -0.0255975, 0.0576727, 0.975442, 
        -0.000546394, 1.26147, 25, -0.02025, 0.04537, 
        0.9728, -0.0008962, 1.172),
    calibPFSCEle_Fbrem_endcap = cms.vdouble(0.9, 6.5, -0.0692932, 0.101776, 0.995338, 
        -0.00236548, 0.874998, 1.653, -0.0750184, 0.147, 
        0.923165, 0.000474665, 1.10782),
    calibPFSCEle_barrel = cms.vdouble(1.004, -1.536, 22.88, -1.467, 0.3555, 
        0.6227, 14.65, 2051, 25, 0.9932, 
        -0.5444, 0, 0.5438, 0.7109, 7.645, 
        0.2904, 0),
    calibPFSCEle_endcap = cms.vdouble(1.153, -16.5975, 5.668, -0.1772, 16.22, 
        7.326, 0.0483, -4.068, 9.406),
    cleanedHF = cms.VInputTag(cms.InputTag("particleFlowRecHitHF","Cleaned"), cms.InputTag("particleFlowClusterHF","Cleaned")),
    coneEcalIsoForEgammaSC = cms.double(0.3),
    coneTrackIsoForEgammaSC = cms.double(0.3),
    cosmicRejectionDistance = cms.double(1.0),
    debug = cms.untracked.bool(False),
    dptRel_DispVtx = cms.double(10.0),
    dzPV = cms.double(0.2),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    electron_iso_combIso_barrel = cms.double(10.0),
    electron_iso_combIso_endcap = cms.double(10.0),
    electron_iso_mva_barrel = cms.double(-0.1875),
    electron_iso_mva_endcap = cms.double(-0.1075),
    electron_iso_pt = cms.double(10.0),
    electron_missinghits = cms.uint32(1),
    electron_noniso_mvaCut = cms.double(-0.1),
    electron_protectionsForJetMET = cms.PSet(
        maxDPhiIN = cms.double(0.1),
        maxE = cms.double(50.0),
        maxEcalEOverPRes = cms.double(0.2),
        maxEcalEOverP_1 = cms.double(0.5),
        maxEcalEOverP_2 = cms.double(0.2),
        maxEeleOverPout = cms.double(0.2),
        maxEeleOverPoutRes = cms.double(0.5),
        maxEleHcalEOverEcalE = cms.double(0.1),
        maxHcalE = cms.double(10.0),
        maxHcalEOverEcalE = cms.double(0.1),
        maxHcalEOverP = cms.double(1.0),
        maxNtracks = cms.double(3.0),
        maxTrackPOverEele = cms.double(1.0)
    ),
    eventFactorForCosmics = cms.double(10.0),
    eventFractionForCleaning = cms.double(0.5),
    eventFractionForRejection = cms.double(0.8),
    factors_45 = cms.vdouble(10.0, 100.0),
    iCfgCandConnector = cms.PSet(
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5.0),
        dptRel_PrimaryTrack = cms.double(10.0),
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1.0)
    ),
    isolatedElectronID_mvaWeightFile = cms.string('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    maxDPtOPt = cms.double(1.0),
    maxDeltaPhiPt = cms.double(7.0),
    maxSignificance = cms.double(2.5),
    metFactorForCleaning = cms.double(4.0),
    metFactorForFakes = cms.double(4.0),
    metFactorForHighEta = cms.double(25.0),
    metFactorForRejection = cms.double(4.0),
    metSignificanceForCleaning = cms.double(3.0),
    metSignificanceForRejection = cms.double(4.0),
    minDeltaMet = cms.double(0.4),
    minEnergyForPunchThrough = cms.double(100.0),
    minHFCleaningPt = cms.double(5.0),
    minMomentumForPunchThrough = cms.double(100.0),
    minPixelHits = cms.int32(1),
    minPtForPostCleaning = cms.double(20.0),
    minSignificance = cms.double(2.5),
    minSignificanceReduction = cms.double(1.4),
    minTrackerHits = cms.int32(8),
    muon_ECAL = cms.vdouble(0.5, 0.5),
    muon_HCAL = cms.vdouble(3.0, 3.0),
    muon_HO = cms.vdouble(0.9, 0.9),
    muons = cms.InputTag("muons1stStep"),
    nTrackIsoForEgammaSC = cms.uint32(2),
    nsigma_TRACK = cms.double(1.0),
    pf_GlobC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFGlobalCorr_14Dec2011.root'),
    pf_Res_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFRes_14Dec2011.root'),
    pf_convID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_pfConversionAug0411.txt'),
    pf_conv_mvaCut = cms.double(0.0),
    pf_electronID_crackCorrection = cms.bool(False),
    pf_electronID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_PfElectrons23Jan_IntToFloat.txt'),
    pf_electron_mvaCut = cms.double(-0.1),
    pf_electron_output_col = cms.string('electrons'),
    pf_locC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFClusterLCorr_14Dec2011.root'),
    pf_nsigma_ECAL = cms.double(0.0),
    pf_nsigma_HCAL = cms.double(1.0),
    photon_HoE = cms.double(0.05),
    photon_MinEt = cms.double(10.0),
    photon_SigmaiEtaiEta_barrel = cms.double(0.0125),
    photon_SigmaiEtaiEta_endcap = cms.double(0.034),
    photon_combIso = cms.double(10.0),
    photon_protectionsForJetMET = cms.PSet(
        sumPtTrackIso = cms.double(4.0),
        sumPtTrackIsoSlope = cms.double(0.001)
    ),
    postHFCleaning = cms.bool(False),
    postMuonCleaning = cms.bool(True),
    ptErrorScale = cms.double(8.0),
    ptFactorForHighEta = cms.double(2.0),
    pt_Error = cms.double(1.0),
    punchThroughFactor = cms.double(3.0),
    punchThroughMETFactor = cms.double(4.0),
    rejectTracks_Bad = cms.bool(True),
    rejectTracks_Step45 = cms.bool(True),
    sumEtEcalIsoForEgammaSC_barrel = cms.double(1.0),
    sumEtEcalIsoForEgammaSC_endcap = cms.double(2.0),
    sumPtTrackIsoForEgammaSC_barrel = cms.double(4.0),
    sumPtTrackIsoForEgammaSC_endcap = cms.double(4.0),
    sumPtTrackIsoForPhoton = cms.double(2.0),
    sumPtTrackIsoSlopeForPhoton = cms.double(0.001),
    trackQuality = cms.string('highPurity'),
    useCalibrationsFromDB = cms.bool(True),
    useEGammaElectrons = cms.bool(True),
    useEGammaFilters = cms.bool(True),
    useEGammaSupercluster = cms.bool(True),
    useHO = cms.bool(True),
    usePFConversions = cms.bool(True),
    usePFDecays = cms.bool(False),
    usePFElectrons = cms.bool(False),
    usePFNuclearInteractions = cms.bool(True),
    usePFPhotons = cms.bool(False),
    usePFSCEleCalib = cms.bool(True),
    usePhotonReg = cms.bool(False),
    useProtectionsForJetMET = cms.bool(True),
    useRegressionFromDB = cms.bool(True),
    useVerticesForNeutral = cms.bool(True),
    verbose = cms.untracked.bool(False),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.particleFlowTmpPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlowTmp")
)


process.pfChMet = cms.EDProducer("PFMETProducer",
    alias = cms.string('pfChMet'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.0),
    src = cms.InputTag("particleFlowForChargedMET")
)


process.pfCombinedInclusiveSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"))
)


process.pfCombinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedMVAComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfCombinedSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedSecondaryVertexComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfCombinedSecondaryVertexSoftLeptonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedSecondaryVertexSoftLeptonComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.pfCombinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateCombinedSecondaryVertexV2Computer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"), cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfConversions = cms.EDProducer("PFConversionProducer",
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    conversionCollection = cms.InputTag("allConversions")
)


process.pfDisplacedTrackerVertex = cms.EDProducer("PFDisplacedTrackerVertexProducer",
    displacedTrackerVertexColl = cms.InputTag("particleFlowDisplacedVertex"),
    trackColl = cms.InputTag("generalTracks")
)


process.pfImpactParameterTagInfos = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("particleFlow"),
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("ak4PFJetsCHS"),
    maxDeltaR = cms.double(0.4),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumNumberOfPixelHits = cms.int32(2),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.pfInclusiveSecondaryVertexFinderTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("inclusiveCandidateSecondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfJetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateJetBProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfJetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateJetProbabilityComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfMet = cms.EDProducer("PFMETProducer",
    alias = cms.string('pfMet'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.0),
    src = cms.InputTag("particleFlow")
)


process.pfNoPileUp = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUp"),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIso = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUpIso"),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpJME = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUpJME"),
    verbose = cms.untracked.bool(False)
)


process.pfPileUp = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    Vertices = cms.InputTag("offlinePrimaryVertices"),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.pfPileUpIso = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    Vertices = cms.InputTag("offlinePrimaryVertices"),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.pfPileUpJME = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowPtrs"),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices"),
    checkClosestZVertex = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.pfRecoTauTagInfoProducer = cms.EDProducer("PFRecoTauTagInfoProducer",
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFCandidateProducer = cms.InputTag("particleFlow"),
    PFJetTracksAssociatorProducer = cms.InputTag("ak4PFJetTracksAssociatorAtVertex"),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    UsePVconstraint = cms.bool(True),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    tkPVmaxDZ = cms.double(0.2),
    tkmaxChi2 = cms.double(100.0),
    tkmaxipt = cms.double(0.03),
    tkminPixelHitsn = cms.int32(0),
    tkminPt = cms.double(0.5),
    tkminTrackerHitsn = cms.int32(3)
)


process.pfSecondaryVertexTagInfos = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.pfSimpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfSimpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateSimpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfSecondaryVertexTagInfos"))
)


process.pfTrack = cms.EDProducer("PFTrackProducer",
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    GsfTracksInEvents = cms.bool(True),
    MuColl = cms.InputTag("muons1stStep"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    TrackQuality = cms.string('highPurity'),
    TrajInEvents = cms.bool(False),
    UseQuality = cms.bool(True)
)


process.pfTrackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateTrackCounting3D2ndComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfTrackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('candidateTrackCounting3D3rdComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("pfImpactParameterTagInfos"))
)


process.pfTrackElec = cms.EDProducer("PFElecTkProducer",
    AbsEtaBarrelEndcapsSeparation = cms.double(1.479),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    MaxConvBremRecoPT = cms.double(49.0),
    MinDEtaGsfSC = cms.double(0.06),
    MinDPhiGsfSC = cms.double(0.15),
    MinSCEnergy = cms.double(4.0),
    ModeMomentum = cms.bool(True),
    PFConversions = cms.InputTag("pfConversions"),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PFRecTrackLabel = cms.InputTag("pfTrack"),
    PFV0 = cms.InputTag("pfV0"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    Propagator = cms.string('fwdElectronPropagator'),
    PtLowHighSeparation = cms.double(20),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajInEvents = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    applyEGSelection = cms.bool(False),
    applyGsfTrackCleaning = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    pf_convBremFinderID_mvaCutBarrelHighPt = cms.double(0.97),
    pf_convBremFinderID_mvaCutBarrelLowPt = cms.double(0.6),
    pf_convBremFinderID_mvaCutEndcapsHighPt = cms.double(0.995),
    pf_convBremFinderID_mvaCutEndcapsLowPt = cms.double(0.9),
    pf_convBremFinderID_mvaWeightFileBarrelHighPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileBarrelLowPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsHighPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetagt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsLowPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetagt1_479_BDT.weights.xml'),
    useConvBremFinder = cms.bool(True),
    useConversions = cms.bool(False),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    useNuclear = cms.bool(False),
    useV0 = cms.bool(False)
)


process.pfV0 = cms.EDProducer("PFV0Producer",
    V0List = cms.VInputTag(cms.InputTag("generalV0Candidates","Kshort"), cms.InputTag("generalV0Candidates","Lambda"))
)


process.photonConvTrajSeedFromSingleLeg = cms.EDProducer("PhotonConversionTrajectorySeedProducerFromSingleLeg",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    DoxcheckSeedCandidates = cms.bool(False),
    OrderedHitsFactoryPSet = cms.PSet(
        SeedingLayers = cms.InputTag("convLayerPairs"),
        maxElement = cms.uint32(40000),
        maxHitPairsPerTrackAndGenerator = cms.uint32(10)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(12.0),
            originRadius = cms.double(3.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.2)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedForPhotonConversion1Leg'),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TrackRefitter = cms.InputTag("generalTracks"),
    applyTkVtxConstraint = cms.bool(True),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    maxDZSigmas = cms.double(10.0),
    maxNumSelVtx = cms.uint32(2),
    newSeedCandidates = cms.string('convSeedCandidates'),
    primaryVerticesTag = cms.InputTag("firstStepPrimaryVertices"),
    vtxMinDoF = cms.double(4),
    xcheckSeedCandidates = cms.string('xcheckSeedCandidates')
)


process.photonCore = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag(""),
    minSCEt = cms.double(10.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower")
)


process.photonEcalPFClusterIsolationProducer = cms.EDProducer("PhotonEcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedPhotons"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducer = cms.InputTag("particleFlowClusterECAL")
)


process.photonHcalPFClusterIsolationProducer = cms.EDProducer("PhotonHcalPFClusterIsolationProducer",
    candidateProducer = cms.InputTag("gedPhotons"),
    drMax = cms.double(0.3),
    drVetoBarrel = cms.double(0),
    drVetoEndcap = cms.double(0),
    energyBarrel = cms.double(0),
    energyEndcap = cms.double(0),
    etaStripBarrel = cms.double(0),
    etaStripEndcap = cms.double(0),
    pfClusterProducerHCAL = cms.InputTag("particleFlowClusterHCAL"),
    useHF = cms.bool(False)
)


process.photons = cms.EDProducer("PhotonProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    photonCoreProducer = cms.InputTag("photonCore"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True)
)


process.pixelLessStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(20.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("pixelLessStepTracks"), cms.InputTag("pixelLessStepTracks"), cms.InputTag("pixelLessStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1),
    indivShareFrac = cms.vdouble(0.11, 0.11, 0.11),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("pixelLessStepSelector","pixelLessStep"), cms.InputTag("pixelLessStepSelector","pixelLessStepVtx"), cms.InputTag("pixelLessStepSelector","pixelLessStepTrk")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2)
    )),
    shareFrac = cms.double(0.11),
    writeOnlyTrkQuals = cms.bool(True)
)


process.pixelLessStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("mixedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("mixedTripletStepTracks")
)


process.pixelLessStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepSeedClusterMask"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("pixelLessStepSeeds")
)


process.pixelLessStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    MTEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    MTIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters")
    ),
    MTID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TIB1+TIB2+MTIB3', 
        'TIB1+TIB2+MTID1_pos', 
        'TIB1+TIB2+MTID1_neg', 
        'TID1_pos+TID2_pos+TID3_pos', 
        'TID1_neg+TID2_neg+TID3_neg', 
        'TID1_pos+TID2_pos+MTID3_pos', 
        'TID1_neg+TID2_neg+MTID3_neg', 
        'TID1_pos+TID2_pos+MTEC1_pos', 
        'TID1_neg+TID2_neg+MTEC1_neg', 
        'TID2_pos+TID3_pos+TEC1_pos', 
        'TID2_neg+TID3_neg+TEC1_neg', 
        'TID2_pos+TID3_pos+MTEC1_pos', 
        'TID2_neg+TID3_neg+MTEC1_neg', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC1_pos+TEC2_pos+MTEC3_pos', 
        'TEC1_neg+TEC2_neg+MTEC3_neg', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TEC1_pos+TEC2_pos+MTEC4_pos', 
        'TEC1_neg+TEC2_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC2_pos+TEC3_pos+MTEC4_pos', 
        'TEC2_neg+TEC3_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC2_pos+TEC3_pos+TEC6_pos', 
        'TEC2_neg+TEC3_neg+TEC6_neg', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC3_pos+TEC4_pos+MTEC5_pos', 
        'TEC3_neg+TEC4_neg+MTEC5_neg', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC4_neg+TEC5_neg+TEC6_neg')
)


process.pixelLessStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardMultiHitGenerator'),
        GeneratorPSet = cms.PSet(
            ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
            ComponentName = cms.string('MultiHitGeneratorFromChi2'),
            TTRHBuilder = cms.string('WithTrackAngle'),
            chi2VsPtCut = cms.bool(True),
            chi2_cuts = cms.vdouble(3.0, 4.0, 5.0, 5.0),
            debug = cms.bool(False),
            detIdsToDebug = cms.vint32(0, 0, 0),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            extraPhiKDBox = cms.double(0.005),
            extraRKDBox = cms.double(0.2),
            extraZKDBox = cms.double(0.2),
            fnSigmaRZ = cms.double(2.0),
            maxChi2 = cms.double(5.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            pt_interv = cms.vdouble(0.4, 0.7, 1.0, 2.0),
            refitHits = cms.bool(True),
            useFixedPreFiltering = cms.bool(False)
        ),
        SeedingLayers = cms.InputTag("pixelLessStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(12.0),
            originRadius = cms.double(1.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.4)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(cms.PSet(
            ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
            ClusterShapeHitFilterName = cms.string('pixelLessStepClusterShapeHitFilter'),
            ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
            FilterAtHelixStage = cms.bool(True),
            FilterPixelHits = cms.bool(False),
            FilterStripHits = cms.bool(True)
        ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )),
        mode = cms.string('and')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.pixelLessStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter5_13TeV_v0'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("pixelLessStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(1.2, 4.0),
        d0_par2 = cms.vdouble(1.2, 4.0),
        dz_par1 = cms.vdouble(1.2, 4.0),
        dz_par2 = cms.vdouble(1.2, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(0.4),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('pixelLessStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.9, 4.0),
            d0_par2 = cms.vdouble(0.9, 4.0),
            dz_par1 = cms.vdouble(0.9, 4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStepTight'),
            preFilterName = cms.string('pixelLessStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.7, 4.0),
            d0_par2 = cms.vdouble(0.7, 4.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            dz_par2 = cms.vdouble(0.7, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.4),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStep'),
            preFilterName = cms.string('pixelLessStepLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStepVtx'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.8, 4.0),
            d0_par2 = cms.vdouble(0.8, 4.0),
            dz_par1 = cms.vdouble(0.8, 4.0),
            dz_par2 = cms.vdouble(0.8, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStepTrk'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelLessStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('pixelLessStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("pixelLessStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    src = cms.InputTag("pixelLessStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.pixelLessStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('pixelLessStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("pixelLessStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.pixelPairElectronSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask")
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg')
)


process.pixelPairElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("pixelPairElectronSeedLayers"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.03),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.015),
            precise = cms.bool(True),
            ptMin = cms.double(1.0),
            sigmaZVertex = cms.double(3.0),
            useFakeVertices = cms.bool(False),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.pixelPairStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("lowPtTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("lowPtTripletStepTracks")
)


process.pixelPairStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    oldClusterRemovalInfo = cms.InputTag("initialStepSeedClusterMask"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("pixelPairStepSeeds")
)


process.pixelPairStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelPairStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelPairStepClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg')
)


process.pixelPairStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("pixelPairStepSeedLayers"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.03),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.015),
            precise = cms.bool(True),
            ptMin = cms.double(0.6),
            sigmaZVertex = cms.double(3.0),
            useFakeVertices = cms.bool(False),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.pixelPairStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter2_13TeV_v0'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("pixelPairStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('pixelPairStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelPairStepTight'),
            preFilterName = cms.string('pixelPairStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelPairStep'),
            preFilterName = cms.string('pixelPairStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelPairStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("pixelPairStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("pixelPairStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.pixelPairStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('pixelPairStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("pixelPairStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.preDuplicateMergingDisplacedTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(100.0),
    LostHitPenalty = cms.double(1.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("muonSeededTracksInOut"), cms.InputTag("muonSeededTracksOutInDisplaced")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(1.0, 0.19, 0.16, 0.19, 0.13, 
        0.11, 0.11, 0.09),
    makeReKeyedSeeds = cms.untracked.bool(False),
    mvaValueTags = cms.VInputTag(cms.InputTag("muonSeededTracksInOutSelector","MVAVals"), cms.InputTag("muonSeededTracksOutInDisplacedSelector","MVAVals")),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksOutInDisplacedSelector","muonSeededTracksOutInDisplacedHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(1, 2)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.preDuplicateMergingGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(100.0),
    LostHitPenalty = cms.double(1.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("muonSeededTracksInOut"), cms.InputTag("muonSeededTracksOutIn")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(0, 1, 1),
    indivShareFrac = cms.vdouble(1.0, 0.19, 0.16, 0.19, 0.13, 
        0.11, 0.11, 0.09),
    makeReKeyedSeeds = cms.untracked.bool(False),
    mvaValueTags = cms.VInputTag(cms.InputTag("earlyGeneralTracks","MVAVals"), cms.InputTag("muonSeededTracksInOutSelector","MVAVals"), cms.InputTag("muonSeededTracksOutInSelector","MVAVals")),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksOutInSelector","muonSeededTracksOutInHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1, 2)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.recoTauAK4PFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    deltaR = cms.double(0.8),
    pfCandAssocMapSrc = cms.InputTag(""),
    pfCandSrc = cms.InputTag("particleFlow"),
    src = cms.InputTag("ak4PFJets")
)


process.reducedEcalRecHitsEB = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEB"), cms.InputTag("interestingEcalDetIdEBU"), cms.InputTag("interestingEcalDetIdPFEB"), cms.InputTag("interestingEcalDetIdRefinedEB"), cms.InputTag("interestingGedEleIsoDetIdEB"), 
        cms.InputTag("interestingGedGamIsoDetIdEB"), cms.InputTag("interestingGamIsoDetIdEB"), cms.InputTag("muonEcalDetIds"), cms.InputTag("interestingTrackEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsEE = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEE"), cms.InputTag("interestingEcalDetIdPFEE"), cms.InputTag("interestingEcalDetIdRefinedEE"), cms.InputTag("interestingGedEleIsoDetIdEE"), cms.InputTag("interestingGedGamIsoDetIdEE"), 
        cms.InputTag("interestingGamIsoDetIdEE"), cms.InputTag("muonEcalDetIds"), cms.InputTag("interestingTrackEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsES = cms.EDProducer("ReducedESRecHitCollectionProducer",
    EcalRecHitCollectionES = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    EndcapSuperClusterCollection = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    OutputLabel_ES = cms.string(''),
    interestingDetIds = cms.VInputTag(cms.InputTag("interestingEcalDetIdPFES"), cms.InputTag("interestingEcalDetIdRefinedES")),
    interestingDetIdsNotToClean = cms.VInputTag(cms.InputTag("interestingGedEgammaIsoESDetId")),
    scEtThreshold = cms.double(15)
)


process.reducedHcalRecHits = cms.EDProducer("HcalHitSelection",
    hbheTag = cms.InputTag("hbhereco"),
    hfTag = cms.InputTag("hfreco"),
    hoSeverityLevel = cms.int32(13),
    hoTag = cms.InputTag("horeco"),
    interestingDetIds = cms.VInputTag(cms.InputTag("interestingGedEgammaIsoHCALDetId"))
)


process.refittedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(True),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("muonRPCDigis")
)


process.scalersRawToDigi = cms.EDProducer("ScalersRawToDigi",
    scalersInputTag = cms.InputTag("rawDataCollector")
)


process.secondaryVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("secondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(False),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)


process.selectDigi = cms.EDProducer("EcalDigiSelector",
    EcalEBDigiTag = cms.InputTag("ecalDigis","ebDigis"),
    EcalEBRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EcalEEDigiTag = cms.InputTag("ecalDigis","eeDigis"),
    EcalEERecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    barrelSuperClusterProducer = cms.InputTag("uncleanedHybridSuperClusters"),
    cluster_pt_thresh = cms.double(10.0),
    endcapSuperClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    nclus_sel = cms.int32(2),
    selectedEcalEBDigiCollection = cms.string('selectedEcalEBDigiCollection'),
    selectedEcalEEDigiCollection = cms.string('selectedEcalEEDigiCollection'),
    single_cluster_thresh = cms.double(15.0)
)


process.siPixelClusterShapeCache = cms.EDProducer("SiPixelClusterShapeCacheProducer",
    onDemand = cms.bool(False),
    src = cms.InputTag("siPixelClusters")
)


process.siPixelClusterShapeCachePreSplitting = cms.EDProducer("SiPixelClusterShapeCacheProducer",
    onDemand = cms.bool(False),
    src = cms.InputTag("siPixelClustersPreSplitting")
)


process.siPixelClusters = cms.EDProducer("JetCoreClusterSplitter",
    centralMIPCharge = cms.double(26000),
    chargeFractionMin = cms.double(2.0),
    chargePerUnit = cms.double(2000),
    cores = cms.InputTag("jetsForCoreTrackingPreSplitting"),
    deltaRmax = cms.double(0.05),
    forceXError = cms.double(100),
    forceYError = cms.double(150),
    fractionalWidth = cms.double(0.4),
    pixelCPE = cms.string('PixelCPEGeneric'),
    pixelClusters = cms.InputTag("siPixelClustersPreSplitting"),
    ptMin = cms.double(200),
    verbose = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVerticesPreSplitting")
)


process.siPixelClustersPreSplitting = cms.EDProducer("SiPixelClusterProducer",
    ChannelThreshold = cms.int32(1000),
    ClusterThreshold = cms.double(4000.0),
    MissCalibrate = cms.untracked.bool(True),
    SeedThreshold = cms.int32(1000),
    SplitClusters = cms.bool(False),
    VCaltoElectronGain = cms.int32(65),
    VCaltoElectronOffset = cms.int32(-414),
    maxNumberOfClusters = cms.int32(-1),
    payloadType = cms.string('Offline'),
    src = cms.InputTag("siPixelDigis")
)


process.siPixelDigis = cms.EDProducer("SiPixelRawToDigi",
    ErrorList = cms.vint32(29),
    IncludeErrors = cms.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    Regions = cms.PSet(

    ),
    Timing = cms.untracked.bool(False),
    UsePhase1 = cms.bool(False),
    UsePilotBlade = cms.bool(False),
    UseQualityInfo = cms.bool(False),
    UserErrorList = cms.vint32(40)
)


process.siPixelRecHits = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClusters")
)


process.siPixelRecHitsPreSplitting = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClustersPreSplitting")
)


process.siStripClusters = cms.EDProducer("SiStripClusterizer",
    Clusterizer = cms.PSet(
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        ChannelThreshold = cms.double(2.0),
        ClusterThreshold = cms.double(5.0),
        MaxAdjacentBad = cms.uint32(0),
        MaxSequentialBad = cms.uint32(1),
        MaxSequentialHoles = cms.uint32(0),
        QualityLabel = cms.string(''),
        RemoveApvShots = cms.bool(True),
        SeedThreshold = cms.double(3.0),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode"))
)


process.siStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    AppendedBytes = cms.int32(0),
    DoAPVEmulatorCheck = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False),
    ErrorThreshold = cms.uint32(7174),
    MarkModulesOnMissingFeds = cms.bool(True),
    ProductLabel = cms.InputTag("rawDataCollector"),
    TriggerFedId = cms.int32(0),
    UnpackBadChannels = cms.bool(False),
    UnpackCommonModeValues = cms.bool(False),
    UseDaqRegister = cms.bool(False),
    UseFedKey = cms.bool(False)
)


process.siStripMatchedRecHits = cms.EDProducer("SiStripRecHitConverter",
    ClusterProducer = cms.InputTag("siStripClusters"),
    MaskBadAPVFibers = cms.bool(False),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    VerbosityLevel = cms.untracked.int32(1),
    matchedRecHits = cms.string('matchedRecHit'),
    rphiRecHits = cms.string('rphiRecHit'),
    siStripQualityLabel = cms.ESInputTag(""),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False)
)


process.siStripZeroSuppression = cms.EDProducer("SiStripZeroSuppression",
    Algorithms = cms.PSet(
        APVInspectMode = cms.string('BaselineFollower'),
        APVRestoreMode = cms.string('BaselineFollower'),
        ApplyBaselineCleaner = cms.bool(True),
        ApplyBaselineRejection = cms.bool(True),
        CleaningSequence = cms.uint32(1),
        CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
        CutToAvoidSignal = cms.double(2.0),
        DeltaCMThreshold = cms.uint32(20),
        Deviation = cms.uint32(25),
        ForceNoRestore = cms.bool(False),
        Fraction = cms.double(0.2),
        Iterations = cms.int32(3),
        MeanCM = cms.int32(0),
        PedestalSubtractionFedMode = cms.bool(False),
        SelfSelectRestoreAlgo = cms.bool(False),
        SiStripFedZeroSuppressionMode = cms.uint32(4),
        TruncateInSuppressor = cms.bool(True),
        consecThreshold = cms.uint32(5),
        distortionThreshold = cms.uint32(20),
        doAPVRestore = cms.bool(True),
        filteredBaselineDerivativeSumSquare = cms.double(30),
        filteredBaselineMax = cms.double(6),
        hitStripThreshold = cms.uint32(40),
        minStripsToFit = cms.uint32(4),
        nSaturatedStrip = cms.uint32(2),
        nSigmaNoiseDerTh = cms.uint32(4),
        nSmooth = cms.uint32(9),
        restoreThreshold = cms.double(0.5),
        slopeX = cms.int32(3),
        slopeY = cms.int32(4),
        useCMMeanMap = cms.bool(False),
        useRealMeanCM = cms.bool(False)
    ),
    DigisToMergeVR = cms.InputTag("siStripVRDigis","VirginRaw"),
    DigisToMergeZS = cms.InputTag("siStripDigis","ZeroSuppressed"),
    RawDigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","VirginRaw"), cms.InputTag("siStripDigis","ProcessedRaw"), cms.InputTag("siStripDigis","ScopeMode")),
    fixCM = cms.bool(False),
    mergeCollections = cms.bool(False),
    produceBaselinePoints = cms.bool(False),
    produceCalculatedBaseline = cms.bool(False),
    produceRawDigis = cms.bool(True),
    storeCM = cms.bool(True),
    storeInZScollBadAPV = cms.bool(True)
)


process.simpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3TrkComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.softPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronsTagInfos = cms.EDProducer("SoftPFElectronTagInfoProducer",
    DeltaRElectronJet = cms.double(0.4),
    MaxSip3D = cms.double(200),
    electrons = cms.InputTag("gedGsfElectrons"),
    jets = cms.InputTag("ak4PFJetsCHS"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.softPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonsTagInfos = cms.EDProducer("SoftPFMuonTagInfoProducer",
    filterIp = cms.double(4.0),
    filterPromptMuons = cms.bool(False),
    filterRatio1 = cms.double(0.4),
    filterRatio2 = cms.double(0.7),
    jets = cms.InputTag("ak4PFJetsCHS"),
    muonPt = cms.double(2.0),
    muonSIP = cms.double(200.0),
    muons = cms.InputTag("muons"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.standAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.standAloneSETMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("SETMuonSeed"),
    MuonTrajectoryBuilder = cms.string('DirectMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(1.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.stripPairElectronSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("tripletElectronClusterMask")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TIB1+TIB2', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TID2_pos+TID3_pos', 
        'TID2_neg+TID3_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_pos+TEC5_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_neg+TEC5_neg')
)


process.stripPairElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("stripPairElectronSeedLayers"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(12.0),
            originRadius = cms.double(0.4),
            precise = cms.bool(True),
            ptMin = cms.double(1.0)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.tcdsDigis = cms.EDProducer("TcdsRawToDigi",
    InputLabel = cms.InputTag("rawDataCollector")
)


process.tevMuons = cms.EDProducer("TevMuonProducer",
    MuonCollectionLabel = cms.InputTag("globalMuons"),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    Refits = cms.vstring('default', 
        'firstHit', 
        'picky', 
        'dyt'),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.tobTecStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepClusters"),
    overrideTrkQuals = cms.InputTag("pixelLessStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("pixelLessStepTracks")
)


process.tobTecStepSeedLayersPair = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(5),
        minRing = cms.int32(5),
        skipClusters = cms.InputTag("tobTecStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters")
    ),
    layerList = cms.vstring('TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_pos+TEC3_pos', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_pos+TEC5_pos', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_pos+TEC6_pos', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_pos+TEC7_pos', 
        'TEC6_neg+TEC7_neg')
)


process.tobTecStepSeedLayersTripl = cms.EDProducer("SeedingLayersEDProducer",
    MTEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    MTOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters")
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("tobTecStepClusters")
    ),
    layerList = cms.vstring('TOB1+TOB2+MTOB3', 
        'TOB1+TOB2+MTEC1_pos', 
        'TOB1+TOB2+MTEC1_neg')
)


process.tobTecStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("tobTecStepSeedsTripl"), cms.InputTag("tobTecStepSeedsPair"))
)


process.tobTecStepSeedsPair = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("tobTecStepSeedLayersPair"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(30.0),
            originRadius = cms.double(6.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.6)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(cms.PSet(
            ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
            ClusterShapeHitFilterName = cms.string('tobTecStepClusterShapeHitFilter'),
            ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
            FilterAtHelixStage = cms.bool(True),
            FilterPixelHits = cms.bool(False),
            FilterStripHits = cms.bool(True)
        ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )),
        mode = cms.string('and')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.tobTecStepSeedsTripl = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardMultiHitGenerator'),
        GeneratorPSet = cms.PSet(
            ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
            ComponentName = cms.string('MultiHitGeneratorFromChi2'),
            TTRHBuilder = cms.string('WithTrackAngle'),
            chi2VsPtCut = cms.bool(True),
            chi2_cuts = cms.vdouble(3.0, 4.0, 5.0, 5.0),
            debug = cms.bool(False),
            detIdsToDebug = cms.vint32(0, 0, 0),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            extraPhiKDBox = cms.double(0.01),
            extraRKDBox = cms.double(0.2),
            extraZKDBox = cms.double(0.2),
            fnSigmaRZ = cms.double(2.0),
            maxChi2 = cms.double(5.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            pt_interv = cms.vdouble(0.4, 0.7, 1.0, 2.0),
            refitHits = cms.bool(True),
            useFixedPreFiltering = cms.bool(False)
        ),
        SeedingLayers = cms.InputTag("tobTecStepSeedLayersTripl")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(20.0),
            originRadius = cms.double(3.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.55)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(cms.PSet(
            ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
            ClusterShapeHitFilterName = cms.string('tobTecStepClusterShapeHitFilter'),
            ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
            FilterAtHelixStage = cms.bool(True),
            FilterPixelHits = cms.bool(False),
            FilterStripHits = cms.bool(True)
        ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )),
        mode = cms.string('and')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.tobTecStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter6_13TeV_v0'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("tobTecStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(2.0, 4.0),
        d0_par2 = cms.vdouble(2.0, 4.0),
        dz_par1 = cms.vdouble(1.8, 4.0),
        dz_par2 = cms.vdouble(1.8, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.6),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('tobTecStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.5, 4.0),
            d0_par2 = cms.vdouble(1.5, 4.0),
            dz_par1 = cms.vdouble(1.4, 4.0),
            dz_par2 = cms.vdouble(1.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('tobTecStepTight'),
            preFilterName = cms.string('tobTecStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.2, 4.0),
            d0_par2 = cms.vdouble(1.2, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.6),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('tobTecStep'),
            preFilterName = cms.string('tobTecStepLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.tobTecStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('tobTecStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('tobTecStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("tobTecStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("tobTecStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.tobTecStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('tobTecStep'),
    Fitter = cms.string('tobTecFlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("tobTecStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.towerMaker = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.towerMakerWithHO = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.trackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2ndComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rdComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackExtrapolator = cms.EDProducer("TrackExtrapolator",
    trackQuality = cms.string('goodIterative'),
    trackSrc = cms.InputTag("generalTracks")
)


process.trackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("trackWithVertexRefSelector")
)


process.trackRefsForJetsBeforeSorting = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("trackWithVertexRefSelectorBeforeSorting")
)


process.trackVertexArbitrator = cms.EDProducer("TrackVertexArbitrator",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dLenFraction = cms.double(0.333),
    dRCut = cms.double(0.4),
    distCut = cms.double(0.04),
    fitterRatio = cms.double(0.25),
    fitterSigmacut = cms.double(3),
    fitterTini = cms.double(256),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    secondaryVertices = cms.InputTag("vertexMerger"),
    sigCut = cms.double(5),
    trackMinLayers = cms.int32(4),
    trackMinPixels = cms.int32(1),
    trackMinPt = cms.double(0.4),
    tracks = cms.InputTag("generalTracks")
)


process.trackerDrivenElectronSeeds = cms.EDProducer("GoodSeedProducer",
    ApplyIsolation = cms.bool(False),
    ClusterThreshold = cms.double(0.5),
    EOverPLead_minValue = cms.double(0.95),
    EcalStripSumE_deltaEta = cms.double(0.03),
    EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
    EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
    EcalStripSumE_minClusEnergy = cms.double(0.1),
    EtaMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_eta.dat'),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    HOverPLead_maxValue = cms.double(0.05),
    HcalWindow = cms.double(0.184),
    MaxEOverP = cms.double(3.0),
    MaxEta = cms.double(2.4),
    MaxPt = cms.double(50.0),
    MinEOverP = cms.double(0.3),
    MinPt = cms.double(2.0),
    Min_dr = cms.double(0.2),
    NHitsInSeed = cms.int32(3),
    PFEcalClusterLabel = cms.InputTag("particleFlowClusterECAL"),
    PFHcalClusterLabel = cms.InputTag("particleFlowClusterHCAL"),
    PFPSClusterLabel = cms.InputTag("particleFlowClusterPS"),
    PSThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/PSThreshold.dat'),
    PhiMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_phi.dat'),
    PreCkfLabel = cms.string('SeedsForCkf'),
    PreGsfLabel = cms.string('SeedsForGsf'),
    PreIdLabel = cms.string('preid'),
    ProducePreId = cms.untracked.bool(True),
    PtThresholdSavePreId = cms.untracked.double(1.0),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    TMVAMethod = cms.string('BDT'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    ThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/Threshold.dat'),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    TrackQuality = cms.string('highPurity'),
    UsePreShower = cms.bool(False),
    UseQuality = cms.bool(True),
    UseTMVA = cms.untracked.bool(True),
    Weights1 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat1.xml'),
    Weights2 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat2.xml'),
    Weights3 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat3.xml'),
    Weights4 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat4.xml'),
    Weights5 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat5.xml'),
    Weights6 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat6.xml'),
    Weights7 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat7.xml'),
    Weights8 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat8.xml'),
    Weights9 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat9.xml')
)


process.tripletElectronClusterMask = cms.EDProducer("SeedClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepSeedClusterMask"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("tripletElectronSeeds")
)


process.tripletElectronSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelLessStepSeedClusterMask")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelLessStepSeedClusterMask")
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.tripletElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("tripletElectronSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.02),
            precise = cms.bool(True),
            ptMin = cms.double(1.0)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.uncleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitSeverityToBeExcluded = cms.vstring(),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(False),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.uncleanedOnlyAllConversions = cms.EDProducer("ConversionProducer",
    AlgorithmName = cms.string('mixed'),
    AllowD0 = cms.bool(True),
    AllowDeltaCot = cms.bool(True),
    AllowDeltaPhi = cms.bool(False),
    AllowMinApproach = cms.bool(True),
    AllowOppCharge = cms.bool(True),
    AllowRightBC = cms.bool(False),
    AllowSingleLeg = cms.bool(False),
    AllowTrackBC = cms.bool(False),
    AllowVertex = cms.bool(True),
    DeltaCotTheta = cms.double(0.1),
    DeltaPhi = cms.double(0.2),
    EnergyBC = cms.double(0.3),
    EnergyTotalBC = cms.double(0.3),
    HalfwayEta = cms.double(0.1),
    MaxChi2Left = cms.double(10.0),
    MaxChi2Right = cms.double(10.0),
    MinApproachHigh = cms.double(1.0),
    MinApproachLow = cms.double(-0.25),
    MinHitsLeft = cms.int32(4),
    MinHitsRight = cms.int32(2),
    UsePvtx = cms.bool(True),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    bypassPreselEcal = cms.bool(False),
    bypassPreselEcalEcal = cms.bool(True),
    bypassPreselGsf = cms.bool(True),
    convertedPhotonCollection = cms.string(''),
    d0 = cms.double(0.0),
    dEtaTrackBC = cms.double(0.2),
    dEtacutForSCmatching = cms.double(0.03),
    dPhiTrackBC = cms.double(1.0),
    dPhicutForSCmatching = cms.double(0.05),
    deltaEta = cms.double(0.4),
    dz = cms.double(5.0),
    maxDelta = cms.double(0.01),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfTrackInPU = cms.int32(999999),
    maxReducedChiSq = cms.double(225.0),
    maxTrackRho = cms.double(120.0),
    maxTrackZ = cms.double(300.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(10.0),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    rCut = cms.double(2.0),
    scBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    scEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    src = cms.InputTag("uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger"),
    vtxChi2 = cms.double(0.0005)
)


process.uncleanedOnlyCkfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    ComponentName = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection'),
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","inOutTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection')
)


process.uncleanedOnlyCkfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('outInEcalSeededConv'),
    ComponentName = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    Fitter = cms.string('KFFitterForOutIn'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection'),
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","outInTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection')
)


process.uncleanedOnlyConversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForConversions')
    ),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    bcECut = cms.double(1.5),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    bcEtCut = cms.double(1.5),
    ecalIsoCut_offset = cms.double(999999999),
    ecalIsoCut_slope = cms.double(0.0),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    fractionShared = cms.double(0.5),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    isoConeR = cms.double(0.4),
    isoEMin = cms.double(0.08),
    isoEtMin = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoInnerConeR = cms.double(3.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsInOut = cms.int32(50),
    maxNumOfSeedsOutIn = cms.int32(50),
    minSCEt = cms.double(20.0),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    scHybridBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    useEtCut = cms.bool(True),
    useHitsSplitting = cms.bool(False),
    useNumXstals = cms.bool(True),
    vetoClusteredHits = cms.bool(False)
)


process.uncleanedOnlyCorrectedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(False),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(6.0),
        brLinearLowThr = cms.double(0.9),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("uncleanedOnlyMulti5x5SuperClustersWithPreshower"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5')
)


process.uncleanedOnlyElectronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForElectrons')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("uncleanedOnlyElectronSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.uncleanedOnlyElectronGsfTracks = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("uncleanedOnlyElectronCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.uncleanedOnlyElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    SeedConfiguration = cms.PSet(
        DeltaPhi1High = cms.double(0.08),
        DeltaPhi1Low = cms.double(0.23),
        DeltaPhi2B = cms.double(0.008),
        DeltaPhi2F = cms.double(0.012),
        HighPtThreshold = cms.double(35.0),
        LowPtThreshold = cms.double(5.0),
        PhiMax2B = cms.double(0.002),
        PhiMax2F = cms.double(0.003),
        PhiMin2B = cms.double(-0.002),
        PhiMin2F = cms.double(-0.003),
        SCEtCut = cms.double(0.0),
        SizeWindowENeg = cms.double(0.675),
        applyHOverECut = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaZ1WithVertex = cms.double(25.0),
        dynamicPhiRoad = cms.bool(True),
        ePhiMax1 = cms.double(0.075),
        ePhiMin1 = cms.double(-0.125),
        fromTrackerSeeds = cms.bool(True),
        hOverEConeSize = cms.double(0.15),
        hOverEHBMinE = cms.double(0.7),
        hOverEHFMinE = cms.double(0.8),
        hOverEPtMin = cms.double(0.0),
        hcalRecHits = cms.InputTag("hbhereco"),
        hcalTowers = cms.InputTag("towerMaker"),
        initialSeeds = cms.InputTag("newCombinedSeeds"),
        maxHBarrel = cms.double(0.0),
        maxHEndcaps = cms.double(0.0),
        maxHOverEBarrel = cms.double(0.15),
        maxHOverEEndcaps = cms.double(0.15),
        measurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
        measurementTrackerName = cms.string(''),
        nSigmasDeltaZ1 = cms.double(5.0),
        pPhiMax1 = cms.double(0.125),
        pPhiMin1 = cms.double(-0.075),
        preFilteredSeeds = cms.bool(False),
        r2MaxF = cms.double(0.15),
        r2MinF = cms.double(-0.15),
        rMaxI = cms.double(0.2),
        rMinI = cms.double(-0.2),
        searchInTIDTEC = cms.bool(True),
        useRecoVertex = cms.bool(False),
        vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
        z2MaxB = cms.double(0.09),
        z2MinB = cms.double(-0.09)
    ),
    barrelSuperClusters = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    endcapSuperClusters = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower")
)


process.uncleanedOnlyGeneralConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('generalTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("uncleanedOnlyInOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("uncleanedOnlyGeneralConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.uncleanedOnlyGsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('uncleanedOnlyElectronGsfTracks'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(False),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(True)
)


process.uncleanedOnlyGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfPfRecTracks = cms.InputTag("uncleanedOnlyPfTrackElec"),
    gsfTracks = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    useGsfPfRecTracks = cms.bool(True)
)


process.uncleanedOnlyGsfElectrons = cms.EDProducer("GsfElectronEcalDrivenProducer",
    ElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    MaxElePtForOnlyMVA = cms.double(50.0),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_9Dec2013.weights.xml'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    addPflowElectrons = cms.bool(True),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0.0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0.0),
    gedElectronMode = cms.bool(False),
    gsfElectronCoresTag = cms.InputTag("uncleanedOnlyGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("uncleanedOnlyPfTrackElec"),
    hOverEConeSize = cms.double(0.15),
    hOverEConeSizePflow = cms.double(0.15),
    hOverEPtMin = cms.double(0.0),
    hOverEPtMinPflow = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    intRadiusBarrelTk = cms.double(0.015),
    intRadiusEcalBarrel = cms.double(3.0),
    intRadiusEcalEndcaps = cms.double(3.0),
    intRadiusEndcapTk = cms.double(0.015),
    intRadiusHcal = cms.double(0.15),
    isBarrel = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    isEndcaps = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    isFiducial = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    jurassicWidth = cms.double(1.5),
    maxDeltaEtaBarrel = cms.double(0.02),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxDeltaEtaEndcaps = cms.double(0.02),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    maxDrbTk = cms.double(999999999.0),
    maxEOverPBarrel = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    maxFbremBarrel = cms.double(999999999.0),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    maxHBarrel = cms.double(0.0),
    maxHBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxHOverEEndcaps = cms.double(0.15),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    maxVtxDistTk = cms.double(0.2),
    minEOverPBarrel = cms.double(0.0),
    minEOverPBarrelPflow = cms.double(0.0),
    minEOverPEndcaps = cms.double(0.0),
    minEOverPEndcapsPflow = cms.double(0.0),
    minMVA = cms.double(-0.4),
    minMVAPflow = cms.double(-0.4),
    minMvaByPassForIsolated = cms.double(-0.4),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    minSCEtBarrel = cms.double(4.0),
    minSCEtBarrelPflow = cms.double(0.0),
    minSCEtEndcaps = cms.double(4.0),
    minSCEtEndcapsPflow = cms.double(0.0),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    previousGsfElectronsTag = cms.InputTag(""),
    ptMinTk = cms.double(0.7),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    seedFromTEC = cms.bool(True),
    seedsTag = cms.InputTag("uncleanedOnlyElectronSeeds"),
    stripBarrelTk = cms.double(0.015),
    stripEndcapTk = cms.double(0.015),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    useCombinationRegression = cms.bool(False),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useIsolationValues = cms.bool(False),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("uncleanedOnlyGeneralInOutOutInConversionTrackMerger"),
    TrackProducer2 = cms.InputTag("uncleanedOnlyGsfConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.uncleanedOnlyInOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(True)
)


process.uncleanedOnlyInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    TrackProducer1 = cms.InputTag("uncleanedOnlyInOutConversionTrackProducer"),
    TrackProducer2 = cms.InputTag("uncleanedOnlyOutInConversionTrackProducer"),
    allowFirstHitShare = cms.bool(True),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    arbitratedMergedPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    minProb = cms.double(1e-06),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1)
)


process.uncleanedOnlyMulti5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esPhiClusterDeltaPhi = cms.double(0.12),
    esStripEnergyCut = cms.double(0.0),
    etThresh = cms.double(0.0),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.uncleanedOnlyOutInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    TrackProducer = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    setArbitratedEcalSeeded = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    useTrajectory = cms.bool(True)
)


process.uncleanedOnlyPfConversions = cms.EDProducer("PFConversionProducer",
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    conversionCollection = cms.InputTag("allConversions")
)


process.uncleanedOnlyPfTrack = cms.EDProducer("PFTrackProducer",
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    GsfTracksInEvents = cms.bool(True),
    MuColl = cms.InputTag("muons1stStep"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    TrackQuality = cms.string('highPurity'),
    TrajInEvents = cms.bool(False),
    UseQuality = cms.bool(True)
)


process.uncleanedOnlyPfTrackElec = cms.EDProducer("PFElecTkProducer",
    AbsEtaBarrelEndcapsSeparation = cms.double(1.479),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    MaxConvBremRecoPT = cms.double(49.0),
    MinDEtaGsfSC = cms.double(0.06),
    MinDPhiGsfSC = cms.double(0.15),
    MinSCEnergy = cms.double(4.0),
    ModeMomentum = cms.bool(True),
    PFConversions = cms.InputTag("uncleanedOnlyPfConversions"),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PFRecTrackLabel = cms.InputTag("uncleanedOnlyPfTrack"),
    PFV0 = cms.InputTag("pfV0"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    Propagator = cms.string('fwdElectronPropagator'),
    PtLowHighSeparation = cms.double(20),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajInEvents = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    applyEGSelection = cms.bool(False),
    applyGsfTrackCleaning = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    pf_convBremFinderID_mvaCutBarrelHighPt = cms.double(0.97),
    pf_convBremFinderID_mvaCutBarrelLowPt = cms.double(0.6),
    pf_convBremFinderID_mvaCutEndcapsHighPt = cms.double(0.995),
    pf_convBremFinderID_mvaCutEndcapsLowPt = cms.double(0.9),
    pf_convBremFinderID_mvaWeightFileBarrelHighPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileBarrelLowPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsHighPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetagt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsLowPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetagt1_479_BDT.weights.xml'),
    useConvBremFinder = cms.bool(True),
    useConversions = cms.bool(False),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    useNuclear = cms.bool(False),
    useV0 = cms.bool(False)
)


process.unsortedOfflinePrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(4.0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            dzCutOff = cms.double(4.0),
            vertexSize = cms.double(0.01)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(5.0),
        maxNormalizedChi2 = cms.double(20.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("generalTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ), 
        cms.PSet(
            algorithm = cms.string('AdaptiveVertexFitter'),
            label = cms.string('WithBS'),
            maxDistanceToBeam = cms.double(1.0),
            minNdof = cms.double(2.0),
            useBeamConstraint = cms.bool(True)
        ))
)


process.vertexMerger = cms.EDProducer("VertexMerger",
    maxFraction = cms.double(0.7),
    minSignificance = cms.double(2),
    secondaryVertices = cms.InputTag("inclusiveVertexFinder")
)


process.zdcreco = cms.EDProducer("ZdcHitReconstructor",
    AuxTSvec = cms.vint32(4, 5, 6, 7),
    Subdetector = cms.string('ZDC'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    lowGainFrac = cms.double(8.15),
    lowGainOffset = cms.int32(1),
    recoMethod = cms.int32(2),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False)
)


process.ak8PFJetsCHSConstituents = cms.EDFilter("PFJetConstituentSelector",
    cut = cms.string('pt > 100.0 && abs(rapidity()) < 2.4'),
    src = cms.InputTag("ak8PFJetsCHS")
)


process.electronsWithPresel = cms.EDFilter("GsfElectronSelector",
    cut = cms.string('pt > 5 && ecalDrivenSeed && passingCutBasedPreselection'),
    src = cms.InputTag("ecalDrivenGsfElectrons")
)


process.firstStepGoodPrimaryVertices = cms.EDFilter("PrimaryVertexObjectFilter",
    filterParams = cms.PSet(
        maxRho = cms.double(2.0),
        maxZ = cms.double(15.0),
        minNdof = cms.double(25.0)
    ),
    src = cms.InputTag("firstStepPrimaryVertices")
)


process.goodOfflinePrimaryVertices = cms.EDFilter("VertexSelector",
    cut = cms.string('!isFake && ndof >= 4.0 && abs(z) <= 24.0 && abs(position.Rho) <= 2.0'),
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices")
)


process.jetsForCoreTracking = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt > 100 && abs(eta) < 2.5'),
    src = cms.InputTag("ak4CaloJetsForTrk")
)


process.jetsForCoreTrackingPreSplitting = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt > 100 && abs(eta) < 2.5'),
    src = cms.InputTag("ak4CaloJetsForTrkPreSplitting")
)


process.mvaElectrons = cms.EDFilter("ElectronIdMVABased",
    HZZmvaWeightFile = cms.string('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    electronTag = cms.InputTag("electronsWithPresel"),
    thresholdBarrel = cms.double(-0.1875),
    thresholdEndcap = cms.double(-0.1075),
    thresholdIsoDR03Barrel = cms.double(10.0),
    thresholdIsoDR03Endcap = cms.double(10.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices")
)


process.pfAllChargedHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadronsAndPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(22),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfNoPileUpCandidates = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 22, 111, 130, 
        310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfPileUpAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfPileUpIso")
)


process.recoTauPileUpVertices = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    minTrackSumPt = cms.double(5),
    src = cms.InputTag("offlinePrimaryVertices")
)


process.trackWithVertexRefSelector = cms.EDFilter("TrackWithVertexRefSelector",
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(0.2),
    ptMax = cms.double(500.0),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)


process.trackWithVertexRefSelectorBeforeSorting = cms.EDFilter("TrackWithVertexRefSelector",
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(0.2),
    ptMax = cms.double(500.0),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("unsortedOfflinePrimaryVertices"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)


process.dqmFillerLegacy = cms.EDAnalyzer("DQMFiller_legacy")


process.dqmFillerNew = cms.EDAnalyzer("DQMFiller_new")


process.dqmPrintStats = cms.EDAnalyzer("DQMPrintStats")


process.ALCARECOStreamSiStripCalMinBias = cms.OutputModule("PoolOutputModule",
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('ALCARECO'),
        filterName = cms.untracked.string('SiStripCalMinBias')
    ),
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    fileName = cms.untracked.string('SiStripCalMinBias.root'),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)


process.ALCARECOStreamSiStripCalZeroBias = cms.OutputModule("PoolOutputModule",
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('ALCARECO'),
        filterName = cms.untracked.string('SiStripCalZeroBias')
    ),
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    fileName = cms.untracked.string('SiStripCalZeroBias.root'),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)


process.DQMoutput = cms.OutputModule("DQMRootOutputModule",
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('DQMIO'),
        filterName = cms.untracked.string('')
    ),
    fileName = cms.untracked.string('file:step3_inDQM.root'),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConverter_*_*'),
    splitLevel = cms.untracked.int32(0)
)


process.MINIAODSIMoutput = cms.OutputModule("PoolOutputModule",
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('MINIAODSIM'),
        filterName = cms.untracked.string('')
    ),
    dropMetaData = cms.untracked.string('ALL'),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    fastCloning = cms.untracked.bool(False),
    fileName = cms.untracked.string('file:step3_inMINIAODSIM.root'),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*', 
        'keep *_slimmedGenJets*_*_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*'),
    overrideInputFileSplitLevels = cms.untracked.bool(True)
)


process.RECOSIMoutput = cms.OutputModule("PoolOutputModule",
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('GEN-SIM-RECO'),
        filterName = cms.untracked.string('')
    ),
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    fileName = cms.untracked.string('file:step3.root'),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*' ) ),
    splitLevel = cms.untracked.int32(0)
)


process.cosmicsMuonIdSequence = cms.Sequence(process.cosmicsVetoSeeds+process.cosmicsVetoTrackCandidates+process.cosmicsVetoTracksRaw+process.cosmicsVetoTracks+process.cosmicsVeto)


process.pfNoPileUpJMESequence = cms.Sequence(process.goodOfflinePrimaryVertices+process.pfPileUpJME+process.pfNoPileUpJME)


process.recoTrackJets = cms.Sequence(process.trackWithVertexRefSelector+process.trackRefsForJets+process.ak4TrackJets)


process.hcalLocalRecoSequence = cms.Sequence(process.hbheprereco+process.hfreco+process.horeco+process.zdcreco)


process.PixelLessStep = cms.Sequence(process.pixelLessStepClusters+process.pixelLessStepSeedLayers+process.pixelLessStepSeeds+process.pixelLessStepTrackCandidates+process.pixelLessStepTracks+process.pixelLessStepSelector+process.pixelLessStep)


process.csclocalreco = cms.Sequence(process.csc2DRecHits+process.cscSegments)


process.recoPFMET = cms.Sequence(process.pfMet+process.particleFlowForChargedMET+process.pfChMet)


process.photonSequence = cms.Sequence(process.photonCore+process.photons)


process.uncleanedOnlyElectrons = cms.Sequence(process.uncleanedOnlyGsfElectronCores+process.uncleanedOnlyGsfElectrons)


process.photonIDSequenceGED = cms.Sequence(process.PhotonIDProdGED)


process.inclusiveCandidateVertexing = cms.Sequence(process.inclusiveCandidateVertexFinder+process.candidateVertexMerger+process.candidateVertexArbitrator+process.inclusiveCandidateSecondaryVertices)


process.recoTauCommonSequence = cms.Sequence(process.ak4PFJetTracksAssociatorAtVertex+process.recoTauAK4PFJets08Region+process.recoTauPileUpVertices+process.pfRecoTauTagInfoProducer)


process.conversionSequence = cms.Sequence(process.conversions)


process.dtlocalreco = cms.Sequence(process.dt1DRecHits+process.dt4DSegments+process.dt1DCosmicRecHits+process.dt4DCosmicSegments)


process.muonSeededStepExtraDisplaced = cms.Sequence(process.muonSeededTracksInOutSelector+process.muonSeededTracksOutInDisplacedSelector)


process.muonSeededStepExtra = cms.Sequence(process.muonSeededTracksInOutSelector+process.muonSeededTracksOutInSelector)


process.pfClusteringECAL = cms.Sequence(process.particleFlowRecHitECAL+process.particleFlowClusterECALUncorrected+process.particleFlowClusterECAL)


process.legacyBTagging = cms.Sequence(process.impactParameterTagInfos+process.trackCountingHighEffBJetTags+process.trackCountingHighPurBJetTags+process.jetProbabilityBJetTags+process.jetBProbabilityBJetTags+process.secondaryVertexTagInfos+process.simpleSecondaryVertexHighEffBJetTags+process.simpleSecondaryVertexHighPurBJetTags+process.combinedSecondaryVertexBJetTags+process.inclusiveSecondaryVertexFinderTagInfos+process.combinedInclusiveSecondaryVertexV2BJetTags+process.ghostTrackVertexTagInfos+process.ghostTrackBJetTags+process.softPFMuonsTagInfos+process.softPFMuonBJetTags+process.softPFElectronsTagInfos+process.softPFElectronBJetTags+process.combinedMVABJetTags)


process.pfBTagging = cms.Sequence(process.pfImpactParameterTagInfos+process.pfTrackCountingHighEffBJetTags+process.pfTrackCountingHighPurBJetTags+process.pfJetProbabilityBJetTags+process.pfJetBProbabilityBJetTags+process.pfSecondaryVertexTagInfos+process.pfSimpleSecondaryVertexHighEffBJetTags+process.pfSimpleSecondaryVertexHighPurBJetTags+process.pfCombinedSecondaryVertexBJetTags+process.pfCombinedSecondaryVertexV2BJetTags+process.inclusiveCandidateVertexing+process.pfInclusiveSecondaryVertexFinderTagInfos+process.pfCombinedInclusiveSecondaryVertexV2BJetTags+process.softPFMuonsTagInfos+process.softPFMuonBJetTags+process.softPFElectronsTagInfos+process.softPFElectronBJetTags+process.pfCombinedMVABJetTags+process.pfCombinedSecondaryVertexSoftLeptonBJetTags)


process.pixeltrackerlocalreco = cms.Sequence(process.siPixelClustersPreSplitting+process.siPixelRecHitsPreSplitting)


process.ecalRecHitSequence = cms.Sequence(process.ecalRecHit+process.ecalCompactTrigPrim+process.ecalTPSkim+process.ecalPreshowerRecHit)


process.JetPlusTrackCorrectionsAntiKt4 = cms.Sequence(process.JPTeidTight+process.ak4JetTracksAssociatorAtVertexJPT+process.JetPlusTrackZSPCorJetAntiKt4)


process.recoPFJets = cms.Sequence(process.fixedGridRhoAll+process.fixedGridRhoFastjetAll+process.fixedGridRhoFastjetCentralChargedPileUp+process.fixedGridRhoFastjetCentralNeutral+process.ak4PFJets+process.pfNoPileUpJMESequence+process.ak4PFJetsCHS+process.ak8PFJetsCHS+process.ak8PFJetsCHSConstituents+process.ak8PFJetsCHSSoftDrop+process.ak8PFJetsCHSSoftDropMass+process.cmsTopTagPFJetsCHS)


process.PixelPairStep = cms.Sequence(process.pixelPairStepClusters+process.pixelPairStepSeedLayers+process.pixelPairStepSeeds+process.pixelPairStepTrackCandidates+process.pixelPairStepTracks+process.pixelPairStepSelector)


process.hpsPFTauDiscriminationByChargedIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseChargedIsolation+process.hpsPFTauDiscriminationByLooseChargedIsolation+process.hpsPFTauDiscriminationByMediumChargedIsolation+process.hpsPFTauDiscriminationByTightChargedIsolation)


process.muoncosmicreco2legsHighLevel = cms.Sequence(process.muonsFromCosmics)


process.muonlocalreco = cms.Sequence(process.dtlocalreco+process.csclocalreco+process.rpcRecHits)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr)


process.pfClusterIsolationSequence = cms.Sequence(process.electronEcalPFClusterIsolationProducer+process.photonEcalPFClusterIsolationProducer+process.electronHcalPFClusterIsolationProducer+process.photonHcalPFClusterIsolationProducer)


process.multi5x5PreshowerClusteringSequence = cms.Sequence(process.correctedMulti5x5SuperClustersWithPreshower+process.multi5x5PreshowerClusterShape+process.uncleanedOnlyMulti5x5SuperClustersWithPreshower+process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower)


process.conversionTrackProducers = cms.Sequence(process.generalConversionTrackProducer+process.conversionStepConversionTrackProducer+process.inOutConversionTrackProducer+process.outInConversionTrackProducer+process.gsfConversionTrackProducer)


process.muonSeededStepCore = cms.Sequence(process.muonSeededSeedsInOut+process.muonSeededTrackCandidatesInOut+process.muonSeededTracksInOut+process.muonSeededSeedsOutIn+process.muonSeededTrackCandidatesOutIn+process.muonSeededTracksOutIn)


process.muIsoDeposits_muons = cms.Sequence(process.muIsoDepositTk+process.muIsoDepositCalByAssociatorTowers+process.muIsoDepositJets)


process.CastorFullReco = cms.Sequence(process.CastorTowerReco+process.ak5CastorJets+process.ak5CastorJetID+process.ak7CastorJets+process.ak7CastorJetID)


process.gedElectronPFIsolationValuesSequence = cms.Sequence(process.gedElPFIsoValueCharged03+process.gedElPFIsoValueChargedAll03+process.gedElPFIsoValueGamma03+process.gedElPFIsoValueNeutral03+process.gedElPFIsoValuePU03)


process.uncleanedOnlyConversionTrackProducers = cms.Sequence(process.uncleanedOnlyGeneralConversionTrackProducer+process.uncleanedOnlyInOutConversionTrackProducer+process.uncleanedOnlyOutInConversionTrackProducer+process.uncleanedOnlyGsfConversionTrackProducer)


process.muoncosmicreco1legHighLevel = cms.Sequence(process.muonsFromCosmics1Leg)


process.gedGsfElectronSequenceTmp = cms.Sequence(process.gedGsfElectronCores+process.gedGsfElectronsTmp)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits = cms.Sequence(process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits)


process.muonSelectionTypeSequence = cms.Sequence(process.muidTrackerMuonArbitrated+process.muidAllArbitrated+process.muidGlobalMuonPromptTight+process.muidTMLastStationLoose+process.muidTMLastStationTight+process.muidTM2DCompatibilityLoose+process.muidTM2DCompatibilityTight+process.muidTMOneStationLoose+process.muidTMOneStationTight+process.muidTMLastStationOptimizedLowPtLoose+process.muidTMLastStationOptimizedLowPtTight+process.muidGMTkChiCompatibility+process.muidGMStaChiCompatibility+process.muidGMTkKinkTight+process.muidTMLastStationAngLoose+process.muidTMLastStationAngTight+process.muidTMOneStationAngLoose+process.muidTMOneStationAngTight+process.muidRPCMuLoose)


process.inclusiveVertexing = cms.Sequence(process.inclusiveVertexFinder+process.vertexMerger+process.trackVertexArbitrator+process.inclusiveSecondaryVertices)


process.pfNoPileUpSequence = cms.Sequence(process.pfPileUp+process.pfNoPileUp)


process.hpsPFTauMVAIsolation2Seq = cms.Sequence(process.hpsPFTauMVA3IsolationChargedIsoPtSum+process.hpsPFTauMVA3IsolationNeutralIsoPtSum+process.hpsPFTauMVA3IsolationPUcorrPtSum+process.hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByTightIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByTightIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByTightIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByTightIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwLT)


process.particleFlowTrackWithDisplacedVertex = cms.Sequence(process.pfTrack+process.pfConversions+process.pfV0+process.particleFlowDisplacedVertexCandidate+process.particleFlowDisplacedVertex+process.pfDisplacedTrackerVertex+process.pfTrackElec)


process.muonSeededStep = cms.Sequence(process.earlyMuons+process.muonSeededStepCore+process.muonSeededStepExtra)


process.MixedTripletStep = cms.Sequence(process.chargeCut2069Clusters+process.mixedTripletStepClusters+process.mixedTripletStepSeedLayersA+process.mixedTripletStepSeedsA+process.mixedTripletStepSeedLayersB+process.mixedTripletStepSeedsB+process.mixedTripletStepSeeds+process.mixedTripletStepTrackCandidates+process.mixedTripletStepTracks+process.mixedTripletStepSelector+process.mixedTripletStep)


process.allConversionSequence = cms.Sequence(process.allConversions)


process.gedElectronPFIsolationDepositsSequence = cms.Sequence(process.gedElPFIsoDepositCharged+process.gedElPFIsoDepositChargedAll+process.gedElPFIsoDepositGamma+process.gedElPFIsoDepositNeutral+process.gedElPFIsoDepositPU)


process.muontracking_with_SET = cms.Sequence(process.SETMuonSeed+process.standAloneSETMuons+process.globalSETMuons)


process.seldigis = cms.Sequence(process.selectDigi)


process.eIdSequence = cms.Sequence(process.eidRobustLoose+process.eidRobustTight+process.eidRobustHighEnergy+process.eidLoose+process.eidTight)


process.muoncosmicreco1legSTA = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons1Leg)


process.L1Reco = cms.Sequence(process.l1extraParticles+process.l1GtTriggerMenuLite+process.conditionsInEdm+process.l1L1GtObjectMap)


process.gedPhotonSequence = cms.Sequence(process.gedPhotons)


process.reducedHcalRecHitsSequence = cms.Sequence(process.reducedHcalRecHits)


process.InitialStep = cms.Sequence(process.initialStepSeedLayers+process.initialStepSeeds+process.initialStepTrackCandidates+process.initialStepTracks+process.firstStepPrimaryVertices+process.initialStepSelector+process.initialStep)


process.gedPhotonSequenceTmp = cms.Sequence(process.gedPhotonCore+process.gedPhotonsTmp)


process.muonreco_with_SET = cms.Sequence(process.muontracking_with_SET)


process.conversionTrackMergers = cms.Sequence(process.inOutOutInConversionTrackMerger+process.generalConversionStepConversionTrackMerger+process.generalInOutOutInConversionTrackMerger+process.gsfGeneralInOutOutInConversionTrackMerger)


process.hpsPFTauDiscriminationByIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolation+process.hpsPFTauDiscriminationByLooseIsolation+process.hpsPFTauDiscriminationByMediumIsolation+process.hpsPFTauDiscriminationByTightIsolation)


process.pfSortByTypeSequence = cms.Sequence(process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons)


process.particleBasedIsolationSequence = cms.Sequence(process.particleBasedIsolation)


process.interestingEgammaIsoDetIds = cms.Sequence(process.interestingGedEleIsoDetIdEB+process.interestingGedEleIsoDetIdEE+process.interestingGedGamIsoDetIdEB+process.interestingGedGamIsoDetIdEE+process.interestingGamIsoDetIdEB+process.interestingGamIsoDetIdEE+process.interestingGedEgammaIsoHCALDetId+process.interestingGedEgammaIsoESDetId)


process.pfTrackingGlobalReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex)


process.uncleanedOnlyCkfTracksFromConversions = cms.Sequence(process.uncleanedOnlyConversionTrackCandidates+process.uncleanedOnlyCkfOutInTracksFromConversions+process.uncleanedOnlyCkfInOutTracksFromConversions)


process.recoJetIds = cms.Sequence(process.ak4JetID)


process.caloTowersRec = cms.Sequence(process.towerMaker+process.towerMakerWithHO)


process.pfClusteringPS = cms.Sequence(process.particleFlowRecHitPS+process.particleFlowClusterPS)


process.generalTracksSequence = cms.Sequence(process.duplicateTrackCandidates+process.mergedDuplicateTracks+process.duplicateTrackSelector+process.generalTracks)


process.uncleanedOnlyTracking = cms.Sequence(process.uncleanedOnlyElectronSeeds+process.uncleanedOnlyElectronCkfTrackCandidates+process.uncleanedOnlyElectronGsfTracks)


process.electronSeeds = cms.Sequence(process.trackerDrivenElectronSeeds+process.ecalDrivenElectronSeeds+process.electronMergedSeeds)


process.caloJetsForTrk = cms.Sequence(process.caloTowerForTrk+process.ak4CaloJetsForTrk)


process.pfNoPileUpIsoSequence = cms.Sequence(process.pfPileUpIso+process.pfNoPileUpIso)


process.hfEMClusteringSequence = cms.Sequence(process.hfEMClusters+process.hfRecoEcalCandidate)


process.uncleanedOnlyPfTracking = cms.Sequence(process.uncleanedOnlyPfTrack+process.uncleanedOnlyPfConversions+process.uncleanedOnlyPfTrackElec)


process.muonSeededStepCoreDisplaced = cms.Sequence(process.muonSeededSeedsInOut+process.muonSeededTrackCandidatesInOut+process.muonSeededTracksInOut+process.muonSeededSeedsOutInDisplaced+process.muonSeededTrackCandidatesOutInDisplaced+process.muonSeededTracksOutInDisplaced)


process.produceHPSPFTaus = cms.Sequence(process.hpsSelectionDiscriminator+process.hpsPFTauProducerSansRefs+process.hpsPFTauProducer)


process.gsfEcalDrivenElectronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons)


process.DetachedTripletStep = cms.Sequence(process.detachedTripletStepClusters+process.detachedTripletStepSeedLayers+process.detachedTripletStepSeeds+process.detachedTripletStepTrackCandidates+process.detachedTripletStepTracks+process.detachedTripletStepSelector+process.detachedTripletStep)


process.vertexreco = cms.Sequence(process.unsortedOfflinePrimaryVertices+process.trackWithVertexRefSelectorBeforeSorting+process.trackRefsForJetsBeforeSorting+process.caloJetsForTrk+process.offlinePrimaryVertices+process.offlinePrimaryVerticesWithBS+process.generalV0Candidates+process.inclusiveVertexing)


process.uncleanedOnlyConversionTrackMergers = cms.Sequence(process.uncleanedOnlyInOutOutInConversionTrackMerger+process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger+process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger)


process.standAloneMuonSeeds = cms.Sequence(process.ancientMuonSeed)


process.particleFlowEGammaFull = cms.Sequence(process.particleFlowEGamma+process.gedGsfElectronSequenceTmp+process.gedPhotonSequenceTmp)


process.pfClusteringHBHEHF = cms.Sequence(process.particleFlowRecHitHBHE+process.particleFlowRecHitHF+process.particleFlowClusterHBHE+process.particleFlowClusterHF+process.particleFlowClusterHCAL)


process.ak4JTA = cms.Sequence(process.ak4JetTracksAssociatorAtVertexPF+process.ak4JetTracksAssociatorAtVertex+process.ak4JetTracksAssociatorAtCaloFace+process.ak4JetExtender)


process.multi5x5ClusteringSequence = cms.Sequence(process.multi5x5BasicClustersCleaned+process.multi5x5SuperClustersCleaned+process.multi5x5BasicClustersUncleaned+process.multi5x5SuperClustersUncleaned+process.multi5x5SuperClusters+process.multi5x5SuperClustersWithPreshower)


process.electronSeedsSeq = cms.Sequence(process.initialStepSeedClusterMask+process.pixelPairStepSeedClusterMask+process.mixedTripletStepSeedClusterMask+process.pixelLessStepSeedClusterMask+process.tripletElectronSeedLayers+process.tripletElectronSeeds+process.tripletElectronClusterMask+process.pixelPairElectronSeedLayers+process.pixelPairElectronSeeds+process.stripPairElectronSeedLayers+process.stripPairElectronSeeds+process.newCombinedSeeds)


process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr)


process.muoncosmicreco2legsSTA = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons)


process.doAlldEdXEstimators = cms.Sequence(process.dedxTruncated40+process.dedxHarmonic2+process.dedxHitInfo)


process.pfParticleSelectionSequence = cms.Sequence(process.pfNoPileUpIsoSequence+process.pfNoPileUpSequence+process.pfSortByTypeSequence)


process.muonIdProducerSequence = cms.Sequence(process.glbTrackQual+process.muons1stStep+process.calomuons+process.muonEcalDetIds+process.muonShowerInformation)


process.ckfTracksFromConversions = cms.Sequence(process.conversionTrackCandidates+process.ckfOutInTracksFromConversions+process.ckfInOutTracksFromConversions)


process.pfGsfElectronMVASelectionSequence = cms.Sequence(process.electronsWithPresel+process.mvaElectrons)


process.TobTecStep = cms.Sequence(process.tobTecStepClusters+process.tobTecStepSeedLayersTripl+process.tobTecStepSeedsTripl+process.tobTecStepSeedLayersPair+process.tobTecStepSeedsPair+process.tobTecStepSeeds+process.tobTecStepTrackCandidates+process.tobTecStepTracks+process.tobTecStepSelector)


process.LowPtTripletStep = cms.Sequence(process.lowPtTripletStepClusters+process.lowPtTripletStepSeedLayers+process.lowPtTripletStepSeeds+process.lowPtTripletStepTrackCandidates+process.lowPtTripletStepTracks+process.lowPtTripletStepSelector)


process.ecalUncalibRecHitSequence = cms.Sequence(process.ecalMultiFitUncalibRecHit+process.ecalDetIdToBeRecovered)


process.hcalGlobalRecoSequence = cms.Sequence(process.hbhereco)


process.striptrackerlocalreco = cms.Sequence(process.siStripZeroSuppression+process.siStripClusters+process.siStripMatchedRecHits)


process.recoJets = cms.Sequence(process.fixedGridRhoFastjetAllCalo+process.fixedGridRhoFastjetCentralCalo+process.ak4CaloJets)


process.ConvStep = cms.Sequence(process.convClusters+process.convLayerPairs+process.photonConvTrajSeedFromSingleLeg+process.convTrackCandidates+process.convStepTracks+process.convStepSelector)


process.hpsPFTauVertexAndImpactParametersSeq = cms.Sequence(process.hpsPFTauPrimaryVertexProducer+process.hpsPFTauSecondaryVertexProducer+process.hpsPFTauTransverseImpactParameters)


process.muonSeededStepDisplaced = cms.Sequence(process.earlyDisplacedMuons+process.muonSeededStepCoreDisplaced+process.muonSeededStepExtraDisplaced)


process.reducedEcalRecHitsSequence = cms.Sequence(process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingEcalDetIdPFEB+process.interestingEcalDetIdPFEE+process.interestingEcalDetIdPFES+process.interestingEcalDetIdRefinedEB+process.interestingEcalDetIdRefinedEE+process.interestingEcalDetIdRefinedES+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.seldigis+process.reducedEcalRecHitsES)


process.ak4JTAExplicit = cms.Sequence(process.ak4JetTracksAssociatorExplicit)


process.BeamHaloId = cms.Sequence(process.CSCHaloData+process.EcalHaloData+process.HcalHaloData+process.GlobalHaloData+process.BeamHaloSummary)


process.photonIDSequence = cms.Sequence(process.PhotonIDProd)


process.hybridClusteringSequence = cms.Sequence(process.cleanedHybridSuperClusters+process.uncleanedHybridSuperClusters+process.hybridSuperClusters+process.correctedHybridSuperClusters+process.uncleanedOnlyCorrectedHybridSuperClusters)


process.InitialStepPreSplitting = cms.Sequence(process.initialStepSeedLayersPreSplitting+process.initialStepSeedsPreSplitting+process.initialStepTrackCandidatesPreSplitting+process.initialStepTracksPreSplitting+process.firstStepPrimaryVerticesPreSplitting+process.initialStepTrackRefsForJetsPreSplitting+process.caloTowerForTrkPreSplitting+process.ak4CaloJetsForTrkPreSplitting+process.jetsForCoreTrackingPreSplitting+process.siPixelClusters+process.siPixelRecHits+process.MeasurementTrackerEvent+process.siPixelClusterShapeCache)


process.particleFlowSuperClusteringSequence = cms.Sequence(process.particleFlowSuperClusterECAL)


process.displacedTracksSequence = cms.Sequence(process.duplicateDisplacedTrackCandidates+process.mergedDuplicateDisplacedTracks+process.duplicateDisplacedTrackSelector+process.displacedTracks)


process.muonPFIsolationDepositsSequence = cms.Sequence(process.muPFIsoDepositCharged+process.muPFIsoDepositChargedAll+process.muPFIsoDepositGamma+process.muPFIsoDepositNeutral+process.muPFIsoDepositPU)


process.pfClusteringHO = cms.Sequence(process.particleFlowRecHitHO+process.particleFlowClusterHO)


process.uncleanedOnlyConversions = cms.Sequence(process.uncleanedOnlyCkfTracksFromConversions+process.uncleanedOnlyConversionTrackProducers+process.uncleanedOnlyConversionTrackMergers+process.uncleanedOnlyAllConversions)


process.egmIsolationSequence = cms.Sequence(process.pfParticleSelectionSequence+process.pfNoPileUpCandidates+process.egmGedGsfElectronPFNoPileUpIsolation+process.egmGedGsfElectronPFPileUpIsolation+process.pfClusterIsolationSequence)


process.jetGlobalReco = cms.Sequence(process.recoJets+process.recoJetIds+process.recoTrackJets)


process.ecalLocalRecoSequence = cms.Sequence(process.ecalUncalibRecHitSequence+process.ecalRecHitSequence)


process.calolocalreco = cms.Sequence(process.ecalLocalRecoSequence+process.hcalLocalRecoSequence)


process.btagging = cms.Sequence(process.legacyBTagging+process.pfBTagging)


process.metreco = cms.Sequence(process.caloMet+process.caloMetBE+process.caloMetBEFO+process.muonMETValueMapProducer+process.caloMetM+process.BeamHaloId)


process.standalonemuontracking = cms.Sequence(process.standAloneMuonSeeds+process.standAloneMuons+process.refittedStandAloneMuons+process.displacedMuonSeeds+process.displacedStandAloneMuons)


process.particleFlowCluster = cms.Sequence(process.pfClusteringPS+process.pfClusteringECAL+process.pfClusteringHBHEHF+process.pfClusteringHO)


process.muoncosmicreco = cms.Sequence(process.muoncosmicreco2legsSTA+process.muoncosmicreco1legSTA)


process.muoncosmichighlevelreco = cms.Sequence(process.muoncosmicreco2legsHighLevel+process.muoncosmicreco1legHighLevel+process.cosmicsMuonIdSequence)


process.JetCoreRegionalStep = cms.Sequence(process.initialStepTrackRefsForJets+process.caloJetsForTrk+process.jetsForCoreTracking+process.firstStepGoodPrimaryVertices+process.jetCoreRegionalStepSeedLayers+process.jetCoreRegionalStepSeeds+process.jetCoreRegionalStepTrackCandidates+process.jetCoreRegionalStepTracks+process.jetCoreRegionalStepSelector)


process.particleFlowLinks = cms.Sequence(process.particleFlow+process.particleFlowPtrs+process.particleBasedIsolationSequence)


process.iterTracking = cms.Sequence(process.InitialStepPreSplitting+process.InitialStep+process.DetachedTripletStep+process.LowPtTripletStep+process.PixelPairStep+process.MixedTripletStep+process.PixelLessStep+process.TobTecStep+process.JetCoreRegionalStep+process.earlyGeneralTracks+process.muonSeededStep+process.preDuplicateMergingGeneralTracks+process.generalTracksSequence+process.ConvStep+process.conversionStepTracks)


process.ecalClustersNoPFBox = cms.Sequence(process.hybridClusteringSequence+process.multi5x5ClusteringSequence+process.multi5x5PreshowerClusteringSequence)


process.gedElectronPFIsoSequence = cms.Sequence(process.pfParticleSelectionSequence+process.gedElectronPFIsolationDepositsSequence+process.gedElectronPFIsolationValuesSequence+process.gedGsfElectrons)


process.metrecoPlusHCALNoise = cms.Sequence(process.metreco+process.hcalnoise)


process.electronGsfTracking = cms.Sequence(process.electronSeeds+process.electronCkfTrackCandidates+process.electronGsfTracks)


process.conversionTrackSequence = cms.Sequence(process.ckfTracksFromConversions+process.conversionTrackProducers+process.conversionTrackMergers)


process.trackerlocalreco = cms.Sequence(process.pixeltrackerlocalreco+process.striptrackerlocalreco+process.clusterSummaryProducer)


process.uncleanedOnlyElectronSequence = cms.Sequence(process.uncleanedOnlyTracking+process.uncleanedOnlyConversions+process.uncleanedOnlyPfTracking+process.uncleanedOnlyElectrons)


process.jetPlusTrackZSPCorJetAntiKt4 = cms.Sequence(process.JetPlusTrackCorrectionsAntiKt4)


process.iterDisplcedTracking = cms.Sequence(process.muonSeededStepDisplaced+process.preDuplicateMergingDisplacedTracks+process.displacedTracksSequence)


process.egammaGlobalReco = cms.Sequence(process.electronGsfTracking+process.conversionTrackSequence+process.allConversionSequence)


process.reducedRecHits = cms.Sequence(process.reducedEcalRecHitsSequence+process.reducedHcalRecHitsSequence)


process.localreco = cms.Sequence(process.trackerlocalreco+process.muonlocalreco+process.calolocalreco+process.castorreco)


process.recoJetAssociationsExplicit = cms.Sequence(process.ak4JTAExplicit)


process.egammaHighLevelRecoPostPF = cms.Sequence(process.interestingEgammaIsoDetIds+process.egmIsolationSequence+process.photonIDSequence+process.photonIDSequenceGED+process.eIdSequence+process.hfEMClusteringSequence)


process.ecalClusters = cms.Sequence(process.ecalClustersNoPFBox+process.particleFlowSuperClusteringSequence)


process.muonPFIsolationSequence = cms.Sequence(process.muonPFIsolationDepositsSequence+process.muPFIsoValueCharged03+process.muPFMeanDRIsoValueCharged03+process.muPFSumDRIsoValueCharged03+process.muPFIsoValueChargedAll03+process.muPFMeanDRIsoValueChargedAll03+process.muPFSumDRIsoValueChargedAll03+process.muPFIsoValueGamma03+process.muPFMeanDRIsoValueGamma03+process.muPFSumDRIsoValueGamma03+process.muPFIsoValueNeutral03+process.muPFMeanDRIsoValueNeutral03+process.muPFSumDRIsoValueNeutral03+process.muPFIsoValueGammaHighThreshold03+process.muPFMeanDRIsoValueGammaHighThreshold03+process.muPFSumDRIsoValueGammaHighThreshold03+process.muPFIsoValueNeutralHighThreshold03+process.muPFMeanDRIsoValueNeutralHighThreshold03+process.muPFSumDRIsoValueNeutralHighThreshold03+process.muPFIsoValuePU03+process.muPFMeanDRIsoValuePU03+process.muPFSumDRIsoValuePU03+process.muPFIsoValueCharged04+process.muPFMeanDRIsoValueCharged04+process.muPFSumDRIsoValueCharged04+process.muPFIsoValueChargedAll04+process.muPFMeanDRIsoValueChargedAll04+process.muPFSumDRIsoValueChargedAll04+process.muPFIsoValueGamma04+process.muPFMeanDRIsoValueGamma04+process.muPFSumDRIsoValueGamma04+process.muPFIsoValueNeutral04+process.muPFMeanDRIsoValueNeutral04+process.muPFSumDRIsoValueNeutral04+process.muPFIsoValueGammaHighThreshold04+process.muPFMeanDRIsoValueGammaHighThreshold04+process.muPFSumDRIsoValueGammaHighThreshold04+process.muPFIsoValueNeutralHighThreshold04+process.muPFMeanDRIsoValueNeutralHighThreshold04+process.muPFSumDRIsoValueNeutralHighThreshold04+process.muPFIsoValuePU04+process.muPFMeanDRIsoValuePU04+process.muPFSumDRIsoValuePU04)


process.recoJetAssociations = cms.Sequence(process.ak4JTA)


process.ckftracks = cms.Sequence(process.iterTracking+process.electronSeedsSeq+process.doAlldEdXEstimators)


process.egammaHighLevelRecoPrePF = cms.Sequence(process.gsfEcalDrivenElectronSequence+process.uncleanedOnlyElectronSequence+process.conversionSequence+process.photonSequence)


process.produceAndDiscriminateHPSPFTaus = cms.Sequence(process.produceHPSPFTaus+process.hpsPFTauDiscriminationByDecayModeFindingNewDMs+process.hpsPFTauDiscriminationByDecayModeFindingOldDMs+process.hpsPFTauDiscriminationByDecayModeFinding+process.hpsPFTauDiscriminationByChargedIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByLooseElectronRejection+process.hpsPFTauDiscriminationByMediumElectronRejection+process.hpsPFTauDiscriminationByTightElectronRejection+process.hpsPFTauDiscriminationByMVA5rawElectronRejection+process.hpsPFTauDiscriminationByMVA5VLooseElectronRejection+process.hpsPFTauDiscriminationByMVA5LooseElectronRejection+process.hpsPFTauDiscriminationByMVA5MediumElectronRejection+process.hpsPFTauDiscriminationByMVA5TightElectronRejection+process.hpsPFTauDiscriminationByMVA5VTightElectronRejection+process.hpsPFTauDiscriminationByDeadECALElectronRejection+process.hpsPFTauDiscriminationByLooseMuonRejection+process.hpsPFTauDiscriminationByMediumMuonRejection+process.hpsPFTauDiscriminationByTightMuonRejection+process.hpsPFTauDiscriminationByLooseMuonRejection2+process.hpsPFTauDiscriminationByMediumMuonRejection2+process.hpsPFTauDiscriminationByTightMuonRejection2+process.hpsPFTauDiscriminationByLooseMuonRejection3+process.hpsPFTauDiscriminationByTightMuonRejection3+process.hpsPFTauDiscriminationByMVArawMuonRejection+process.hpsPFTauDiscriminationByMVALooseMuonRejection+process.hpsPFTauDiscriminationByMVAMediumMuonRejection+process.hpsPFTauDiscriminationByMVATightMuonRejection+process.hpsPFTauVertexAndImpactParametersSeq+process.hpsPFTauMVAIsolation2Seq)


process.muIsolation_muons = cms.Sequence(process.muIsoDeposits_muons)


process.particleFlowEGammaFinal = cms.Sequence(process.gedPhotonSequence+process.gedElectronPFIsoSequence)


process.muIsolation = cms.Sequence(process.muIsolation_muons)


process.trackingGlobalReco = cms.Sequence(process.ckftracks+process.trackExtrapolator)


process.displacedGlobalMuonTracking = cms.Sequence(process.iterDisplcedTracking+process.displacedGlobalMuons)


process.recoJPTJets = cms.Sequence(process.jetPlusTrackZSPCorJetAntiKt4)


process.particleFlowReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex+process.pfGsfElectronMVASelectionSequence+process.particleFlowBlock+process.particleFlowEGammaFull+process.particleFlowTmp+process.particleFlowTmpPtrs+process.particleFlowEGammaFinal+process.pfParticleSelectionSequence)


process.recoTauClassicHPSSequence = cms.Sequence(process.ak4PFJetsLegacyHPSPiZeros+process.ak4PFJetsRecoTauChargedHadrons+process.combinatoricRecoTaus+process.produceAndDiscriminateHPSPFTaus)


process.PFTau = cms.Sequence(process.recoTauCommonSequence+process.recoTauClassicHPSSequence)


process.muonshighlevelreco = cms.Sequence(process.muonPFIsolationSequence+process.muons)


process.globalmuontracking = cms.Sequence(process.globalMuons+process.tevMuons+process.displacedGlobalMuonTracking)


process.jetHighLevelReco = cms.Sequence(process.recoPFJets+process.recoJetAssociations+process.recoJetAssociationsExplicit+process.recoJPTJets)


process.muonGlobalReco = cms.Sequence(process.globalmuontracking+process.muonIdProducerSequence+process.muonSelectionTypeSequence+process.muIsolation+process.muonreco_with_SET)


process.highlevelreco = cms.Sequence(process.egammaHighLevelRecoPrePF+process.particleFlowReco+process.egammaHighLevelRecoPostPF+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.metrecoPlusHCALNoise+process.btagging+process.recoPFMET+process.PFTau+process.reducedRecHits)


process.globalreco = cms.Sequence(process.offlineBeamSpot+process.MeasurementTrackerEventPreSplitting+process.siPixelClusterShapeCachePreSplitting+process.standalonemuontracking+process.trackingGlobalReco+process.vertexreco+process.hcalGlobalRecoSequence+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.egammaGlobalReco+process.jetGlobalReco+process.muonGlobalReco+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco)


process.reconstruction = cms.Sequence(process.localreco+process.globalreco+process.highlevelreco+process.logErrorHarvester)


process.raw2digi_step = cms.Path()


process.L1Reco_step = cms.Path()


process.reconstruction_step = cms.Path(process.jetsForCoreTrackingPreSplitting+process.siPixelClusters+process.siPixelRecHits+process.siPixelClusterShapeCache+process.initialStepSeeds+process.initialStepTrackCandidates+process.initialStepTracks+process.firstStepPrimaryVertices+process.initialStepSelector+process.initialStep+process.detachedTripletStepClusters+process.detachedTripletStepSeedLayers+process.detachedTripletStepSeeds+process.detachedTripletStepTrackCandidates+process.detachedTripletStepTracks+process.detachedTripletStepSelector+process.detachedTripletStep+process.lowPtTripletStepClusters+process.lowPtTripletStepSeedLayers+process.lowPtTripletStepSeeds+process.lowPtTripletStepTrackCandidates+process.lowPtTripletStepTracks+process.lowPtTripletStepSelector+process.pixelPairStepClusters+process.pixelPairStepSeedLayers+process.pixelPairStepSeeds+process.pixelPairStepTrackCandidates+process.pixelPairStepTracks+process.pixelPairStepSelector+process.chargeCut2069Clusters+process.mixedTripletStepClusters+process.mixedTripletStepSeedLayersA+process.mixedTripletStepSeedsA+process.mixedTripletStepSeedLayersB+process.mixedTripletStepSeedsB+process.mixedTripletStepSeeds+process.mixedTripletStepTrackCandidates+process.mixedTripletStepTracks+process.mixedTripletStepSelector+process.mixedTripletStep+process.pixelLessStepClusters+process.pixelLessStepSeedLayers+process.pixelLessStepSeeds+process.pixelLessStepTrackCandidates+process.pixelLessStepTracks+process.pixelLessStepSelector+process.pixelLessStep+process.tobTecStepClusters+process.tobTecStepSeedLayersTripl+process.tobTecStepSeedsTripl+process.tobTecStepSeedLayersPair+process.tobTecStepSeedsPair+process.tobTecStepSeeds+process.tobTecStepTrackCandidates+process.tobTecStepTracks+process.tobTecStepSelector+process.initialStepTrackRefsForJets+process.ak4CaloJetsForTrk+process.jetsForCoreTracking+process.firstStepGoodPrimaryVertices+process.jetCoreRegionalStepSeeds+process.jetCoreRegionalStepTrackCandidates+process.jetCoreRegionalStepTracks+process.jetCoreRegionalStepSelector+process.earlyGeneralTracks+process.earlyMuons+process.muonSeededSeedsInOut+process.muonSeededTrackCandidatesInOut+process.muonSeededTracksInOut+process.muonSeededSeedsOutIn+process.muonSeededTrackCandidatesOutIn+process.muonSeededTracksOutIn+process.muonSeededTracksInOutSelector+process.muonSeededTracksOutInSelector+process.preDuplicateMergingGeneralTracks+process.duplicateTrackCandidates+process.mergedDuplicateTracks+process.duplicateTrackSelector+process.generalTracks+process.convClusters+process.convLayerPairs+process.photonConvTrajSeedFromSingleLeg+process.convTrackCandidates+process.convStepTracks+process.convStepSelector+process.conversionStepTracks+process.initialStepSeedClusterMask+process.pixelPairStepSeedClusterMask+process.mixedTripletStepSeedClusterMask+process.pixelLessStepSeedClusterMask+process.tripletElectronSeedLayers+process.tripletElectronSeeds+process.tripletElectronClusterMask+process.pixelPairElectronSeedLayers+process.pixelPairElectronSeeds+process.stripPairElectronSeedLayers+process.stripPairElectronSeeds+process.newCombinedSeeds+process.dedxTruncated40+process.dedxHarmonic2+process.dedxHitInfo+process.trackExtrapolator+process.unsortedOfflinePrimaryVertices+process.trackWithVertexRefSelectorBeforeSorting+process.trackRefsForJetsBeforeSorting+process.ak4CaloJetsForTrk+process.offlinePrimaryVertices+process.offlinePrimaryVerticesWithBS+process.generalV0Candidates+process.inclusiveVertexFinder+process.vertexMerger+process.trackVertexArbitrator+process.inclusiveSecondaryVertices+process.hbhereco+process.particleFlowRecHitHBHE+process.particleFlowClusterHBHE+process.particleFlowClusterHCAL+process.particleFlowSuperClusterECAL+process.towerMaker+process.towerMakerWithHO+process.trackerDrivenElectronSeeds+process.ecalDrivenElectronSeeds+process.electronMergedSeeds+process.electronCkfTrackCandidates+process.electronGsfTracks+process.conversionTrackCandidates+process.ckfOutInTracksFromConversions+process.ckfInOutTracksFromConversions+process.allConversions+process.fixedGridRhoFastjetAllCalo+process.fixedGridRhoFastjetCentralCalo+process.ak4CaloJets+process.ak4JetID+process.trackWithVertexRefSelector+process.trackRefsForJets+process.ak4TrackJets+process.globalMuons+process.tevMuons+process.earlyDisplacedMuons+process.muonSeededSeedsInOut+process.muonSeededTrackCandidatesInOut+process.muonSeededTracksInOut+process.muonSeededSeedsOutInDisplaced+process.muonSeededTrackCandidatesOutInDisplaced+process.muonSeededTracksOutInDisplaced+process.muonSeededTracksInOutSelector+process.muonSeededTracksOutInDisplacedSelector+process.preDuplicateMergingDisplacedTracks+process.duplicateDisplacedTrackCandidates+process.mergedDuplicateDisplacedTracks+process.duplicateDisplacedTrackSelector+process.displacedTracks+process.displacedGlobalMuons+process.glbTrackQual+process.muons1stStep+process.calomuons+process.muonEcalDetIds+process.muonShowerInformation+process.muidTrackerMuonArbitrated+process.muidAllArbitrated+process.muidGlobalMuonPromptTight+process.muidTMLastStationLoose+process.muidTMLastStationTight+process.muidTM2DCompatibilityLoose+process.muidTM2DCompatibilityTight+process.muidTMOneStationLoose+process.muidTMOneStationTight+process.muidTMLastStationOptimizedLowPtLoose+process.muidTMLastStationOptimizedLowPtTight+process.muidGMTkChiCompatibility+process.muidGMStaChiCompatibility+process.muidGMTkKinkTight+process.muidTMLastStationAngLoose+process.muidTMLastStationAngTight+process.muidTMOneStationAngLoose+process.muidTMOneStationAngTight+process.muidRPCMuLoose+process.muIsoDepositTk+process.muIsoDepositCalByAssociatorTowers+process.muIsoDepositJets+process.globalSETMuons+process.pfTrack+process.pfConversions+process.pfV0+process.particleFlowDisplacedVertexCandidate+process.particleFlowDisplacedVertex+process.pfDisplacedTrackerVertex+process.pfTrackElec+process.ak5CastorJets+process.ak5CastorJetID+process.ak7CastorJets+process.ak7CastorJetID+process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons+process.uncleanedOnlyElectronSeeds+process.uncleanedOnlyElectronCkfTrackCandidates+process.uncleanedOnlyElectronGsfTracks+process.uncleanedOnlyConversionTrackCandidates+process.uncleanedOnlyCkfOutInTracksFromConversions+process.uncleanedOnlyCkfInOutTracksFromConversions+process.uncleanedOnlyAllConversions+process.uncleanedOnlyPfTrack+process.uncleanedOnlyPfConversions+process.uncleanedOnlyPfTrackElec+process.uncleanedOnlyGsfElectronCores+process.uncleanedOnlyGsfElectrons+process.conversions+process.photonCore+process.photons+process.pfTrack+process.pfConversions+process.pfV0+process.particleFlowDisplacedVertexCandidate+process.particleFlowDisplacedVertex+process.pfDisplacedTrackerVertex+process.pfTrackElec+process.electronsWithPresel+process.mvaElectrons+process.particleFlowBlock+process.particleFlowEGamma+process.gedGsfElectronCores+process.gedGsfElectronsTmp+process.gedPhotonCore+process.gedPhotonsTmp+process.particleFlowTmp+process.particleFlowTmpPtrs+process.gedPhotons+process.pfPileUpIso+process.pfNoPileUpIso+process.pfPileUp+process.pfNoPileUp+process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons+process.gedElPFIsoDepositCharged+process.gedElPFIsoDepositChargedAll+process.gedElPFIsoDepositGamma+process.gedElPFIsoDepositNeutral+process.gedElPFIsoDepositPU+process.gedElPFIsoValueCharged03+process.gedElPFIsoValueChargedAll03+process.gedElPFIsoValueGamma03+process.gedElPFIsoValueNeutral03+process.gedElPFIsoValuePU03+process.gedGsfElectrons+process.pfPileUpIso+process.pfNoPileUpIso+process.pfPileUp+process.pfNoPileUp+process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons+process.interestingGedEleIsoDetIdEB+process.interestingGedEleIsoDetIdEE+process.interestingGedGamIsoDetIdEB+process.interestingGedGamIsoDetIdEE+process.interestingGamIsoDetIdEB+process.interestingGamIsoDetIdEE+process.interestingGedEgammaIsoHCALDetId+process.interestingGedEgammaIsoESDetId+process.pfPileUpIso+process.pfNoPileUpIso+process.pfPileUp+process.pfNoPileUp+process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons+process.pfNoPileUpCandidates+process.egmGedGsfElectronPFNoPileUpIsolation+process.egmGedGsfElectronPFPileUpIsolation+process.electronEcalPFClusterIsolationProducer+process.photonEcalPFClusterIsolationProducer+process.electronHcalPFClusterIsolationProducer+process.photonHcalPFClusterIsolationProducer+process.eidRobustLoose+process.eidRobustTight+process.eidRobustHighEnergy+process.eidLoose+process.eidTight+process.hfRecoEcalCandidate+process.muonsFromCosmics+process.muonsFromCosmics1Leg+process.cosmicsVetoSeeds+process.cosmicsVetoTrackCandidates+process.cosmicsVetoTracksRaw+process.cosmicsVetoTracks+process.cosmicsVeto+process.muPFIsoDepositCharged+process.muPFIsoDepositChargedAll+process.muPFIsoDepositGamma+process.muPFIsoDepositNeutral+process.muPFIsoDepositPU+process.muPFIsoValueCharged03+process.muPFMeanDRIsoValueCharged03+process.muPFSumDRIsoValueCharged03+process.muPFIsoValueChargedAll03+process.muPFMeanDRIsoValueChargedAll03+process.muPFSumDRIsoValueChargedAll03+process.muPFIsoValueGamma03+process.muPFMeanDRIsoValueGamma03+process.muPFSumDRIsoValueGamma03+process.muPFIsoValueNeutral03+process.muPFMeanDRIsoValueNeutral03+process.muPFSumDRIsoValueNeutral03+process.muPFIsoValueGammaHighThreshold03+process.muPFMeanDRIsoValueGammaHighThreshold03+process.muPFSumDRIsoValueGammaHighThreshold03+process.muPFIsoValueNeutralHighThreshold03+process.muPFMeanDRIsoValueNeutralHighThreshold03+process.muPFSumDRIsoValueNeutralHighThreshold03+process.muPFIsoValuePU03+process.muPFMeanDRIsoValuePU03+process.muPFSumDRIsoValuePU03+process.muPFIsoValueCharged04+process.muPFMeanDRIsoValueCharged04+process.muPFSumDRIsoValueCharged04+process.muPFIsoValueChargedAll04+process.muPFMeanDRIsoValueChargedAll04+process.muPFSumDRIsoValueChargedAll04+process.muPFIsoValueGamma04+process.muPFMeanDRIsoValueGamma04+process.muPFSumDRIsoValueGamma04+process.muPFIsoValueNeutral04+process.muPFMeanDRIsoValueNeutral04+process.muPFSumDRIsoValueNeutral04+process.muPFIsoValueGammaHighThreshold04+process.muPFMeanDRIsoValueGammaHighThreshold04+process.muPFSumDRIsoValueGammaHighThreshold04+process.muPFIsoValueNeutralHighThreshold04+process.muPFMeanDRIsoValueNeutralHighThreshold04+process.muPFSumDRIsoValueNeutralHighThreshold04+process.muPFIsoValuePU04+process.muPFMeanDRIsoValuePU04+process.muPFSumDRIsoValuePU04+process.muons+process.particleFlow+process.particleFlowPtrs+process.particleBasedIsolation+process.fixedGridRhoAll+process.fixedGridRhoFastjetAll+process.fixedGridRhoFastjetCentralChargedPileUp+process.fixedGridRhoFastjetCentralNeutral+process.ak4PFJets+process.goodOfflinePrimaryVertices+process.pfPileUpJME+process.pfNoPileUpJME+process.ak4PFJetsCHS+process.ak8PFJetsCHS+process.ak8PFJetsCHSConstituents+process.ak8PFJetsCHSSoftDrop+process.ak8PFJetsCHSSoftDropMass+process.cmsTopTagPFJetsCHS+process.ak4JetTracksAssociatorAtVertexPF+process.ak4JetTracksAssociatorAtVertex+process.ak4JetTracksAssociatorAtCaloFace+process.ak4JetExtender+process.ak4JetTracksAssociatorExplicit+process.JPTeidTight+process.ak4JetTracksAssociatorAtVertexJPT+process.JetPlusTrackZSPCorJetAntiKt4+process.caloMet+process.caloMetBE+process.caloMetBEFO+process.muonMETValueMapProducer+process.caloMetM+process.CSCHaloData+process.EcalHaloData+process.HcalHaloData+process.GlobalHaloData+process.BeamHaloSummary+process.impactParameterTagInfos+process.trackCountingHighEffBJetTags+process.trackCountingHighPurBJetTags+process.jetProbabilityBJetTags+process.jetBProbabilityBJetTags+process.secondaryVertexTagInfos+process.simpleSecondaryVertexHighEffBJetTags+process.simpleSecondaryVertexHighPurBJetTags+process.combinedSecondaryVertexBJetTags+process.inclusiveSecondaryVertexFinderTagInfos+process.combinedInclusiveSecondaryVertexV2BJetTags+process.ghostTrackVertexTagInfos+process.ghostTrackBJetTags+process.softPFMuonsTagInfos+process.softPFMuonBJetTags+process.softPFElectronsTagInfos+process.softPFElectronBJetTags+process.combinedMVABJetTags+process.pfImpactParameterTagInfos+process.pfTrackCountingHighEffBJetTags+process.pfTrackCountingHighPurBJetTags+process.pfJetProbabilityBJetTags+process.pfJetBProbabilityBJetTags+process.pfSecondaryVertexTagInfos+process.pfSimpleSecondaryVertexHighEffBJetTags+process.pfSimpleSecondaryVertexHighPurBJetTags+process.pfCombinedSecondaryVertexBJetTags+process.pfCombinedSecondaryVertexV2BJetTags+process.inclusiveCandidateVertexFinder+process.candidateVertexMerger+process.candidateVertexArbitrator+process.inclusiveCandidateSecondaryVertices+process.pfInclusiveSecondaryVertexFinderTagInfos+process.pfCombinedInclusiveSecondaryVertexV2BJetTags+process.softPFMuonsTagInfos+process.softPFMuonBJetTags+process.softPFElectronsTagInfos+process.softPFElectronBJetTags+process.pfCombinedMVABJetTags+process.pfCombinedSecondaryVertexSoftLeptonBJetTags+process.pfMet+process.particleFlowForChargedMET+process.pfChMet+process.ak4PFJetTracksAssociatorAtVertex+process.recoTauAK4PFJets08Region+process.recoTauPileUpVertices+process.pfRecoTauTagInfoProducer+process.ak4PFJetsLegacyHPSPiZeros+process.ak4PFJetsRecoTauChargedHadrons+process.combinatoricRecoTaus+process.hpsSelectionDiscriminator+process.hpsPFTauProducerSansRefs+process.hpsPFTauProducer+process.hpsPFTauDiscriminationByDecayModeFindingNewDMs+process.hpsPFTauDiscriminationByDecayModeFindingOldDMs+process.hpsPFTauDiscriminationByDecayModeFinding+process.hpsPFTauDiscriminationByVLooseChargedIsolation+process.hpsPFTauDiscriminationByLooseChargedIsolation+process.hpsPFTauDiscriminationByMediumChargedIsolation+process.hpsPFTauDiscriminationByTightChargedIsolation+process.hpsPFTauDiscriminationByVLooseIsolation+process.hpsPFTauDiscriminationByLooseIsolation+process.hpsPFTauDiscriminationByMediumIsolation+process.hpsPFTauDiscriminationByTightIsolation+process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByLooseElectronRejection+process.hpsPFTauDiscriminationByMediumElectronRejection+process.hpsPFTauDiscriminationByTightElectronRejection+process.hpsPFTauDiscriminationByMVA5rawElectronRejection+process.hpsPFTauDiscriminationByMVA5VLooseElectronRejection+process.hpsPFTauDiscriminationByMVA5LooseElectronRejection+process.hpsPFTauDiscriminationByMVA5MediumElectronRejection+process.hpsPFTauDiscriminationByMVA5TightElectronRejection+process.hpsPFTauDiscriminationByMVA5VTightElectronRejection+process.hpsPFTauDiscriminationByDeadECALElectronRejection+process.hpsPFTauDiscriminationByLooseMuonRejection+process.hpsPFTauDiscriminationByMediumMuonRejection+process.hpsPFTauDiscriminationByTightMuonRejection+process.hpsPFTauDiscriminationByLooseMuonRejection2+process.hpsPFTauDiscriminationByMediumMuonRejection2+process.hpsPFTauDiscriminationByTightMuonRejection2+process.hpsPFTauDiscriminationByLooseMuonRejection3+process.hpsPFTauDiscriminationByTightMuonRejection3+process.hpsPFTauDiscriminationByMVArawMuonRejection+process.hpsPFTauDiscriminationByMVALooseMuonRejection+process.hpsPFTauDiscriminationByMVAMediumMuonRejection+process.hpsPFTauDiscriminationByMVATightMuonRejection+process.hpsPFTauPrimaryVertexProducer+process.hpsPFTauSecondaryVertexProducer+process.hpsPFTauTransverseImpactParameters+process.hpsPFTauMVA3IsolationChargedIsoPtSum+process.hpsPFTauMVA3IsolationNeutralIsoPtSum+process.hpsPFTauMVA3IsolationPUcorrPtSum+process.hpsPFTauDiscriminationByIsolationMVA3oldDMwoLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByTightIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwoLT+process.hpsPFTauDiscriminationByIsolationMVA3oldDMwLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByTightIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwLT+process.hpsPFTauDiscriminationByIsolationMVA3newDMwoLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByTightIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwoLT+process.hpsPFTauDiscriminationByIsolationMVA3newDMwLTraw+process.hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByLooseIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByMediumIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByTightIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByVTightIsolationMVA3newDMwLT+process.hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwLT+process.interestingEcalDetIdPFEB+process.interestingEcalDetIdPFEE+process.interestingEcalDetIdPFES+process.interestingEcalDetIdRefinedEB+process.interestingEcalDetIdRefinedEE+process.interestingEcalDetIdRefinedES+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.reducedEcalRecHitsES+process.reducedHcalRecHits)


process.stats = cms.Path(process.dqmPrintStats)


process.dqmoffline_step = cms.Path(process.dqmFillerLegacy+process.dqmFillerNew)


process.RECOSIMoutput_step = cms.EndPath(process.RECOSIMoutput)


process.MINIAODSIMoutput_step = cms.EndPath(process.MINIAODSIMoutput)


process.DQMoutput_step = cms.EndPath(process.DQMoutput)


process.DBService = cms.Service("DBService")


process.DQMStore = cms.Service("DQMStore")



process.MessageLogger = cms.Service("MessageLogger",
    FrameworkJobReport = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring('FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary'),
    cerr = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        FwkReport = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1)
        ),
        FwkSummary = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1)
        ),
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        noTimeStamps = cms.untracked.bool(False),
        optionalPSet = cms.untracked.bool(True),
        threshold = cms.untracked.string('INFO')
    ),
    cerr_stats = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        output = cms.untracked.string('cerr'),
        threshold = cms.untracked.string('WARNING')
    ),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    debugModules = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    destinations = cms.untracked.vstring('warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport'),
    infos = cms.untracked.PSet(
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        optionalPSet = cms.untracked.bool(True),
        placeholder = cms.untracked.bool(True)
    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    suppressDebug = cms.untracked.vstring(),
    suppressInfo = cms.untracked.vstring(),
    suppressWarning = cms.untracked.vstring('particleFlowDisplacedVertexCandidate'),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    )
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    LHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    MuonSimHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(987346)
    ),
    VtxSmeared = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(98765432)
    ),
    ecalPreshowerRecHit = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(6541321)
    ),
    ecalRecHit = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(654321)
    ),
    externalLHEProducer = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(234567)
    ),
    famosPileUp = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    famosSimHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(13579)
    ),
    g4SimHits = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11)
    ),
    generator = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hbhereco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hfreco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hiSignal = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hiSignalG4SimHits = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11)
    ),
    hiSignalLHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(88776655)
    ),
    horeco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    l1ParamMuons = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(6453209)
    ),
    mix = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixData = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixGenPU = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixRecoTracks = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixSimCaloHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    paramMuons = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(54525)
    ),
    restoreStateLabel = cms.untracked.string('randomEngineStateProducer'),
    saveFileName = cms.untracked.string(''),
    siTrackerGaussianSmearingRecHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(24680)
    ),
    simBeamSpotFilter = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    simMuonCSCDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11223344)
    ),
    simMuonDTDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonRPCDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simSiStripDigiSimLink = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    )
)


process.SiStripDetInfoFileReader = cms.Service("SiStripDetInfoFileReader")


process.TkDetMap = cms.Service("TkDetMap")


process.AnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.AnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMf'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('anyDirection')
)


process.BeamHaloMPropagatorAlong = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('BeamHaloMPropagatorAlong'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(10000),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloMPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('BeamHaloMPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(10000),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloPropagatorAlong = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAlong'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAlong'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum')
)


process.BeamHaloPropagatorAny = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAny'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAny'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong'),
    PropagationDirection = cms.string('anyDirection')
)


process.BeamHaloPropagatorOpposite = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorOpposite'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorOpposite'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.BeamHaloSHPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.BeamHaloSHPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.BeamHaloSHPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.CSCChannelMapperESProducer = cms.ESProducer("CSCChannelMapperESProducer",
    AlgoName = cms.string('CSCChannelMapperPostls1')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.CSCIndexerESProducer = cms.ESProducer("CSCIndexerESProducer",
    AlgoName = cms.string('CSCIndexerPostls1')
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring('HCAL', 
        'ZDC', 
        'CASTOR', 
        'EcalBarrel', 
        'EcalEndcap', 
        'EcalPreshower', 
        'TOWER')
)


process.CaloTPGTranscoder = cms.ESProducer("CaloTPGTranscoderULUTs",
    LUTfactor = cms.vint32(1, 2, 5, 0),
    RCTLSB = cms.double(0.25),
    ZS = cms.vint32(4, 2, 1, 0),
    hcalLUT1 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/outputLUTtranscoder_physics.dat'),
    hcalLUT2 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/TPGcalcDecompress2.txt'),
    ietaLowerBound = cms.vint32(1, 18, 27, 29),
    ietaUpperBound = cms.vint32(17, 26, 28, 32),
    nominal_gain = cms.double(0.177),
    read_Ascii_Compression_LUTs = cms.bool(False),
    read_Ascii_RCT_LUTs = cms.bool(False)
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz'),
    appendToDataLabel = cms.string('')
)


process.CaloTowerGeometryFromDBEP = cms.ESProducer("CaloTowerGeometryFromDBEP",
    applyAlignment = cms.bool(False),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.CastorDbProducer = cms.ESProducer("CastorDbProducer")


process.CastorGeometryFromDBEP = cms.ESProducer("CastorGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.Chi2EstimatorForMuRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuRefit'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0)
)


process.Chi2EstimatorForMuonTrackLoader = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuonTrackLoader'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0)
)


process.Chi2EstimatorForRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForRefit'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0)
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.Chi2MeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2ForInOut'),
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(3.0)
)


process.Chi2MeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2ForOutIn'),
    MaxChi2 = cms.double(500.0),
    nSigma = cms.double(3.0)
)


process.CloseComponentsMerger5D = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger5D'),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D'),
    MaxComponents = cms.int32(12)
)


process.CloseComponentsMerger_forPreId = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger_forPreId'),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D'),
    MaxComponents = cms.int32(4)
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)


process.CosmicParametersDefinerForTP = cms.ESProducer("CosmicParametersDefinerForTPESProducer",
    ComponentName = cms.string('CosmicParametersDefinerForTP')
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(False)
)


process.DummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('DummyDetLayerGeometry')
)


process.EcalBarrelGeometryFromDBEP = cms.ESProducer("EcalBarrelGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryFromDBEP = cms.ESProducer("EcalEndcapGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalPreshowerGeometryFromDBEP = cms.ESProducer("EcalPreshowerGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.ElectronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('ElectronChi2'),
    MaxChi2 = cms.double(2000.0),
    nSigma = cms.double(3.0)
)


process.ElectronMaterialEffects = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerCorrection = cms.int32(2),
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC6_O5.par'),
    ComponentName = cms.string('ElectronMaterialEffects'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    Mass = cms.double(0.000511),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator')
)


process.ElectronMaterialEffects_forPreId = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerCorrection = cms.int32(2),
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC3_O5.par'),
    ComponentName = cms.string('ElectronMaterialEffects_forPreId'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    Mass = cms.double(0.000511),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator')
)


process.EstimatorForSTA = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2STA'),
    MaxChi2 = cms.double(1000.0),
    nSigma = cms.double(3.0)
)


process.FittingSmootherRKP5 = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('FittingSmootherRKP5'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(4),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.FlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('FlexibleKFFittingSmoother'),
    looperFitter = cms.string('LooperFittingSmoother'),
    standardFitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK')
)


process.GlbMuKFFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('GlbMuKFFitter'),
    Estimator = cms.string('Chi2EstimatorForMuRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.GsfElectronFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('GsfElectronFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('GsfTrajectoryFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('GsfTrajectorySmoother')
)


process.GsfTrajectoryFitter = cms.ESProducer("GsfTrajectoryFitterESProducer",
    ComponentName = cms.string('GsfTrajectoryFitter'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectoryFitter_forPreId = cms.ESProducer("GsfTrajectoryFitterESProducer",
    ComponentName = cms.string('GsfTrajectoryFitter_forPreId'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectorySmoother = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ComponentName = cms.string('GsfTrajectorySmoother'),
    ErrorRescaling = cms.double(100.0),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectorySmoother_forPreId = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ComponentName = cms.string('GsfTrajectorySmoother_forPreId'),
    ErrorRescaling = cms.double(100.0),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.HcalAlignmentEP = cms.ESProducer("HcalAlignmentEP")


process.HcalGeometryFromDBEP = cms.ESProducer("HcalGeometryFromDBEP",
    applyAlignment = cms.bool(True),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.HcalTPGCoderULUT = cms.ESProducer("HcalTPGCoderULUT",
    FGLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/HBHE_FG_LUT.dat'),
    LUTGenerationMode = cms.bool(False),
    MaskBit = cms.int32(32768),
    RCalibFile = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/RecHit-TPG-calib.dat'),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    ),
    inputLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/inputLUTcoder_physics.dat'),
    read_Ascii_LUTs = cms.bool(False),
    read_FG_LUTs = cms.bool(False),
    read_XML_LUTs = cms.bool(False)
)


process.HcalTrigTowerGeometryESProducer = cms.ESProducer("HcalTrigTowerGeometryESProducer")


process.KFFitterForRefitInsideOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFFitterForRefitOutsideIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFFittingSmootheForSTA = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFitterSmootherSTA'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('KFFitterSTA'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherSTA')
)


process.KFFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('KFFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmoother')
)


process.KFFittingSmootherBeamHalo = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherBH'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('KFFitterBH'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherBH')
)


process.KFFittingSmootherForInOut = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherForInOut'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('KFFitterForInOut'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherForInOut')
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.KFSmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoader'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForMuonTrackLoaderL3 = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoaderL3'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitInsideOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitOutsideIn = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSwitching1DUpdatorESProducer = cms.ESProducer("KFSwitching1DUpdatorESProducer",
    ComponentName = cms.string('KFSwitching1DUpdator'),
    doEndCap = cms.bool(False)
)


process.KFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterBeamHalo = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterBH'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForInOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Propagator = cms.string('alongMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForOutIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForOutIn'),
    Estimator = cms.string('Chi2ForOutIn'),
    Propagator = cms.string('alongMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForSTA = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherBeamHalo = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherBH'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherForInOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Propagator = cms.string('oppositeToMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherForSTA = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.KullbackLeiblerDistance5D = cms.ESProducer("DistanceBetweenComponentsESProducer5D",
    ComponentName = cms.string('KullbackLeiblerDistance5D'),
    DistanceMeasure = cms.string('KullbackLeibler')
)


process.L1DTConfigFromDB = cms.ESProducer("DTConfigDBProducer",
    DTTPGMap = cms.untracked.PSet(
        wh0st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh0st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh0st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh0st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se4 = cms.untracked.vint32(50, 48, 50, 13),
        wh1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se4 = cms.untracked.vint32(60, 48, 60, 15),
        wh1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se4 = cms.untracked.vint32(72, 48, 72, 18),
        wh1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se3 = cms.untracked.vint32(50, 48, 50, 13),
        whm1st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se3 = cms.untracked.vint32(60, 48, 60, 15),
        whm1st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se3 = cms.untracked.vint32(72, 48, 72, 18),
        whm1st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se9 = cms.untracked.vint32(48, 0, 48, 12)
    ),
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    ),
    TracoLutsFromDB = cms.bool(True),
    UseBtiAcceptParam = cms.bool(True),
    UseT0 = cms.bool(False),
    bxOffset = cms.int32(19),
    cfgConfig = cms.bool(False),
    debug = cms.bool(False),
    debugBti = cms.int32(0),
    debugDB = cms.bool(False),
    debugLUTs = cms.bool(False),
    debugPed = cms.bool(False),
    debugSC = cms.bool(False),
    debugTSP = cms.bool(False),
    debugTST = cms.bool(False),
    debugTU = cms.bool(False),
    debugTraco = cms.int32(0),
    finePhase = cms.double(25.0)
)


process.LhcParametersDefinerForTP = cms.ESProducer("ParametersDefinerForTPESProducer",
    ComponentName = cms.string('LhcParametersDefinerForTP'),
    beamSpot = cms.untracked.InputTag("offlineBeamSpot")
)


process.LooperFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('LooperFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('LooperFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('LooperSmoother')
)


process.LooperTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('LooperFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.LooperTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('LooperSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.MRHChi2MeasurementEstimator = cms.ESProducer("MRHChi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('MRHChi2'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.MRHFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('MRHFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('MRHFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('MRHSmoother')
)


process.MRHTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('MRHFitter'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.MRHTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('MRHSmoother'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMf'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    )
)


process.MeasurementTrackerBottom = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string('MeasurementTrackerBottom'),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    ),
    pixelClusterProducer = cms.string('siPixelClustersBottom'),
    stripClusterProducer = cms.string('siStripClustersBottom')
)


process.MeasurementTrackerTop = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string('MeasurementTrackerTop'),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    ),
    pixelClusterProducer = cms.string('siPixelClustersTop'),
    stripClusterProducer = cms.string('siStripClustersTop')
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonTransientTrackingRecHitBuilderESProducer = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MuonRecHitBuilder')
)


process.OppositeAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.OppositeAnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMfOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.OppositeMaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.ParabolicParametrizedMagneticFieldProducer = cms.ESProducer("ParametrizedMagneticFieldProducer",
    label = cms.untracked.string('ParabolicMf'),
    parameters = cms.PSet(

    ),
    version = cms.string('Parabolic')
)


process.ParametrizedMagneticFieldProducer = cms.ESProducer("ParametrizedMagneticFieldProducer",
    label = cms.untracked.string('parametrizedField'),
    parameters = cms.PSet(
        BValue = cms.string('3_8T')
    ),
    version = cms.string('OAE_1103l_071212')
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPEGeneric'),
    DoCosmics = cms.bool(False),
    EdgeClusterErrorX = cms.double(50.0),
    EdgeClusterErrorY = cms.double(85.0),
    IrradiationBiasCorrection = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    MagneticFieldRecord = cms.ESInputTag(""),
    PixelErrorParametrization = cms.string('NOTcmsim'),
    TruncatePixelCharge = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    eff_charge_cut_highX = cms.double(1.0),
    eff_charge_cut_highY = cms.double(1.0),
    eff_charge_cut_lowX = cms.double(0.0),
    eff_charge_cut_lowY = cms.double(0.0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    inflate_errors = cms.bool(False),
    size_cutX = cms.double(3.0),
    size_cutY = cms.double(3.0),
    useLAAlignmentOffsets = cms.bool(False),
    useLAWidthFromDB = cms.bool(True)
)


process.PropagatorWithMaterialForLoopers = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopers'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForLoopersOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopersOpposite'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.RK1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RK1DFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother')
)


process.RK1DTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RK1DFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    minHits = cms.int32(3)
)


process.RK1DTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RK1DSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.RKOutliers1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKOutliers1DFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother')
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.RPCConeBuilder = cms.ESProducer("RPCConeBuilder",
    towerBeg = cms.int32(0),
    towerEnd = cms.int32(16)
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    compatibiltyWith11 = cms.untracked.bool(True),
    useDDD = cms.untracked.bool(False)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.RungeKuttaTrackerPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0),
    PreFilter = cms.bool(False)
)


process.SmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagator'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAny'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorAnyRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorAnyRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SmartPropagatorOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorL2Along = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Along'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Any = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Any'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Opposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Opposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2OppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2OppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorOppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.StraightLinePropagator = cms.ESProducer("StraightLinePropagatorESProducer",
    ComponentName = cms.string('StraightLinePropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.StripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('SimpleStripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle'),
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    parameters = cms.PSet(
        mLC_P0 = cms.double(-0.326),
        mLC_P1 = cms.double(0.618),
        mLC_P2 = cms.double(0.3),
        mTEC_P0 = cms.double(-1.885),
        mTEC_P1 = cms.double(0.471),
        mTIB_P0 = cms.double(-0.742),
        mTIB_P1 = cms.double(0.202),
        mTID_P0 = cms.double(-1.427),
        mTID_P1 = cms.double(0.433),
        mTOB_P0 = cms.double(-1.026),
        mTOB_P1 = cms.double(0.253),
        maxChgOneMIP = cms.double(6000.0),
        useLegacyError = cms.bool(False)
    )
)


process.TTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithAngleAndTemplate'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPETemplateReco'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TrajectoryCleanerBySharedHitsForConversions = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHitsForConversions'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.5)
)


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    cacheLastVolume = cms.untracked.bool(True),
    debugBuilder = cms.untracked.bool(False),
    geometryVersion = cms.int32(120812),
    gridFiles = cms.VPSet(cms.PSet(
        master = cms.int32(0),
        path = cms.string('s[s]_1/grid.[v].bin'),
        sectors = cms.string('0'),
        volumes = cms.string('1001-1010,1012-1027,1030-1033,1036-1041,1044-1049,1052-1057,1060-1063,1066-1071,1074-1077,1080-1083,1130-1133,1138-1360')
    ), 
        cms.PSet(
            master = cms.int32(0),
            path = cms.string('s[s]_2/grid.[v].bin'),
            sectors = cms.string('0'),
            volumes = cms.string('2001-2010,2012-2027,2030-2033,2036-2041,2044-2049,2052-2057,2060-2063,2066-2071,2074-2077,2080-2083,2130-2133,2138-2360')
        ), 
        cms.PSet(
            master = cms.int32(1),
            path = cms.string('s01_1/grid.[v].bin'),
            sectors = cms.string('0'),
            volumes = cms.string('1011,1028-1029,1034-1035,1042-1043,1050-1051,1058-1059,1064-1065,1072-1073,1078-1079,1084-1129,1136-1137')
        ), 
        cms.PSet(
            master = cms.int32(1),
            path = cms.string('s01_2/grid.[v].bin'),
            sectors = cms.string('0'),
            volumes = cms.string('2011,2028-2029,2034-2035,2042-2043,2050-2051,2058-2059,2064-2065,2072-2073,2078-2079,2084-2129,2136-2137')
        ), 
        cms.PSet(
            master = cms.int32(4),
            path = cms.string('s04_1/grid.[v].bin'),
            sectors = cms.string('0'),
            volumes = cms.string('1134-1135')
        ), 
        cms.PSet(
            master = cms.int32(4),
            path = cms.string('s04_2/grid.[v].bin'),
            sectors = cms.string('0'),
            volumes = cms.string('2134-2135')
        )),
    label = cms.untracked.string(''),
    paramLabel = cms.string('parametrizedField'),
    scalingFactors = cms.vdouble(),
    scalingVolumes = cms.vint32(),
    useParametrizedTrackerField = cms.bool(True),
    version = cms.string('grid_120812_3_8t_v7_large')
)


process.ZdcGeometryFromDBEP = cms.ESProducer("ZdcGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.ak4CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute')
)


process.ak4CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloL6SLB')
)


process.ak4CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloResidual')
)


process.ak4CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak4CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Offset', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute')
)


process.ak4CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Offset', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloResidual')
)


process.ak4CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL2Relative', 
        'ak4CaloL3Absolute')
)


process.ak4CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloL6SLB')
)


process.ak4CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloResidual')
)


process.ak4CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2Relative')
)


process.ak4CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L3Absolute')
)


process.ak4CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4CaloJetsSoftMuonTagInfos")
)


process.ak4CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak4JPTL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4JPTL1Fastjet', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute')
)


process.ak4JPTL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4JPTL1Fastjet', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute', 
        'ak4JPTResidual')
)


process.ak4JPTL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak4JPTL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute')
)


process.ak4JPTL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute', 
        'ak4JPTResidual')
)


process.ak4JPTL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4JPTL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute')
)


process.ak4JPTL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute', 
        'ak4JPTResidual')
)


process.ak4JPTL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2Relative')
)


process.ak4JPTL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L3Absolute')
)


process.ak4JPTResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2L3Residual')
)


process.ak4L1JPTOffset = cms.ESProducer("L1JPTOffsetCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1JPTOffset'),
    offsetService = cms.string('ak4CaloL1Offset')
)


process.ak4PFCHSL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Fastjet', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute')
)


process.ak4PFCHSL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Fastjet', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute', 
        'ak4PFCHSResidual')
)


process.ak4PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFCHSL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Offset', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute')
)


process.ak4PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Offset', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute', 
        'ak4PFCHSResidual')
)


process.ak4PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute')
)


process.ak4PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute', 
        'ak4PFCHSResidual')
)


process.ak4PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.ak4PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.ak4PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak4PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute')
)


process.ak4PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFL6SLB')
)


process.ak4PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFResidual')
)


process.ak4PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Offset', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute')
)


process.ak4PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Offset', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFResidual')
)


process.ak4PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL2Relative', 
        'ak4PFL3Absolute')
)


process.ak4PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFL6SLB')
)


process.ak4PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFResidual')
)


process.ak4PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2Relative')
)


process.ak4PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L3Absolute')
)


process.ak4PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4PFJetsSoftMuonTagInfos")
)


process.ak4PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2L3Residual')
)


process.ak4TrackL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4TrackL2Relative', 
        'ak4TrackL3Absolute')
)


process.ak4TrackL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L2Relative')
)


process.ak4TrackL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L3Absolute')
)


process.alongMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('alongMomElePropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.beamHaloNavigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('BeamHaloNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.bwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('bwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.bwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('bwdElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.bwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('bwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.caloStage1Params = cms.ESProducer("L1TCaloParamsESProducer",
    centralityLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/centralityLUT_stage1.txt'),
    egCalibrationLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egCalibrationLUT.txt'),
    egCompressShapesLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egCompressShapesLUT.txt'),
    egHcalThreshold = cms.double(1.0),
    egIsoAreaNrTowersEta = cms.uint32(2),
    egIsoAreaNrTowersPhi = cms.uint32(4),
    egIsoLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egIsoLUT_stage1_isolEB0.30_isolEE0.50_combined.txt'),
    egIsoMaxEtaAbsForIsoSum = cms.uint32(27),
    egIsoMaxEtaAbsForTowerSum = cms.uint32(4),
    egIsoPUEstTowerGranularity = cms.uint32(1),
    egIsoVetoNrTowersPhi = cms.uint32(3),
    egLsb = cms.double(1.0),
    egMaxHOverE = cms.double(0.15),
    egMaxHOverELUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egMaxHOverELUT.txt'),
    egMaxHcalEt = cms.double(0.0),
    egMaxPtHOverE = cms.double(128.0),
    egMaxPtHOverEIsolation = cms.int32(40),
    egMaxPtJetIsolation = cms.int32(63),
    egMinPtHOverEIsolation = cms.int32(1),
    egMinPtJetIsolation = cms.int32(25),
    egNeighbourThreshold = cms.double(1.0),
    egPUSParams = cms.vdouble(),
    egPUSType = cms.string('None'),
    egSeedThreshold = cms.double(1.0),
    egShapeIdLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egShapeIdLUT.txt'),
    egTrimmingLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egTrimmingLUT_corners.txt'),
    etSumEtThreshold = cms.vdouble(0.0, 7.0),
    etSumEtaMax = cms.vint32(17, 17),
    etSumEtaMin = cms.vint32(4, 4),
    etSumLsb = cms.double(0.5),
    isoTauEtaMax = cms.int32(16),
    isoTauEtaMin = cms.int32(5),
    jetCalibrationLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/jetCalibrationLUT_stage1_prelim.txt'),
    jetCalibrationParams = cms.vdouble(1.27997, 10.0382, 1.45051, 6.49017, 1.52978, 
        7.53412, 1.61689, 10.1012, 1.29395, 18.7129, 
        1.22278, 23.6606, 1.25293, 24.4677, 1.22861, 
        25.2746, 1.21071, 23.4553, 1.16955, 22.6286, 
        1.1838, 20.9017, 1.18977, 21.1769, 1.21333, 
        22.1565, 1.23575, 23.0727, 1.27147, 24.363, 
        1.22103, 24.9567, 1.22637, 24.2517, 1.30175, 
        18.7771, 1.61674, 10.2858, 1.53865, 7.30213, 
        1.42139, 6.72587, 1.26112, 10.0601),
    jetCalibrationType = cms.string('Stage1JEC'),
    jetLsb = cms.double(0.5),
    jetNeighbourThreshold = cms.double(0.0),
    jetPUSParams = cms.vdouble(),
    jetPUSType = cms.string('None'),
    jetSeedThreshold = cms.double(10.0),
    q2LUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/q2LUT_stage1.txt'),
    regionLsb = cms.double(0.5),
    regionPUSParams = cms.vdouble( (0.0, 0.0, 0.0, 0.0, 0.444444, 
        0.55117, 0.770085, 0.958352, 1.21479, 1.486655, 
        1.801059, 2.146229, 2.522583, 2.944799, 3.429136, 
        3.984393, 4.67341, 6.388889, 0.0, 0.0, 
        0.0, 0.0, 0.319444, 0.548246, 0.810256, 
        0.97769, 1.229211, 1.510501, 1.82686, 2.178931, 
        2.56252, 2.99361, 3.489558, 4.060866, 4.757649, 
        5.527778, 0.0, 0.0, 0.0, 0.0, 
        0.513889, 0.618421, 0.801496, 1.010128, 1.248957, 
        1.524992, 1.843374, 2.196967, 2.585665, 3.024237, 
        3.525665, 4.104405, 4.837409, 5.277778, 0.0, 
        0.0, 0.0, 0.0, 0.138889, 0.178363, 
        0.328846, 0.438023, 0.537074, 0.655743, 0.818238, 
        0.997956, 1.198403, 1.428185, 1.693293, 1.998691, 
        2.428744, 2.861111, 0.0, 0.0, 0.0, 
        0.0, 0.222222, 0.355263, 0.568803, 0.681711, 
        0.776114, 0.999194, 1.286749, 1.69019, 2.228222, 
        2.944096, 3.893814, 5.151409, 7.084399, 8.5, 
        0.0, 0.0, 0.0, 0.0, 0.347222, 
        0.260234, 0.282479, 0.305702, 0.330235, 0.386729, 
        0.472834, 0.574252, 0.713821, 0.883901, 1.117625, 
        1.419786, 1.88753, 2.583333, 0.0, 0.0, 
        0.0, 0.0, 0.333333, 0.181287, 0.294444, 
        0.3115, 0.324732, 0.380449, 0.447851, 0.537887, 
        0.643667, 0.770106, 0.932555, 1.137137, 1.425775, 
        1.138889, 0.0, 0.0, 0.0, 0.0, 
        0.069444, 0.144737, 0.329701, 0.345149, 0.361473, 
        0.428805, 0.500501, 0.595122, 0.709161, 0.84907, 
        1.01901, 1.234842, 1.563255, 3.944444, 0.0, 
        0.0, 0.0, 0.0, 0.083333, 0.195906, 
        0.232692, 0.309886, 0.383756, 0.439078, 0.515435, 
        0.615713, 0.735333, 0.879855, 1.06285, 1.299136, 
        1.575533, 1.861111, 0.0, 0.0, 0.0, 
        0.0, 0.222222, 0.181287, 0.245085, 0.393035, 
        0.42242, 0.496332, 0.583994, 0.694272, 0.829494, 
        0.990583, 1.194619, 1.450821, 1.804499, 2.361111, 
        0.0, 0.0, 0.0, 0.0, 0.388889, 
        0.435673, 0.398077, 0.391201, 0.46479, 0.536569, 
        0.632543, 0.749761, 0.889213, 1.05999, 1.267241, 
        1.540288, 1.857136, 2.194444, 0.0, 0.0, 
        0.0, 0.0, 0.125, 0.576023, 0.420513, 
        0.396154, 0.485091, 0.546055, 0.641076, 0.754781, 
        0.897755, 1.070265, 1.27816, 1.532439, 1.927529, 
        1.805556, 0.0, 0.0, 0.0, 0.0, 
        0.694444, 0.23538, 0.311111, 0.368633, 0.424446, 
        0.499583, 0.595857, 0.712276, 0.844093, 1.011457, 
        1.21695, 1.47243, 1.853009, 1.722222, 0.0, 
        0.0, 0.0, 0.0, 0.166667, 0.336257, 
        0.301923, 0.313005, 0.387602, 0.441673, 0.524899, 
        0.625752, 0.744597, 0.88857, 1.073132, 1.318219, 
        1.614533, 1.333333, 0.0, 0.0, 0.0, 
        0.0, 0.111111, 0.368421, 0.269231, 0.302253, 
        0.38031, 0.436402, 0.508579, 0.607197, 0.718574, 
        0.857328, 1.03398, 1.245847, 1.534823, 1.972222, 
        0.0, 0.0, 0.0, 0.0, 0.027778, 
        0.22807, 0.195085, 0.278585, 0.322639, 0.374968, 
        0.446104, 0.529719, 0.631725, 0.758136, 0.916622, 
        1.111448, 1.417572, 2.277778, 0.0, 0.0, 
        0.0, 0.0, 0.041667, 0.157895, 0.186752, 
        0.254513, 0.320827, 0.378098, 0.46327, 0.5709, 
        0.696241, 0.871445, 1.09761, 1.396127, 1.857488, 
        2.75, 0.0, 0.0, 0.0, 0.0, 
        0.138889, 0.612573, 0.624573, 0.634669, 0.790229, 
        0.989867, 1.282201, 1.672201, 2.20561, 2.922829, 
        3.850628, 5.10429, 6.823571, 10.972222, 0.0, 
        0.0, 0.0, 0.0, 0.194444, 0.345029, 
        0.353846, 0.411016, 0.509851, 0.661643, 0.81475, 
        0.995329, 1.199998, 1.431079, 1.694189, 2.000995, 
        2.378925, 3.111111, 0.0, 0.0, 0.0, 
        0.0, 0.541667, 0.573099, 0.766453, 0.977836, 
        1.239705, 1.530437, 1.840524, 2.197025, 2.585155, 
        3.027299, 3.525292, 4.11254, 4.873339, 5.972222, 
        0.0, 0.0, 0.0, 0.0, 0.486111, 
        0.513158, 0.721581, 0.976956, 1.22595, 1.510261, 
        1.824951, 2.17936, 2.561912, 2.995865, 3.485821, 
        4.053826, 4.729921, 5.805556, 0.0, 0.0, 
        0.0, 0.0, 0.319444, 0.564327, 0.694872, 
        0.950903, 1.201596, 1.488093, 1.801121, 2.145727, 
        2.52369, 2.94616, 3.422785, 3.963287, 4.633907, 
        5.972222 ) ),
    regionPUSType = cms.string('PUM0'),
    tauCalibrationLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUT_stage1.txt'),
    tauCalibrationLUTFileBarrelA = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTBarrelA.txt'),
    tauCalibrationLUTFileBarrelB = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTBarrelB.txt'),
    tauCalibrationLUTFileBarrelC = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTBarrelC.txt'),
    tauCalibrationLUTFileEndcapsA = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTEndcapsA.txt'),
    tauCalibrationLUTFileEndcapsB = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTEndcapsB.txt'),
    tauCalibrationLUTFileEndcapsC = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTEndcapsC.txt'),
    tauCalibrationLUTFileEta = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTEta.txt'),
    tauEtToHFRingEtLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauHwEtToHFRingScale_LUT.txt'),
    tauIsoAreaNrTowersEta = cms.uint32(2),
    tauIsoAreaNrTowersPhi = cms.uint32(4),
    tauIsoLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauIsoLUT_stage1_isolA0.10_isolB100.00_ch_switchToIsoBPt192.00_j8t8.txt'),
    tauIsoVetoNrTowersPhi = cms.uint32(2),
    tauLsb = cms.double(0.5),
    tauMaxJetIsolationA = cms.double(0.1),
    tauMaxJetIsolationB = cms.double(100.0),
    tauMaxPtTauVeto = cms.double(64.0),
    tauMinPtJetIsolationB = cms.double(192.0),
    tauNeighbourThreshold = cms.double(0.0),
    tauPUSParams = cms.vdouble(1, 4, 27),
    tauPUSType = cms.string('None'),
    tauSeedThreshold = cms.double(7.0),
    towerEncoding = cms.bool(False),
    towerLsbE = cms.double(0.5),
    towerLsbH = cms.double(0.5),
    towerLsbSum = cms.double(0.5),
    towerNBitsE = cms.int32(8),
    towerNBitsH = cms.int32(8),
    towerNBitsRatio = cms.int32(3),
    towerNBitsSum = cms.int32(9)
)


process.candidateBoostedDoubleSecondaryVertexAK8Computer = cms.ESProducer("CandidateBoostedDoubleSecondaryVertexESProducer",
    R0 = cms.double(0.8),
    beta = cms.double(1.0),
    maxSVDeltaRToJet = cms.double(0.7),
    weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT.weights.xml.gz')
)


process.candidateBoostedDoubleSecondaryVertexCA15Computer = cms.ESProducer("CandidateBoostedDoubleSecondaryVertexESProducer",
    R0 = cms.double(1.5),
    beta = cms.double(1.0),
    maxSVDeltaRToJet = cms.double(1.3),
    weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_CA15_BDT.weights.xml.gz')
)


process.candidateCombinedMVAComputer = cms.ESProducer("CombinedMVAJetTagESProducer",
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        jetTagComputer = cms.string('candidateJetProbabilityComputer'),
        variables = cms.bool(False)
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('candidateCombinedSecondaryVertexComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('softPFMuonComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('softPFElectronComputer'),
            variables = cms.bool(False)
        )),
    useCategories = cms.bool(False)
)


process.candidateCombinedSecondaryVertexComputer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateCombinedSecondaryVertexSoftLeptonComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLepton', 
        'CombinedSVPseudoVertexNoSoftLepton', 
        'CombinedSVNoVertexNoSoftLepton', 
        'CombinedSVRecoVertexSoftMuon', 
        'CombinedSVPseudoVertexSoftMuon', 
        'CombinedSVNoVertexSoftMuon', 
        'CombinedSVRecoVertexSoftElectron', 
        'CombinedSVPseudoVertexSoftElectron', 
        'CombinedSVNoVertexSoftElectron'),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateCombinedSecondaryVertexSoftLeptonCtagLComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonCtagLESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLeptonCtagL', 
        'CombinedSVPseudoVertexNoSoftLeptonCtagL', 
        'CombinedSVNoVertexNoSoftLeptonCtagL', 
        'CombinedSVRecoVertexSoftMuonCtagL', 
        'CombinedSVPseudoVertexSoftMuonCtagL', 
        'CombinedSVNoVertexSoftMuonCtagL', 
        'CombinedSVRecoVertexSoftElectronCtagL', 
        'CombinedSVPseudoVertexSoftElectronCtagL', 
        'CombinedSVNoVertexSoftElectronCtagL'),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeCombinedMVAComputer = cms.ESProducer("CombinedMVAJetTagESProducer",
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        jetTagComputer = cms.string('candidateNegativeOnlyJetProbabilityComputer'),
        variables = cms.bool(False)
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('candidateNegativeCombinedSecondaryVertexComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('negativeSoftPFMuonComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('negativeSoftPFElectronComputer'),
            variables = cms.bool(False)
        )),
    useCategories = cms.bool(False)
)


process.candidateNegativeCombinedSecondaryVertexComputer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.candidateNegativeCombinedSecondaryVertexSoftLeptonComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLepton', 
        'CombinedSVPseudoVertexNoSoftLepton', 
        'CombinedSVNoVertexNoSoftLepton', 
        'CombinedSVRecoVertexSoftMuon', 
        'CombinedSVPseudoVertexSoftMuon', 
        'CombinedSVNoVertexSoftMuon', 
        'CombinedSVRecoVertexSoftElectron', 
        'CombinedSVPseudoVertexSoftElectron', 
        'CombinedSVNoVertexSoftElectron'),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.candidateNegativeCombinedSecondaryVertexSoftLeptonCtagLComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonCtagLESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLeptonCtagL', 
        'CombinedSVPseudoVertexNoSoftLeptonCtagL', 
        'CombinedSVNoVertexNoSoftLeptonCtagL', 
        'CombinedSVRecoVertexSoftMuonCtagL', 
        'CombinedSVPseudoVertexSoftMuonCtagL', 
        'CombinedSVNoVertexSoftMuonCtagL', 
        'CombinedSVRecoVertexSoftElectronCtagL', 
        'CombinedSVPseudoVertexSoftElectronCtagL', 
        'CombinedSVNoVertexSoftElectronCtagL'),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.candidateNegativeCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.candidateNegativeOnlyJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeOnlyJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeTrackCounting3D2ndComputer = cms.ESProducer("CandidateNegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeTrackCounting3D3rdComputer = cms.ESProducer("CandidateNegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidatePositiveCombinedMVAComputer = cms.ESProducer("CombinedMVAJetTagESProducer",
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        jetTagComputer = cms.string('candidatePositiveOnlyJetProbabilityComputer'),
        variables = cms.bool(False)
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('candidatePositiveCombinedSecondaryVertexComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('positiveSoftPFMuonComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('positiveSoftPFElectronComputer'),
            variables = cms.bool(False)
        )),
    useCategories = cms.bool(False)
)


process.candidatePositiveCombinedSecondaryVertexComputer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidatePositiveCombinedSecondaryVertexSoftLeptonComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLepton', 
        'CombinedSVPseudoVertexNoSoftLepton', 
        'CombinedSVNoVertexNoSoftLepton', 
        'CombinedSVRecoVertexSoftMuon', 
        'CombinedSVPseudoVertexSoftMuon', 
        'CombinedSVNoVertexSoftMuon', 
        'CombinedSVRecoVertexSoftElectron', 
        'CombinedSVPseudoVertexSoftElectron', 
        'CombinedSVNoVertexSoftElectron'),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidatePositiveCombinedSecondaryVertexSoftLeptonCtagLComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonCtagLESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLeptonCtagL', 
        'CombinedSVPseudoVertexNoSoftLeptonCtagL', 
        'CombinedSVNoVertexNoSoftLeptonCtagL', 
        'CombinedSVRecoVertexSoftMuonCtagL', 
        'CombinedSVPseudoVertexSoftMuonCtagL', 
        'CombinedSVNoVertexSoftMuonCtagL', 
        'CombinedSVRecoVertexSoftElectronCtagL', 
        'CombinedSVPseudoVertexSoftElectronCtagL', 
        'CombinedSVNoVertexSoftElectronCtagL'),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidatePositiveCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidatePositiveOnlyJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidatePositiveOnlyJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateSimpleSecondaryVertex2TrkComputer = cms.ESProducer("CandidateSimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.candidateSimpleSecondaryVertex3TrkComputer = cms.ESProducer("CandidateSimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.candidateTrackCounting3D2ndComputer = cms.ESProducer("CandidateTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidateTrackCounting3D3rdComputer = cms.ESProducer("CandidateTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.chi2CutForConversionTrajectoryBuilder = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('eleLooseChi2'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0)
)


process.combinedMVAComputer = cms.ESProducer("CombinedMVAJetTagESProducer",
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        jetTagComputer = cms.string('jetProbabilityComputer'),
        variables = cms.bool(False)
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('combinedSecondaryVertexComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('softPFMuonComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('softPFElectronComputer'),
            variables = cms.bool(False)
        )),
    useCategories = cms.bool(False)
)


process.combinedSecondaryVertexComputer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.combinedSecondaryVertexSoftLeptonComputer = cms.ESProducer("CombinedSecondaryVertexSoftLeptonESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLepton', 
        'CombinedSVPseudoVertexNoSoftLepton', 
        'CombinedSVNoVertexNoSoftLepton', 
        'CombinedSVRecoVertexSoftMuon', 
        'CombinedSVPseudoVertexSoftMuon', 
        'CombinedSVNoVertexSoftMuon', 
        'CombinedSVRecoVertexSoftElectron', 
        'CombinedSVPseudoVertexSoftElectron', 
        'CombinedSVNoVertexSoftElectron'),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.combinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.conv2StepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('conv2StepFitterSmoother'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('conv2StepRKSmoother')
)


process.conv2StepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('conv2StepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.convStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('convStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.convStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('convStepFitterSmoother'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('convStepRKSmoother')
)


process.convStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('convStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.cosmicsNavigationSchoolESProducer = cms.ESProducer("SkippingLayerCosmicNavigationSchoolESProducer",
    ComponentName = cms.string('CosmicNavigationSchool'),
    allSelf = cms.bool(True),
    noPXB = cms.bool(False),
    noPXF = cms.bool(False),
    noTEC = cms.bool(False),
    noTIB = cms.bool(False),
    noTID = cms.bool(False),
    noTOB = cms.bool(False),
    selfSearch = cms.bool(True)
)


process.detachedTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('detachedTripletStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.detachedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.13)
)


process.doubleVertex2TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    minVertices = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.ecalNextToDeadChannelESProducer = cms.ESProducer("EcalNextToDeadChannelESProducer",
    channelStatusThresholdForDead = cms.int32(12)
)


process.ecalSeverityLevel = cms.ESProducer("EcalSeverityLevelESProducer",
    dbstatusMask = cms.PSet(
        kBad = cms.vstring('kNonRespondingIsolated', 
            'kDeadVFE', 
            'kDeadFE', 
            'kNoDataNoTP'),
        kGood = cms.vstring('kOk'),
        kProblematic = cms.vstring('kDAC', 
            'kNoLaser', 
            'kNoisy', 
            'kNNoisy', 
            'kNNNoisy', 
            'kNNNNoisy', 
            'kNNNNNoisy', 
            'kFixedG6', 
            'kFixedG1', 
            'kFixedG0'),
        kRecovered = cms.vstring(),
        kTime = cms.vstring(),
        kWeird = cms.vstring()
    ),
    flagMask = cms.PSet(
        kBad = cms.vstring('kFaultyHardware', 
            'kDead', 
            'kKilled'),
        kGood = cms.vstring('kGood'),
        kProblematic = cms.vstring('kPoorReco', 
            'kPoorCalib', 
            'kNoisy', 
            'kSaturated'),
        kRecovered = cms.vstring('kLeadingEdgeRecovered', 
            'kTowerRecovered'),
        kTime = cms.vstring('kOutOfTime'),
        kWeird = cms.vstring('kWeird', 
            'kDiWeird')
    ),
    timeThresh = cms.double(2.0)
)


process.electronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('electronChi2'),
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(3.0)
)


process.electronTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('electronTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(0.0),
    ValidHitBonus = cms.double(1000.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.fwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('fwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.fwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('fwdElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.fwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('fwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.ghostTrackComputer = cms.ESProducer("GhostTrackESProducer",
    calibrationRecords = cms.vstring('GhostTrackRecoVertex', 
        'GhostTrackPseudoVertex', 
        'GhostTrackNoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True)
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalOOTPileupESProducer = cms.ESProducer("OOTPileupDBCompatibilityESProducer")


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    DropChannelStatusBits = cms.vstring('HcalCellMask', 
        'HcalCellOff', 
        'HcalCellDead'),
    RecoveredRecHitBits = cms.vstring('TimingAddedBit', 
        'TimingSubtractedBit'),
    SeverityLevels = cms.VPSet(cms.PSet(
        ChannelStatus = cms.vstring(''),
        Level = cms.int32(0),
        RecHitFlags = cms.vstring('')
    ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellExcludeFromHBHENoiseSummary'),
            Level = cms.int32(5),
            RecHitFlags = cms.vstring('HSCP_R1R2', 
                'HSCP_FracLeader', 
                'HSCP_OuterEnergy', 
                'HSCP_ExpFit', 
                'ADCSaturationBit', 
                'HBHEIsolatedNoise', 
                'AddedSimHcalNoise')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8),
            RecHitFlags = cms.vstring('HBHEHpdHitMultiplicity', 
                'HBHEPulseShape', 
                'HOBit', 
                'HFDigiTime', 
                'HFInTimeWindow', 
                'ZDCBit', 
                'CalibrationBit', 
                'TimingErrorBit', 
                'HBHEFlatNoise', 
                'HBHESpikeNoise', 
                'HBHETriangleNoise', 
                'HBHETS4TS5Noise', 
                'HBHENegativeNoise')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11),
            RecHitFlags = cms.vstring('HFLongShort', 
                'HFPET', 
                'HFS8S1Ratio')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellOff', 
                'HcalCellDead'),
            Level = cms.int32(20),
            RecHitFlags = cms.vstring('')
        ))
)


process.hcalTopologyIdeal = cms.ESProducer("HcalTopologyIdealEP",
    Exclude = cms.untracked.string(''),
    appendToDataLabel = cms.string(''),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    dump = cms.untracked.vstring(''),
    file = cms.untracked.string('')
)


process.hitCollectorForOutInMuonSeeds = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hitCollectorForOutInMuonSeeds'),
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(4.0)
)


process.hltLhcParametersDefinerForTP = cms.ESProducer("ParametersDefinerForTPESProducer",
    ComponentName = cms.string('hltLhcParametersDefinerForTP'),
    beamSpot = cms.untracked.InputTag("hltOnlineBeamSpot")
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(False),
    trackerGeometryConstants = cms.PSet(
        BIG_PIX_PER_ROC_X = cms.int32(1),
        BIG_PIX_PER_ROC_Y = cms.int32(2),
        COLS_PER_ROC = cms.int32(52),
        ROCS_X = cms.int32(0),
        ROCS_Y = cms.int32(0),
        ROWS_PER_ROC = cms.int32(80),
        upgradeGeometry = cms.bool(False)
    )
)


process.impactParameterMVAComputer = cms.ESProducer("GenericMVAJetTagESProducer",
    calibrationRecord = cms.string('ImpactParameterMVA'),
    useCategories = cms.bool(False)
)


process.initialStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('initialStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.jetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.jetCoreRegionalStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('jetCoreRegionalStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.jetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.l1CaloScales = cms.ESProducer("L1ScalesTrivialProducer",
    L1CaloEmEtScaleLSB = cms.double(0.5),
    L1CaloEmThresholds = cms.vdouble(0.0, 1.0, 2.0, 3.0, 4.0, 
        5.0, 6.0, 7.0, 8.0, 9.0, 
        10.0, 11.0, 12.0, 13.0, 14.0, 
        15.0, 16.0, 17.0, 18.0, 19.0, 
        20.0, 21.0, 22.0, 23.0, 24.0, 
        25.0, 26.0, 27.0, 28.0, 29.0, 
        30.0, 31.0, 32.0, 33.0, 34.0, 
        35.0, 36.0, 37.0, 38.0, 39.0, 
        40.0, 41.0, 42.0, 43.0, 44.0, 
        45.0, 46.0, 47.0, 48.0, 49.0, 
        50.0, 51.0, 52.0, 53.0, 54.0, 
        55.0, 56.0, 57.0, 58.0, 59.0, 
        60.0, 61.0, 62.0, 63.0),
    L1CaloJetThresholds = cms.vdouble(0.0, 4.0, 8.0, 12.0, 16.0, 
        20.0, 24.0, 28.0, 32.0, 36.0, 
        40.0, 44.0, 48.0, 52.0, 56.0, 
        60.0, 64.0, 68.0, 72.0, 76.0, 
        80.0, 84.0, 88.0, 92.0, 96.0, 
        100.0, 104.0, 108.0, 112.0, 116.0, 
        120.0, 124.0, 128.0, 132.0, 136.0, 
        140.0, 144.0, 148.0, 152.0, 156.0, 
        160.0, 164.0, 168.0, 172.0, 176.0, 
        180.0, 184.0, 188.0, 192.0, 196.0, 
        200.0, 204.0, 208.0, 212.0, 216.0, 
        220.0, 224.0, 228.0, 232.0, 236.0, 
        240.0, 244.0, 248.0, 252.0),
    L1CaloRegionEtScaleLSB = cms.double(0.5),
    L1HfRingThresholds = cms.vdouble(0.0, 24.0, 28.0, 32.0, 36.0, 
        40.0, 44.0, 48.0),
    L1HtMissThresholds = cms.vdouble(0.0, 0.00787401574803, 0.0157480314961, 0.0236220472441, 0.0314960629921, 
        0.0393700787402, 0.0472440944882, 0.0551181102362, 0.0629921259843, 0.0708661417323, 
        0.0787401574803, 0.0866141732283, 0.0944881889764, 0.102362204724, 0.110236220472, 
        0.11811023622, 0.125984251969, 0.133858267717, 0.141732283465, 0.149606299213, 
        0.157480314961, 0.165354330709, 0.173228346457, 0.181102362205, 0.188976377953, 
        0.196850393701, 0.204724409449, 0.212598425197, 0.220472440945, 0.228346456693, 
        0.236220472441, 0.244094488189, 0.251968503937, 0.259842519685, 0.267716535433, 
        0.275590551181, 0.283464566929, 0.291338582677, 0.299212598425, 0.307086614173, 
        0.314960629921, 0.322834645669, 0.330708661417, 0.338582677165, 0.346456692913, 
        0.354330708661, 0.362204724409, 0.370078740157, 0.377952755906, 0.385826771654, 
        0.393700787402, 0.40157480315, 0.409448818898, 0.417322834646, 0.425196850394, 
        0.433070866142, 0.44094488189, 0.448818897638, 0.456692913386, 0.464566929134, 
        0.472440944882, 0.48031496063, 0.488188976378, 0.496062992126, 0.503937007874, 
        0.511811023622, 0.51968503937, 0.527559055118, 0.535433070866, 0.543307086614, 
        0.551181102362, 0.55905511811, 0.566929133858, 0.574803149606, 0.582677165354, 
        0.590551181102, 0.59842519685, 0.606299212598, 0.614173228346, 0.622047244094, 
        0.629921259843, 0.637795275591, 0.645669291339, 0.653543307087, 0.661417322835, 
        0.669291338583, 0.677165354331, 0.685039370079, 0.692913385827, 0.700787401575, 
        0.708661417323, 0.716535433071, 0.724409448819, 0.732283464567, 0.740157480315, 
        0.748031496063, 0.755905511811, 0.763779527559, 0.771653543307, 0.779527559055, 
        0.787401574803, 0.795275590551, 0.803149606299, 0.811023622047, 0.818897637795, 
        0.826771653543, 0.834645669291, 0.842519685039, 0.850393700787, 0.858267716535, 
        0.866141732283, 0.874015748031, 0.88188976378, 0.889763779528, 0.897637795276, 
        0.905511811024, 0.913385826772, 0.92125984252, 0.929133858268, 0.937007874016, 
        0.944881889764, 0.952755905512, 0.96062992126, 0.968503937008, 0.976377952756, 
        0.984251968504, 0.992125984252, 1.0)
)


process.lowPtTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('lowPtTripletStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.lowPtTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('lowPtTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.16)
)


process.mixedTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('mixedTripletStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.mixedTripletStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('mixedTripletStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    )
)


process.mixedTripletStepPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('mixedTripletStepPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(0.1),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('mixedTripletStepPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(0.1),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.11)
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    etaBinSize = cms.double(0.125),
    includeBadChambers = cms.bool(False),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.muonSeededFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(50.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.muonSeededMeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForInOut'),
    MaxChi2 = cms.double(400.0),
    nSigma = cms.double(4.0)
)


process.muonSeededMeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutIn'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.muonSeededMeasurementEstimatorForOutInDisplaced = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.muonSeededTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(1.0),
    ValidHitBonus = cms.double(1000.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.1)
)


process.myTTRHBuilderWithoutAngle = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('PixelTTRHBuilderWithoutAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4MixedPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4MixedTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.negativeCombinedMVAComputer = cms.ESProducer("CombinedMVAJetTagESProducer",
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        jetTagComputer = cms.string('negativeOnlyJetProbabilityComputer'),
        variables = cms.bool(False)
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('negativeCombinedSecondaryVertexComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('negativeSoftPFMuonComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('negativeSoftPFElectronComputer'),
            variables = cms.bool(False)
        )),
    useCategories = cms.bool(False)
)


process.negativeCombinedSecondaryVertexComputer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.negativeCombinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.negativeOnlyJetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.negativeOnlyJetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.negativeSoftPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(False)
)


process.negativeSoftPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(True)
)


process.negativeSoftPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('negative'),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.negativeSoftPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(False)
)


process.negativeSoftPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(True)
)


process.negativeSoftPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('negative'),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.negativeTrackCounting3D2ndComputer = cms.ESProducer("NegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.negativeTrackCounting3D3rdComputer = cms.ESProducer("NegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.oppositeToMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('oppositeToMomElePropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.pixelLessStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('pixelLessStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.pixelLessStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('pixelLessStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    doStripShapeCut = cms.bool(False)
)


process.pixelLessStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.11)
)


process.pixelPairStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('pixelPairStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.positiveCombinedMVAComputer = cms.ESProducer("CombinedMVAJetTagESProducer",
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        jetTagComputer = cms.string('positiveOnlyJetProbabilityComputer'),
        variables = cms.bool(False)
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('positiveCombinedSecondaryVertexComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('positiveSoftPFMuonComputer'),
            variables = cms.bool(False)
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            jetTagComputer = cms.string('positiveSoftPFElectronComputer'),
            variables = cms.bool(False)
        )),
    useCategories = cms.bool(False)
)


process.positiveCombinedSecondaryVertexComputer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.positiveCombinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    calibrationRecords = cms.vstring('CombinedSVIVFV2RecoVertex', 
        'CombinedSVIVFV2PseudoVertex', 
        'CombinedSVIVFV2NoVertex'),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.positiveOnlyJetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.positiveOnlyJetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.positiveSoftPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(False)
)


process.positiveSoftPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(True)
)


process.positiveSoftPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('positive'),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.positiveSoftPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(False)
)


process.positiveSoftPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(True)
)


process.positiveSoftPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('positive'),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiPixelQualityFromDbRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        ))
)


process.siPixelTemplateDBObjectESProducer = cms.ESProducer("SiPixelTemplateDBObjectESProducer")


process.siStripBackPlaneCorrectionDepESProducer = cms.ESProducer("SiStripBackPlaneCorrectionDepESProducer",
    BackPlaneCorrectionDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    BackPlaneCorrectionPeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    )
)


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    APVGain = cms.VPSet(cms.PSet(
        Label = cms.untracked.string(''),
        NormalizationFactor = cms.untracked.double(1.0),
        Record = cms.string('SiStripApvGainRcd')
    ), 
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGain2Rcd')
        )),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripGainSimESProducer = cms.ESProducer("SiStripGainSimESProducer",
    APVGain = cms.VPSet(cms.PSet(
        Label = cms.untracked.string(''),
        NormalizationFactor = cms.untracked.double(1.0),
        Record = cms.string('SiStripApvGainSimRcd')
    )),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripLorentzAngleRcd')
    ),
    LorentzAnglePeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripLorentzAngleRcd')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetVOffRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        )),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('')
)


process.siStripQualityESProducerUnbiased = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetCablingRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        )),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('unbiased')
)


process.simpleSecondaryVertex2TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.simpleSecondaryVertex3TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.softPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(False)
)


process.softPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(True)
)


process.softPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('any'),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.softPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(False)
)


process.softPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(True)
)


process.softPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('any'),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.stripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('stripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.templates = cms.ESProducer("PixelCPETemplateRecoESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPETemplateReco'),
    DoCosmics = cms.bool(False),
    DoLorentz = cms.bool(True),
    LoadTemplatesFromDB = cms.bool(True),
    UseClusterSplitter = cms.bool(False),
    speed = cms.int32(-2)
)


process.tobTecFlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('tobTecFlexibleKFFittingSmoother'),
    looperFitter = cms.string('tobTecStepFitterSmootherForLoopers'),
    standardFitter = cms.string('tobTecStepFitterSmoother')
)


process.tobTecStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('tobTecStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.tobTecStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('tobTecStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    doStripShapeCut = cms.bool(False)
)


process.tobTecStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmoother'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('tobTecStepRKFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(8),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('tobTecStepRKSmoother')
)


process.tobTecStepFitterSmootherForLoopers = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmootherForLoopers'),
    EstimateCut = cms.double(30),
    Fitter = cms.string('tobTecStepRKFitterForLoopers'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(8),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('tobTecStepRKSmootherForLoopers')
)


process.tobTecStepRKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('tobTecStepRKFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(8)
)


process.tobTecStepRKTrajectoryFitterForLoopers = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('tobTecStepRKFitterForLoopers'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(8)
)


process.tobTecStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('tobTecStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(8)
)


process.tobTecStepRKTrajectorySmootherForLoopers = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('tobTecStepRKSmootherForLoopers'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(8)
)


process.tobTecStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('tobTecStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.09)
)


process.topDQMak5PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.topDQMak5PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.topDQMak5PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('topDQMak5PFCHSL2Relative', 
        'topDQMak5PFCHSL3Absolute')
)


process.topDQMak5PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('topDQMak5PFCHSL2Relative', 
        'topDQMak5PFCHSL3Absolute', 
        'topDQMak5PFCHSResidual')
)


process.topDQMak5PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.topDQMak5PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.topDQMak5PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.trackCounting3D2ndComputer = cms.ESProducer("TrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.trackCounting3D3rdComputer = cms.ESProducer("TrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.trackerGeometryDB = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(False),
    trackerGeometryConstants = cms.PSet(
        BIG_PIX_PER_ROC_X = cms.int32(1),
        BIG_PIX_PER_ROC_Y = cms.int32(2),
        COLS_PER_ROC = cms.int32(52),
        ROCS_X = cms.int32(0),
        ROCS_Y = cms.int32(0),
        ROWS_PER_ROC = cms.int32(80),
        upgradeGeometry = cms.bool(False)
    )
)


process.trackerNumberingGeometryDB = cms.ESProducer("TrackerGeometricDetESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(False)
)


process.trackerTopologyConstants = cms.ESProducer("TrackerTopologyEP",
    appendToDataLabel = cms.string(''),
    pxb_ladderMask = cms.uint32(255),
    pxb_ladderStartBit = cms.uint32(8),
    pxb_layerMask = cms.uint32(15),
    pxb_layerStartBit = cms.uint32(16),
    pxb_moduleMask = cms.uint32(63),
    pxb_moduleStartBit = cms.uint32(2),
    pxf_bladeMask = cms.uint32(63),
    pxf_bladeStartBit = cms.uint32(10),
    pxf_diskMask = cms.uint32(15),
    pxf_diskStartBit = cms.uint32(16),
    pxf_moduleMask = cms.uint32(63),
    pxf_moduleStartBit = cms.uint32(2),
    pxf_panelMask = cms.uint32(3),
    pxf_panelStartBit = cms.uint32(8),
    pxf_sideMask = cms.uint32(3),
    pxf_sideStartBit = cms.uint32(23),
    tec_moduleMask = cms.uint32(7),
    tec_moduleStartBit = cms.uint32(2),
    tec_petalMask = cms.uint32(15),
    tec_petalStartBit = cms.uint32(8),
    tec_petal_fw_bwMask = cms.uint32(3),
    tec_petal_fw_bwStartBit = cms.uint32(12),
    tec_ringMask = cms.uint32(7),
    tec_ringStartBit = cms.uint32(5),
    tec_sideMask = cms.uint32(3),
    tec_sideStartBit = cms.uint32(18),
    tec_sterMask = cms.uint32(3),
    tec_sterStartBit = cms.uint32(0),
    tec_wheelMask = cms.uint32(15),
    tec_wheelStartBit = cms.uint32(14),
    tib_layerMask = cms.uint32(7),
    tib_layerStartBit = cms.uint32(14),
    tib_moduleMask = cms.uint32(3),
    tib_moduleStartBit = cms.uint32(2),
    tib_sterMask = cms.uint32(3),
    tib_sterStartBit = cms.uint32(0),
    tib_strMask = cms.uint32(63),
    tib_strStartBit = cms.uint32(4),
    tib_str_fw_bwMask = cms.uint32(3),
    tib_str_fw_bwStartBit = cms.uint32(12),
    tib_str_int_extMask = cms.uint32(3),
    tib_str_int_extStartBit = cms.uint32(10),
    tid_moduleMask = cms.uint32(31),
    tid_moduleStartBit = cms.uint32(2),
    tid_module_fw_bwMask = cms.uint32(3),
    tid_module_fw_bwStartBit = cms.uint32(7),
    tid_ringMask = cms.uint32(3),
    tid_ringStartBit = cms.uint32(9),
    tid_sideMask = cms.uint32(3),
    tid_sideStartBit = cms.uint32(13),
    tid_sterMask = cms.uint32(3),
    tid_sterStartBit = cms.uint32(0),
    tid_wheelMask = cms.uint32(3),
    tid_wheelStartBit = cms.uint32(11),
    tob_layerMask = cms.uint32(7),
    tob_layerStartBit = cms.uint32(14),
    tob_moduleMask = cms.uint32(7),
    tob_moduleStartBit = cms.uint32(2),
    tob_rodMask = cms.uint32(127),
    tob_rodStartBit = cms.uint32(5),
    tob_rod_fw_bwMask = cms.uint32(3),
    tob_rod_fw_bwStartBit = cms.uint32(12),
    tob_sterMask = cms.uint32(3),
    tob_sterStartBit = cms.uint32(0)
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.ttrhbwor = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithoutRefit'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('Fake'),
    PixelCPE = cms.string('Fake'),
    StripCPE = cms.string('Fake')
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithTrackAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.BTagRecord = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('JetTagComputerRecord')
)


process.CSCChannelMapperESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCChannelMapperRecord')
)


process.CSCIndexerESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCIndexerRecord')
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        enableConnectionSharing = cms.untracked.bool(True),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0)
    ),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
    globaltag = cms.string('MCRUN2_74_V11'),
    toGet = cms.VPSet()
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.QGPoolDBESSource = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        enableConnectionSharing = cms.untracked.bool(True),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0)
    ),
    connect = cms.string('frontier://FrontierProd/CMS_COND_PAT_000'),
    toGet = cms.VPSet(cms.PSet(
        label = cms.untracked.string('QGL_AK4PF'),
        record = cms.string('QGLikelihoodRcd'),
        tag = cms.string('QGLikelihoodObject_v1_AK4PF')
    ), 
        cms.PSet(
            label = cms.untracked.string('QGL_AK4PFchs'),
            record = cms.string('QGLikelihoodRcd'),
            tag = cms.string('QGLikelihoodObject_v1_AK4PFchs')
        ), 
        cms.PSet(
            label = cms.untracked.string('QGL_AK4PF_antib'),
            record = cms.string('QGLikelihoodRcd'),
            tag = cms.string('QGLikelihoodObject_v1_AK4PF_antib')
        ), 
        cms.PSet(
            label = cms.untracked.string('QGL_AK4PFchs_antib'),
            record = cms.string('QGLikelihoodRcd'),
            tag = cms.string('QGLikelihoodObject_v1_AK4PFchs_antib')
        ))
)


process.caloParamsSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TCaloParamsRcd')
)


process.eegeom = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd')
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    GainWidthsForTrigPrims = cms.bool(False),
    HERecalibration = cms.bool(False),
    HEreCalibCutoff = cms.double(20.0),
    HFRecalibration = cms.bool(False),
    HcalReLabel = cms.PSet(
        RelabelHits = cms.untracked.bool(False),
        RelabelRules = cms.untracked.PSet(
            CorrectPhi = cms.untracked.bool(False),
            Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                2, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                3, 3, 4, 4, 4, 
                4, 4, 5, 5, 5, 
                5, 5, 5, 5)
        )
    ),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    ),
    iLumi = cms.double(-1.0),
    toGet = cms.untracked.vstring('GainWidths')
)


process.essourceEcalNextToDead = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalNextToDeadChannelRcd')
)


process.essourceEcalSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalSeverityLevelAlgoRcd')
)


process.essourceSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd')
)


process.loadRecoTauTagMVAsFromPrepDB = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        enableConnectionSharing = cms.untracked.bool(True),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0)
    ),
    DumpStat = cms.untracked.bool(False),
    connect = cms.string('frontier://FrontierProd/CMS_COND_PAT_000'),
    toGet = cms.VPSet(cms.PSet(
        label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1'),
        record = cms.string('GBRWrapperRcd'),
        tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1')
    ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff50'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff50')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff70'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff70')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff60'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff60')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff80'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff80')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff40'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff40')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff90'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_WPEff90')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization'),
            record = cms.string('PhysicsTFormulaPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwoLTv1_mvaOutput_normalization')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff50'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff50')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff70'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff70')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff60'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff60')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff80'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff80')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff40'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff40')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff90'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_WPEff90')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization'),
            record = cms.string('PhysicsTFormulaPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwLTv1_mvaOutput_normalization')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff50'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff50')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff70'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff70')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff60'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff60')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff80'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff80')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff40'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff40')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff90'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_WPEff90')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization'),
            record = cms.string('PhysicsTFormulaPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAoldDMwLTv1_mvaOutput_normalization')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff50'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff50')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff70'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff70')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff60'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff60')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff80'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff80')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff40'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff40')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff90'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_WPEff90')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization'),
            record = cms.string('PhysicsTFormulaPayloadRcd'),
            tag = cms.string('RecoTauTag_tauIdMVAnewDMwoLTv1_mvaOutput_normalization')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_wGwoGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_woGwoGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_wGwoGSF_BL_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff99'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff99')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff96'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff96')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff91'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff91')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff85'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff85')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff79'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_antiElectronMVA5v1_gbr_NoEleMatch_woGwoGSF_EC_WPeff79')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_againstMuonMVAv1'),
            record = cms.string('GBRWrapperRcd'),
            tag = cms.string('RecoTauTag_againstMuonMVAv1')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_againstMuonMVAv1_WPeff99_5'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_againstMuonMVAv1_WPeff99_5')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_againstMuonMVAv1_WPeff99_0'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_againstMuonMVAv1_WPeff99_0')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_againstMuonMVAv1_WPeff98_0'),
            record = cms.string('PhysicsTGraphPayloadRcd'),
            tag = cms.string('RecoTauTag_againstMuonMVAv1_WPeff98_0')
        ), 
        cms.PSet(
            label = cms.untracked.string('RecoTauTag_againstMuonMVAv1_mvaOutput_normalization'),
            record = cms.string('PhysicsTFormulaPayloadRcd'),
            tag = cms.string('RecoTauTag_againstMuonMVAv1_mvaOutput_normalization')
        ))
)


process.magfield = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMagneticField.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldVolumes_1_v7_large.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldVolumes_2_v7_large.xml', 
        'Geometry/CMSCommonData/data/materials.xml'),
    rootNodeName = cms.string('cmsMagneticField:MAGF')
)


process.rpcconesrc = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCConeBuilderRcd')
)


process.tpparams12 = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalTPGPhysicsConstRcd')
)


process.prefer("es_hardcode")

process.prefer("magfield")

process.ALCARECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep edmTriggerResults_*_*_*', 
        'drop *_MEtoEDMConverter_*_*', 
        'keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.AODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'drop L1GlobalTriggerObjectMapRecord_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*')
)

process.AODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'drop L1GlobalTriggerObjectMapRecord_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.AnomalousCellParameters = cms.PSet(
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999)
)

process.BeamSpotAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BtiParametersBlock = cms.PSet(
    BtiParameters = cms.PSet(
        AC1 = cms.int32(0),
        AC2 = cms.int32(3),
        ACH = cms.int32(1),
        ACL = cms.int32(2),
        CH = cms.int32(41),
        CL = cms.int32(22),
        DEAD = cms.int32(31),
        Debug = cms.untracked.int32(0),
        KACCTHETA = cms.int32(1),
        KMAX = cms.int32(64),
        LH = cms.int32(21),
        LL = cms.int32(2),
        LTS = cms.int32(3),
        PTMS0 = cms.int32(0),
        PTMS1 = cms.int32(0),
        PTMS10 = cms.int32(1),
        PTMS11 = cms.int32(1),
        PTMS12 = cms.int32(1),
        PTMS13 = cms.int32(1),
        PTMS14 = cms.int32(1),
        PTMS15 = cms.int32(1),
        PTMS16 = cms.int32(1),
        PTMS17 = cms.int32(1),
        PTMS18 = cms.int32(1),
        PTMS19 = cms.int32(1),
        PTMS2 = cms.int32(0),
        PTMS20 = cms.int32(1),
        PTMS21 = cms.int32(1),
        PTMS22 = cms.int32(1),
        PTMS23 = cms.int32(1),
        PTMS24 = cms.int32(1),
        PTMS25 = cms.int32(1),
        PTMS26 = cms.int32(1),
        PTMS27 = cms.int32(1),
        PTMS28 = cms.int32(1),
        PTMS29 = cms.int32(1),
        PTMS3 = cms.int32(0),
        PTMS30 = cms.int32(0),
        PTMS31 = cms.int32(0),
        PTMS4 = cms.int32(1),
        PTMS5 = cms.int32(1),
        PTMS6 = cms.int32(1),
        PTMS7 = cms.int32(1),
        PTMS8 = cms.int32(1),
        PTMS9 = cms.int32(1),
        RE43 = cms.int32(2),
        RH = cms.int32(61),
        RL = cms.int32(42),
        RON = cms.bool(True),
        SET = cms.int32(7),
        ST43 = cms.int32(42),
        WEN0 = cms.int32(1),
        WEN1 = cms.int32(1),
        WEN2 = cms.int32(1),
        WEN3 = cms.int32(1),
        WEN4 = cms.int32(1),
        WEN5 = cms.int32(1),
        WEN6 = cms.int32(1),
        WEN7 = cms.int32(1),
        WEN8 = cms.int32(1),
        XON = cms.bool(False)
    )
)

process.CATopJetParameters = cms.PSet(
    algorithm = cms.int32(1),
    centralEtaCut = cms.double(2.5),
    debugLevel = cms.untracked.int32(0),
    deltarBins = cms.vdouble(0.19, 0.19, 0.19),
    etFrac = cms.double(0.7),
    jetCollInstanceName = cms.string('caTopSubJets'),
    nCellBins = cms.vdouble(1.9, 1.9, 1.9),
    ptFracBins = cms.vdouble(0.05, 0.05, 0.05),
    rBins = cms.vdouble(0.8, 0.8, 0.8),
    sumEtBins = cms.vdouble(0, 1600, 2600),
    sumEtEtaCut = cms.double(3.0),
    tagAlgo = cms.int32(0),
    useAdjacency = cms.int32(2),
    useMaxTower = cms.bool(False),
    verbose = cms.bool(False)
)

process.CSCCommonTrigger = cms.PSet(
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3)
)

process.CSCSegAlgoDF = cms.PSet(
    algo_name = cms.string('CSCSegAlgoDF'),
    algo_psets = cms.VPSet(cms.PSet(
        CSCSegmentDebug = cms.untracked.bool(False),
        Pruning = cms.untracked.bool(False),
        chi2Max = cms.double(5000.0),
        dPhiFineMax = cms.double(0.025),
        dRPhiFineMax = cms.double(8.0),
        dXclusBoxMax = cms.double(8.0),
        dYclusBoxMax = cms.double(8.0),
        maxRatioResidualPrune = cms.double(3.0),
        minHitsForPreClustering = cms.int32(10),
        minHitsPerSegment = cms.int32(3),
        minLayersApart = cms.int32(2),
        nHitsPerClusterIsShower = cms.int32(20),
        preClustering = cms.untracked.bool(False),
        tanPhiMax = cms.double(0.5),
        tanThetaMax = cms.double(1.2)
    ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(12.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(12.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(10),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.8),
            tanThetaMax = cms.double(2.0)
        ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(8.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(30),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
        2, 1, 2, 1)
)

process.CSCSegAlgoSK = cms.PSet(
    algo_name = cms.string('CSCSegAlgoSK'),
    algo_psets = cms.VPSet(cms.PSet(
        chi2Max = cms.double(99999.0),
        dPhiFineMax = cms.double(0.025),
        dPhiMax = cms.double(0.003),
        dRPhiFineMax = cms.double(8.0),
        dRPhiMax = cms.double(8.0),
        minLayersApart = cms.int32(2),
        verboseInfo = cms.untracked.bool(True),
        wideSeg = cms.double(3.0)
    ), 
        cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.025),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1)
)

process.CSCSegAlgoST = cms.PSet(
    algo_name = cms.string('CSCSegAlgoST'),
    algo_psets = cms.VPSet(cms.PSet(
        BPMinImprovement = cms.double(10000.0),
        BrutePruning = cms.bool(True),
        CSCDebug = cms.untracked.bool(False),
        CorrectTheErrors = cms.bool(True),
        Covariance = cms.double(0.0),
        ForceCovariance = cms.bool(False),
        ForceCovarianceAll = cms.bool(False),
        NormChi2Cut2D = cms.double(20.0),
        NormChi2Cut3D = cms.double(10.0),
        Pruning = cms.bool(True),
        SeedBig = cms.double(0.0015),
        SeedSmall = cms.double(0.0002),
        curvePenalty = cms.double(2.0),
        curvePenaltyThreshold = cms.double(0.85),
        dPhiFineMax = cms.double(0.025),
        dRPhiFineMax = cms.double(8.0),
        dXclusBoxMax = cms.double(4.0),
        dYclusBoxMax = cms.double(8.0),
        hitDropLimit4Hits = cms.double(0.6),
        hitDropLimit5Hits = cms.double(0.8),
        hitDropLimit6Hits = cms.double(0.3333),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        maxRatioResidualPrune = cms.double(3),
        maxRecHitsInCluster = cms.int32(20),
        minHitsPerSegment = cms.int32(3),
        onlyBestSegment = cms.bool(False),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True),
        prePrun = cms.bool(True),
        prePrunLimit = cms.double(3.17),
        tanPhiMax = cms.double(0.5),
        tanThetaMax = cms.double(1.2),
        useShowering = cms.bool(False),
        yweightPenalty = cms.double(1.5),
        yweightPenaltyThreshold = cms.double(1.0)
    ), 
        cms.PSet(
            BPMinImprovement = cms.double(10000.0),
            BrutePruning = cms.bool(True),
            CSCDebug = cms.untracked.bool(False),
            CorrectTheErrors = cms.bool(True),
            Covariance = cms.double(0.0),
            ForceCovariance = cms.bool(False),
            ForceCovarianceAll = cms.bool(False),
            NormChi2Cut2D = cms.double(20.0),
            NormChi2Cut3D = cms.double(10.0),
            Pruning = cms.bool(True),
            SeedBig = cms.double(0.0015),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            curvePenaltyThreshold = cms.double(0.85),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(4.0),
            dYclusBoxMax = cms.double(8.0),
            hitDropLimit4Hits = cms.double(0.6),
            hitDropLimit5Hits = cms.double(0.8),
            hitDropLimit6Hits = cms.double(0.3333),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3),
            maxRecHitsInCluster = cms.int32(24),
            minHitsPerSegment = cms.int32(3),
            onlyBestSegment = cms.bool(False),
            preClustering = cms.bool(True),
            preClusteringUseChaining = cms.bool(True),
            prePrun = cms.bool(True),
            prePrunLimit = cms.double(3.17),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2),
            useShowering = cms.bool(False),
            yweightPenalty = cms.double(1.5),
            yweightPenaltyThreshold = cms.double(1.0)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1)
)

process.CSCSegAlgoTC = cms.PSet(
    algo_name = cms.string('CSCSegAlgoTC'),
    algo_psets = cms.VPSet(cms.PSet(
        SegmentSorting = cms.int32(1),
        chi2Max = cms.double(6000.0),
        chi2ndfProbMin = cms.double(0.0001),
        dPhiFineMax = cms.double(0.02),
        dPhiMax = cms.double(0.003),
        dRPhiFineMax = cms.double(6.0),
        dRPhiMax = cms.double(1.2),
        minLayersApart = cms.int32(2),
        verboseInfo = cms.untracked.bool(True)
    ), 
        cms.PSet(
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            chi2ndfProbMin = cms.double(0.0001),
            dPhiFineMax = cms.double(0.013),
            dPhiMax = cms.double(0.00198),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1)
)

process.CSCTimingExtractorBlock = cms.PSet(
    CSCTimingParameters = cms.PSet(
        CSCStripError = cms.double(7.0),
        CSCStripTimeOffset = cms.double(0.0),
        CSCWireError = cms.double(8.6),
        CSCWireTimeOffset = cms.double(0.0),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        PruneCut = cms.double(9.0),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        UseStripTime = cms.bool(True),
        UseWireTime = cms.bool(True),
        debug = cms.bool(False)
    )
)

process.ChargeSignificanceTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ChargeSignificanceTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0)
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.CkfElectronTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('electronChi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('fwdElectronPropagator'),
    propagatorOpposite = cms.string('bwdElectronPropagator'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator')
)

process.CkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator')
)

process.CkfTrajectoryBuilderBeamHalo = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('BeamHaloPropagatorAlong'),
    propagatorOpposite = cms.string('BeamHaloPropagatorOpposite'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfTrajectoryFilterBeamHaloMuon')
    ),
    updator = cms.string('KFUpdator')
)

process.ClusterShapeTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('ClusterShapeTrajectoryFilter'),
    cacheSrc = cms.InputTag("siPixelClusterShapeCache")
)

process.CombIsoCuts = cms.PSet(
    IsCombinedIso = cms.untracked.bool(True),
    IsRelativeIso = cms.untracked.bool(True),
    IsoCut03 = cms.untracked.double(0.15),
    ptThreshold = cms.untracked.double(0.0)
)

process.CommonEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_logErrorHarvester_*_*')
)

process.CompositeTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet()
)

process.CondDBSetup = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        enableConnectionSharing = cms.untracked.bool(True),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0)
    )
)

process.CosmicSeedCreator = cms.PSet(
    ComponentName = cms.string('CosmicSeedCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    maxseeds = cms.int32(10000),
    propagator = cms.string('PropagatorWithMaterial')
)

process.DATAMIXEREventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep CSCDetIdCSCALCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCALCTDigi_*', 
        'keep CSCDetIdCSCCLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCLCTDigi_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_muonCSCDigis_MuonCSCComparatorDigi_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_csctfDigis_*_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCorrelatedLCTDigi_*', 
        'keep CSCDetIdCSCRPCDigiMuonDigiCollection_muonCSCDigis_MuonCSCRPCDigi_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_muonCSCDigis_MuonCSCStripDigi_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_muonCSCDigis_MuonCSCWireDigi_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_muonDTDigis_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep SiStripDigiedmDetSetVector_siStripDigis_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep HBHEDataFramesSorted_hcalDigis_*_*', 
        'keep HFDataFramesSorted_hcalDigis_*_*', 
        'keep HODataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep CastorDataFramesSorted_castorDigis_*_*', 
        'keep EBDigiCollection_ecalDigis_*_*', 
        'keep EEDigiCollection_ecalDigis_*_*', 
        'keep ESDigiCollection_ecalPreshowerDigis_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.DF_ME1234_1 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DF_ME1234_2 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(12.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(12.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.8),
    tanThetaMax = cms.double(2.0)
)

process.DF_ME1A = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(30),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DQMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConverter_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.DTLinearDriftAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        )
    )
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)

process.DTLinearDriftFromDBAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(1.0),
        AlphaMaxTheta = cms.double(0.9),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(100.0),
        AlphaMaxTheta = cms.double(100.0),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB = cms.PSet(
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D')
)

process.DTTPGMapBlock = cms.PSet(
    DTTPGMap = cms.untracked.PSet(
        wh0st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh0st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh0st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh0st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se4 = cms.untracked.vint32(50, 48, 50, 13),
        wh1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se4 = cms.untracked.vint32(60, 48, 60, 15),
        wh1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se4 = cms.untracked.vint32(72, 48, 72, 18),
        wh1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se3 = cms.untracked.vint32(50, 48, 50, 13),
        whm1st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se3 = cms.untracked.vint32(60, 48, 60, 15),
        whm1st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se3 = cms.untracked.vint32(72, 48, 72, 18),
        whm1st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se9 = cms.untracked.vint32(48, 0, 48, 12)
    )
)

process.DTTPGParametersBlock = cms.PSet(
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    )
)

process.DTTimingExtractorBlock = cms.PSet(
    DTTimingParameters = cms.PSet(
        DTTimeOffset = cms.double(0.0),
        DoWireCorr = cms.bool(True),
        DropTheta = cms.bool(True),
        HitError = cms.double(6.0),
        HitsMin = cms.int32(3),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        PruneCut = cms.double(10000.0),
        RequireBothProjections = cms.bool(False),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        UseSegmentT0 = cms.bool(False),
        debug = cms.bool(False)
    )
)

process.DefaultAlgorithms = cms.PSet(
    APVInspectMode = cms.string('BaselineFollower'),
    APVRestoreMode = cms.string('BaselineFollower'),
    ApplyBaselineCleaner = cms.bool(True),
    ApplyBaselineRejection = cms.bool(True),
    CleaningSequence = cms.uint32(1),
    CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
    CutToAvoidSignal = cms.double(2.0),
    DeltaCMThreshold = cms.uint32(20),
    Deviation = cms.uint32(25),
    ForceNoRestore = cms.bool(False),
    Fraction = cms.double(0.2),
    Iterations = cms.int32(3),
    MeanCM = cms.int32(0),
    PedestalSubtractionFedMode = cms.bool(False),
    SelfSelectRestoreAlgo = cms.bool(False),
    SiStripFedZeroSuppressionMode = cms.uint32(4),
    TruncateInSuppressor = cms.bool(True),
    consecThreshold = cms.uint32(5),
    distortionThreshold = cms.uint32(20),
    doAPVRestore = cms.bool(True),
    filteredBaselineDerivativeSumSquare = cms.double(30),
    filteredBaselineMax = cms.double(6),
    hitStripThreshold = cms.uint32(40),
    minStripsToFit = cms.uint32(4),
    nSaturatedStrip = cms.uint32(2),
    nSigmaNoiseDerTh = cms.uint32(4),
    nSmooth = cms.uint32(9),
    restoreThreshold = cms.double(0.5),
    slopeX = cms.int32(3),
    slopeY = cms.int32(4),
    useCMMeanMap = cms.bool(False),
    useRealMeanCM = cms.bool(False)
)

process.DefaultClusterizer = cms.PSet(
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    ChannelThreshold = cms.double(2.0),
    ClusterThreshold = cms.double(5.0),
    MaxAdjacentBad = cms.uint32(0),
    MaxSequentialBad = cms.uint32(1),
    MaxSequentialHoles = cms.uint32(0),
    QualityLabel = cms.string(''),
    RemoveApvShots = cms.bool(True),
    SeedThreshold = cms.double(3.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)

process.DiPhotonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_DoublePho85_v', 
        'HLT_Photon36_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon22_AND_HE10_R9Id65_Eta2_Mass15_v', 
        'HLT_Photon26_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon16_AND_HE10_R9Id65_Eta2_Mass60_v', 
        'HLT_Photon42_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon25_AND_HE10_R9Id65_Eta2_Mass15_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 50, 100, 150, 200, 
        250, 300, 400, 500, 600, 
        700, 800, 900, 1000, 1100, 
        1200, 1500),
    recElecLabel = cms.InputTag("gedGsfElectrons")
)

process.DigiToRawFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*')
)

process.DisplacedDimuonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_DoubleMu33NoFiltersNoVtx_v', 
        'HLT_DoubleMu38NoFiltersNoVtx_v', 
        'HLT_DoubleMu23NoFiltersNoVtxDisplaced_v', 
        'HLT_DoubleMu28NoFiltersNoVtxDisplaced_v'),
    minCandidates = cms.uint32(2),
    parametersTurnOn = cms.vdouble(0, 10, 20, 30, 40, 
        50, 100, 150, 200, 250, 
        300, 350, 400, 450, 500, 
        550, 600),
    recMuonLabel = cms.InputTag("muons")
)

process.DisplacedL2DimuonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_L2DoubleMu28_NoVertex_2Cha_Angle2p5_Mass10_v', 
        'HLT_L2DoubleMu23_NoVertex_v', 
        'HLT_L2DoubleMu38_NoVertex_2Cha_Angle2p5_Mass10_v'),
    minCandidates = cms.uint32(2),
    parametersTurnOn = cms.vdouble(0, 5, 10, 15, 20, 
        25, 30, 35, 40, 45, 
        50, 60, 70, 80, 100),
    recMuonTrkLabel = cms.InputTag("refittedStandAloneMuons")
)

process.DisplacedMuEGPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Mu38NoFiltersNoVtx_Photon38_CaloIdL_v', 
        'HLT_Mu42NoFiltersNoVtx_Photon42_CaloIdL_v', 
        'HLT_Mu33NoFiltersNoVtx_Photon33_CaloIdL_R9Id65_HE10_v', 
        'HLT_Mu28NoFiltersNoVtxDisplaced_Photon28_CaloIdL', 
        'HLT_Mu33NoFiltersNoVtxDisplaced_Photon33_CaloIdL'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 10, 20, 30, 40, 
        50, 100, 150, 200, 250, 
        300, 350, 400, 450, 500, 
        550, 600),
    recElecLabel = cms.InputTag("gedGsfElectrons"),
    recMuonLabel = cms.InputTag("muons")
)

process.DisplacedMuJetPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Mu38NoFiltersNoVtx_DisplacedJet60_Loose_v', 
        'HLT_Mu38NoFiltersNoVtxDisplaced_DisplacedJet60_Loose_v', 
        'HLT_Mu38NoFiltersNoVtxDisplaced_DisplacedJet60_Tight_v', 
        'HLT_Mu28NoFiltersNoVtx_DisplacedJet40_Loose_v', 
        'HLT_Mu28NoFiltersNoVtx_CentralCaloJet40_v', 
        'HLT_Mu23NoFiltersNoVtx_Photon23_CaloIdL_v', 
        'HLT_DoubleMu18NoFiltersNoVtx_v'),
    minCandidates = cms.uint32(1),
    parametersDxy = cms.vdouble(50, -50, 50),
    parametersTurnOn = cms.vdouble(100, 150, 200, 250, 300, 
        350, 400, 450, 500, 550, 
        600),
    recMuonLabel = cms.InputTag("muons"),
    recPFJetLabel = cms.InputTag("ak4PFJets")
)

process.EITopPAGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*')
)

process.EleIsoEcalFromHitsExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaRecHitExtractor'),
    DepositLabel = cms.untracked.string(''),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyMin = cms.double(0.095),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.6),
    intRadius = cms.double(0.0),
    intStrip = cms.double(0.0),
    isolationVariable = cms.string('et'),
    subtractSuperClusterEnergy = cms.bool(False),
    tryBoth = cms.bool(True),
    vetoClustered = cms.bool(False)
)

process.EleIsoHcalFromHitsExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaHcalExtractor'),
    DepositLabel = cms.untracked.string(''),
    etMin = cms.double(-999.0),
    extRadius = cms.double(0.6),
    hcalRecHits = cms.InputTag("hbhereco"),
    intRadius = cms.double(0.0)
)

process.EleIsoHcalFromTowersExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaTowerExtractor'),
    DepositLabel = cms.untracked.string(''),
    caloTowers = cms.InputTag("towerMaker"),
    etMin = cms.double(-999.0),
    extRadius = cms.double(0.6),
    hcalDepth = cms.int32(-1),
    intRadius = cms.double(0.0)
)

process.EleIsoTrackExtractorBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('EgammaTrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.0),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(9999.0),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    dzOption = cms.string('vz'),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.EleMuPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 5, 10, 15, 20, 
        25, 30, 35, 40, 45, 
        50, 55, 60, 65, 70, 
        75, 80, 85, 90, 95, 
        100, 105, 110, 115, 120, 
        125, 130, 135, 140, 145, 
        150, 155, 160, 165, 170, 
        175, 180, 185, 190, 195, 
        200),
    recElecLabel = cms.InputTag("gedGsfElectrons"),
    recMuonLabel = cms.InputTag("muons")
)

process.EmptyJetIdParams = cms.PSet(
    Pt010_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt010_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt010_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3050_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3050_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3050_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
)

process.EvtScalersAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*')
)

process.EvtScalersRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*')
)

process.FEVTDEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTDEBUGHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(1048576),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTHLTALLEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep *_*_*_HLT' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep *_tcdsDigis_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.GENRAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep recoGenMETs_*_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_logErrorHarvester_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.GamIsoEcalFromHitsExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaRecHitExtractor'),
    DepositLabel = cms.untracked.string(''),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    detector = cms.string('Ecal'),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyMin = cms.double(0.095),
    etMin = cms.double(0.0),
    extRadius = cms.double(0.6),
    intRadius = cms.double(0.0),
    intStrip = cms.double(0.0),
    isolationVariable = cms.string('et'),
    subtractSuperClusterEnergy = cms.bool(False),
    tryBoth = cms.bool(True),
    vetoClustered = cms.bool(False)
)

process.GamIsoHcalFromHitsExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaHcalExtractor'),
    DepositLabel = cms.untracked.string(''),
    etMin = cms.double(-999.0),
    extRadius = cms.double(0.6),
    hcalRecHits = cms.InputTag("hbhereco"),
    intRadius = cms.double(0.0)
)

process.GamIsoHcalFromTowersExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaTowerExtractor'),
    DepositLabel = cms.untracked.string(''),
    caloTowers = cms.InputTag("towerMaker"),
    etMin = cms.double(-999.0),
    extRadius = cms.double(0.6),
    hcalDepth = cms.int32(-1),
    intRadius = cms.double(0.0)
)

process.GamIsoTrackExtractorBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('EgammaTrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.0),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(9999.0),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    dzOption = cms.string('vz'),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.GenJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(5),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.0),
    Rho_EtaMax = cms.double(4.5),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("genParticlesForJets"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True)
)

process.GenParticleSelectionForEfficiency = cms.PSet(
    chargedOnlyGP = cms.bool(True),
    lipGP = cms.double(30.0),
    maxRapidityGP = cms.double(2.5),
    minRapidityGP = cms.double(-2.5),
    pdgIdGP = cms.vint32(),
    ptMinGP = cms.double(0.005),
    statusGP = cms.int32(1),
    tipGP = cms.double(60)
)

process.GeneratorInterfaceAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceLHE = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep *_externalLHEProducer_LHEScriptOutput_*')
)

process.GeneratorInterfaceRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GenericTriggerSelectionParameters = cms.PSet(
    andOr = cms.bool(False),
    andOrHlt = cms.bool(True),
    dbLabel = cms.string('PFTauDQMTrigger'),
    errorReplyHlt = cms.bool(False),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring('HLT_IsoMu*_eta*_LooseIsoPFTau*_v*', 
        'HLT_DoubleIsoPFTau*_Trk*_eta*_v*'),
    verbosityLevel = cms.uint32(0)
)

process.GlobalMuonRefitter = cms.PSet(
    CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
    Chi2CutCSC = cms.double(1.0),
    Chi2CutDT = cms.double(30.0),
    Chi2CutRPC = cms.double(1.0),
    Chi2ProbabilityCut = cms.double(30.0),
    DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
    DYTselector = cms.int32(1),
    DYTthrs = cms.vint32(10, 10),
    DYTupdator = cms.bool(True),
    DYTuseAPE = cms.bool(False),
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    HitThreshold = cms.int32(1),
    MuonHitsOption = cms.int32(1),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    PropDirForCosmics = cms.bool(False),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    PtCut = cms.double(1.0),
    RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
    RefitDirection = cms.string('insideOut'),
    RefitRPCHits = cms.bool(True),
    SkipStation = cms.int32(-1),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    TrackerSkipSection = cms.int32(-1),
    TrackerSkipSystem = cms.int32(-1)
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    )
)

process.GlobalTrajectoryBuilderCommon = cms.PSet(
    GlbRefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        Chi2CutCSC = cms.double(150.0),
        Chi2CutDT = cms.double(10.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(20, 30),
        DYTupdator = cms.bool(False),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('GlbMuKFFitter'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RefitDirection = cms.string('insideOut'),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaR = cms.double(0.2),
        DeltaZ_Region = cms.double(15.9),
        EscapePt = cms.double(1.5),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.double(0.2),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.string(''),
        OnDemand = cms.double(-1.0),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.double(0.2),
        Phi_min = cms.double(0.1),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseFixedRegion = cms.bool(False),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        vertexCollection = cms.InputTag("pixelVertices")
    ),
    PCut = cms.double(2.5),
    PtCut = cms.double(1.0),
    RefitRPCHits = cms.bool(True),
    ScaleTECxFactor = cms.double(-1.0),
    ScaleTECyFactor = cms.double(-1.0),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
)

process.GpSelectorForEfficiencyVsEtaBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    status = cms.int32(1),
    tip = cms.double(3.5)
)

process.GpSelectorForEfficiencyVsPhiBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    status = cms.int32(1),
    tip = cms.double(3.5)
)

process.GpSelectorForEfficiencyVsPtBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.05),
    status = cms.int32(1),
    tip = cms.double(3.5)
)

process.GpSelectorForEfficiencyVsVTXRBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    status = cms.int32(1),
    tip = cms.double(30.0)
)

process.GpSelectorForEfficiencyVsVTXZBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(35.0),
    maxRapidity = cms.double(2.5),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    status = cms.int32(1),
    tip = cms.double(3.5)
)

process.GroupedCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5 = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5Bottom = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('MeasurementTrackerBottom'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5Top = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('MeasurementTrackerTop'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTDEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.HLTDebugFEVT = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTDebugRAW = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerAOD = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'drop L1GlobalTriggerObjectMapRecord_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRAW = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRECO = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HTDisplacedJetsPSet = cms.PSet(
    MET_genCut = cms.string('sumEt > 75'),
    MET_recCut = cms.string('sumEt > 75'),
    hltPathsToCheck = cms.vstring('HLT_HT650_DisplacedDijet80_Inclusive_v', 
        'HLT_HT750_DisplacedDijet80_Inclusive_v', 
        'HLT_HT350_DisplacedDijet80_DisplacedTrack_v', 
        'HLT_HT350_DisplacedDijet80_Tight_DisplacedTrack_v', 
        'HLT_HT500_DisplacedDijet40_Inclusive_v', 
        'HLT_HT550_DisplacedDijet40_Inclusive_v', 
        'HLT_HT350_DisplacedDijet40_DisplacedTrack_v', 
        'HLT_VBF_DisplacedJet40_DisplacedTrack_v', 
        'HLT_VBF_DisplacedJet40_Hadronic_v', 
        'HLT_VBF_DisplacedJet40_TightID_DisplacedTrack_v', 
        'HLT_VBF_DisplacedJet40_TightID_Hadronic_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 50, 100, 150, 200, 
        220, 240, 260, 280, 300, 
        320, 340, 360, 380, 400, 
        420, 440, 460, 480, 500, 
        520, 540, 560, 580, 600, 
        620, 640, 660, 680, 700, 
        750, 800, 850, 900, 950, 
        1000, 1100, 1200, 1300, 1400, 
        1500),
    recPFJetLabel = cms.InputTag("ak4PFJets"),
    recPFMHTLabel = cms.InputTag("recoExoticaValidationHT")
)

process.HTPSet = cms.PSet(
    MET_genCut = cms.string('sumEt > 75'),
    MET_recCut = cms.string('sumEt > 75'),
    hltPathsToCheck = cms.vstring('HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_v', 
        'HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_v', 
        'HLT_PFHT750_4Jet_Pt50_v', 
        'HLT_PFHT650_4Jet_v', 
        'HLT_PFHT550_4Jet_v', 
        'HLT_PFHT800_v', 
        'HLT_PFHT650_v', 
        'HLT_HT900_v', 
        'HLT_HT300_v', 
        'HLT_ECALHT800_v', 
        'HLT_Photon90_CaloIdL_PFHT600_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 50, 100, 150, 200, 
        250, 300, 350, 400, 500, 
        600, 700, 800, 900, 1000),
    recPFJetLabel = cms.InputTag("ak4PFJets"),
    recPFMHTLabel = cms.InputTag("recoExoticaValidationHT")
)

process.HcalNoiseParameterSet = cms.PSet(
    TS4TS5EnergyThreshold = cms.double(50),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    calibdigiHBHEthreshold = cms.double(15),
    calibdigiHBHEtimeslices = cms.vint32(3, 4, 5, 6),
    calibdigiHFthreshold = cms.double(-999),
    calibdigiHFtimeslices = cms.vint32(0, 1, 2, 3, 4, 
        5, 6, 7, 8, 9),
    hlMaxHPDEMF = cms.double(-9999.0),
    hlMaxRBXEMF = cms.double(0.01),
    lMaxHighEHitTime = cms.double(9999.0),
    lMaxLowEHitTime = cms.double(9999.0),
    lMaxRatio = cms.double(999.0),
    lMinHPDHits = cms.int32(17),
    lMinHPDNoOtherHits = cms.int32(10),
    lMinHighEHitTime = cms.double(-9999.0),
    lMinLowEHitTime = cms.double(-9999.0),
    lMinRBXHits = cms.int32(999),
    lMinRatio = cms.double(-999.0),
    lMinZeros = cms.int32(10),
    lRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.5, 0.0, 
        0.0, 1.0, -0.5),
    minEEMF = cms.double(50.0),
    minERatio = cms.double(50.0),
    minEZeros = cms.double(10.0),
    minHighHitE = cms.double(25.0),
    minLowHitE = cms.double(10.0),
    minR45HitE = cms.double(5.0),
    minRecHitE = cms.double(1.5),
    pMaxHPDEMF = cms.double(0.02),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    pMaxRBXEMF = cms.double(0.02),
    pMaxRatio = cms.double(0.85),
    pMinE = cms.double(40.0),
    pMinEEMF = cms.double(10.0),
    pMinERatio = cms.double(25.0),
    pMinEZeros = cms.double(5.0),
    pMinHPDHits = cms.int32(10),
    pMinHPDNoOtherHits = cms.int32(7),
    pMinHighEHitTime = cms.double(-4.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinRBXHits = cms.int32(20),
    pMinRBXRechitR45Count = cms.int32(1),
    pMinRBXRechitR45EnergyFraction = cms.double(0.1),
    pMinRBXRechitR45Fraction = cms.double(0.1),
    pMinRatio = cms.double(0.75),
    pMinZeros = cms.int32(4),
    tMaxHighEHitTime = cms.double(6.0),
    tMaxLowEHitTime = cms.double(9999.0),
    tMaxRatio = cms.double(999.0),
    tMinHPDHits = cms.int32(16),
    tMinHPDNoOtherHits = cms.int32(9),
    tMinHighEHitTime = cms.double(-7.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMinRBXHits = cms.int32(50),
    tMinRatio = cms.double(-999.0),
    tMinZeros = cms.int32(8),
    tRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.2, 0.0, 
        0.0, 1.0, -0.2)
)

process.HcalReLabel = cms.PSet(
    RelabelHits = cms.untracked.bool(False),
    RelabelRules = cms.untracked.PSet(
        CorrectPhi = cms.untracked.bool(False),
        Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3),
        Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
            2, 2, 2, 2, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3),
        Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
            3, 3, 4, 4, 4, 
            4, 4, 5, 5, 5, 
            5, 5, 5, 5)
    )
)

process.HighPtDielectronPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_MW_v', 
        'HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_v'),
    minCandidates = cms.uint32(2),
    parametersTurnOn = cms.vdouble(0, 50, 100, 150, 200, 
        250, 300, 400, 500, 600, 
        700, 800, 900, 1000, 1100, 
        1200, 1500),
    recElecLabel = cms.InputTag("gedGsfElectrons")
)

process.HighPtDimuonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Mu30_TkMu11_v', 
        'HLT_Mu40_TkMu11_v', 
        'HLT_Mu27_TkMu8_v', 
        'HLT_Mu17_Mu8_v'),
    minCandidates = cms.uint32(2),
    parametersTurnOn = cms.vdouble(0, 50, 100, 150, 200, 
        250, 300, 400, 500, 600, 
        700, 800, 900, 1000, 1100, 
        1200, 1500),
    recMuonLabel = cms.InputTag("muons")
)

process.HighPtElectronPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Ele105_CaloIdVT_GsfTrkIdT_v', 
        'HLT_Ele115_CaloIdVT_GsfTrkIdT_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 50, 80, 90, 100, 
        110, 120, 150, 200, 250, 
        300, 400, 500, 600, 700, 
        800, 900, 1000, 1100, 1200, 
        1500),
    recElecLabel = cms.InputTag("gedGsfElectrons")
)

process.HighPtPhotonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Photon175_v', 
        'HLT_Photon165_HE10_v', 
        'HLT_Photon36_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon31_AND_HE10_R9Id65_Mass10_v', 
        'HLT_Photon26_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon16_AND_HE10_R9Id65_Mass60_v', 
        'HLT_Photon90_CaloIdL_PFHT600_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 50, 100, 150, 200, 
        250, 300, 400, 500, 600, 
        700, 800, 900, 1000, 1100, 
        1200, 1500),
    recPhotonLabel = cms.InputTag("gedPhotons")
)

process.IOMCRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_randomEngineStateProducer_*_*')
)

process.JPTZSPCorrectorAntiKt4 = cms.PSet(
    DzVertexCut = cms.double(0.2),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackNonEff.txt'),
    ElectronIds = cms.InputTag("JPTeidTight"),
    Electrons = cms.InputTag("gedGsfElectrons"),
    JetSplitMerge = cms.int32(0),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak4JetTracksAssociatorAtCaloFace"),
    JetTracksAssociationAtVertex = cms.InputTag("ak4JetTracksAssociatorAtVertexJPT"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_TrackLeakage.txt'),
    MaxJetEta = cms.double(3.0),
    Muons = cms.InputTag("muons"),
    PtErrorQuality = cms.double(0.05),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_538_response.txt'),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    UseElectrons = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseMuons = cms.bool(True),
    UseOutOfConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UsePions = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    UseTrackQuality = cms.bool(True),
    VectorialCorrection = cms.bool(True),
    Verbose = cms.bool(True)
)

process.JetIDParams = cms.PSet(
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    hoRecHitsColl = cms.InputTag("horeco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    useRecHits = cms.bool(True)
)

process.JetIdParams = cms.PSet(
    Pt010_Loose = cms.vdouble(0.0, 0.0, 0.0, 0.2),
    Pt010_Medium = cms.vdouble(0.2, 0.4, 0.2, 0.6),
    Pt010_Tight = cms.vdouble(0.5, 0.6, 0.6, 0.9),
    Pt1020_Loose = cms.vdouble(-0.4, -0.4, -0.4, 0.4),
    Pt1020_Medium = cms.vdouble(-0.3, 0.0, 0.0, 0.5),
    Pt1020_Tight = cms.vdouble(-0.2, 0.2, 0.2, 0.6),
    Pt2030_Loose = cms.vdouble(0.0, 0.0, 0.2, 0.6),
    Pt2030_Medium = cms.vdouble(0.2, 0.2, 0.5, 0.7),
    Pt2030_Tight = cms.vdouble(0.3, 0.4, 0.7, 0.8),
    Pt3050_Loose = cms.vdouble(0.0, 0.0, 0.6, 0.2),
    Pt3050_Medium = cms.vdouble(0.3, 0.2, 0.7, 0.8),
    Pt3050_Tight = cms.vdouble(0.5, 0.4, 0.8, 0.9)
)

process.JetNoBptxPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_JetE50_NoBPTX3BX_NoHalo_v', 
        'HLT_JetE30_NoBPTX_v', 
        'HLT_JetE30_NoBPTX3BX_NoHalo_v', 
        'HLT_JetE70_NoBPTX3BX_NoHalo_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 60, 70, 80, 90, 
        100, 110, 120, 130, 140, 
        150, 160, 170, 180, 190, 
        200, 220, 240, 260, 280, 
        300, 320, 340, 360, 380, 
        400, 420, 440, 460, 480, 
        500),
    recCaloJetLabel = cms.InputTag("ak4CaloJets")
)

process.L1ExtraInputTagSet = cms.PSet(
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticles","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticles","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticles","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticles","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticles","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticles","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticles","Tau")
    )
)

process.L1ExtraInputTagSetStage1 = cms.PSet(
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticlesStage1","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticlesStage1","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticlesStage1","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticlesStage1","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticlesStage1","Tau")
    )
)

process.L1TriggerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*')
)

process.L1TriggerRAWDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*')
)

process.L1TriggerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.LHEEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep *_externalLHEProducer_LHEScriptOutput_*'),
    splitLevel = cms.untracked.int32(0)
)

process.LowPtDielectronPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_MW_v', 
        'HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_v'),
    minCandidates = cms.uint32(2),
    parametersTurnOn = cms.vdouble(0, 5, 10, 15, 20, 
        25, 30, 35, 40, 45, 
        50, 60, 70, 80, 100),
    recElecLabel = cms.InputTag("gedGsfElectrons")
)

process.LowPtDimuonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Mu30_TkMu11_v', 
        'HLT_Mu17_TkMu8_DZ_v', 
        'HLT_Mu17_Mu8_DZ_v'),
    minCandidates = cms.uint32(2),
    parametersTurnOn = cms.vdouble(0, 5, 10, 15, 20, 
        25, 30, 35, 40, 45, 
        50, 60, 70, 80, 100),
    recMuonLabel = cms.InputTag("muons")
)

process.LowPtTrimuonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_TrkMu15_DoubleTrkMu5NoFiltersNoVtx_v', 
        'HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v', 
        'HLT_DiMuon0_Jpsi_Muon', 
        'HLT_Mu17_TkMu8_DZ', 
        'HLT_Mu17_Mu8_DZ'),
    minCandidates = cms.uint32(3),
    parametersDxy = cms.vdouble(50, -2.5, 2.5),
    recMuonLabel = cms.InputTag("muons")
)

process.LutParametersBlock = cms.PSet(
    LutParameters = cms.PSet(
        BTIC = cms.untracked.int32(0),
        D = cms.untracked.double(0),
        Debug = cms.untracked.bool(False),
        WHEEL = cms.untracked.int32(-1),
        XCN = cms.untracked.double(0)
    )
)

process.METplusTrackPSet = cms.PSet(
    genMETLabel = cms.InputTag("genMetTrue"),
    hltPathsToCheck = cms.vstring('HLT_MET75_IsoTrk50_v', 
        'HLT_MET95_IsoTrk50_v', 
        'HLT_MET60_IsoTrk35_Loose_v'),
    l1METLabel = cms.InputTag("l1extraParticles","MET"),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 10, 20, 30, 40, 
        50, 60, 70, 80, 90, 
        100, 110, 120, 130, 140, 
        150, 160, 170, 180, 190, 
        200, 210, 220, 230, 240, 
        250, 260, 270, 280, 290, 
        300, 310, 320, 330, 340, 
        350, 360, 370, 380, 390, 
        400),
    parametersTurnOnSumEt = cms.vdouble(0, 10, 20, 30, 40, 
        50, 60, 70, 80, 90, 
        100, 110, 120, 130, 140, 
        150, 160, 170, 180, 190, 
        200, 210, 220, 230, 240, 
        250, 260, 270, 280, 290, 
        300, 310, 320, 330, 340, 
        350, 360, 370, 380, 390, 
        400),
    recElecLabel = cms.InputTag("gedGsfElectrons"),
    recMuonLabel = cms.InputTag("muons"),
    recPFMETLabel = cms.InputTag("pfMet")
)

process.MEtoEDMConverterAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MEtoEDMConverterFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*')
)

process.MINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*', 
        'keep *_slimmedGenJets*_*_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*')
)

process.MIXINGMODULEEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_cfWriter_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.MIdIsoExtractorPSetBlock = cms.PSet(
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    ecalDepositName = cms.string('ecal'),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    jetDepositName = cms.string('jets'),
    trackDepositName = cms.string('tracker')
)

process.MIsoCaloExtractorByAssociatorHitsBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.025),
    Threshold_H = cms.double(0.1),
    Threshold_HO = cms.double(0.1),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(True)
)

process.MIsoCaloExtractorByAssociatorTowersBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Threshold_HO = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(False)
)

process.MIsoCaloExtractorEcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.0),
    Weight_H = cms.double(0.0)
)

process.MIsoCaloExtractorHLTBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.5),
    Weight_H = cms.double(1.0)
)

process.MIsoCaloExtractorHcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(0.0),
    Weight_H = cms.double(1.0)
)

process.MIsoDepositGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositParamGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoDepositViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoJetExtractorBlock = cms.PSet(
    ComponentName = cms.string('JetExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.1),
    ExcludeMuonVeto = cms.bool(True),
    JetCollectionLabel = cms.InputTag("ak4CaloJets"),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold = cms.double(5.0),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorDefault = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorHits = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorJets = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorTowers = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackExtractorBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorCtfBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorGsBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
)

process.MTVHistoProducerAlgoForTrackerBlock = cms.PSet(
    ComponentName = cms.string('MTVHistoProducerAlgoForTracker'),
    GpSelectorForEfficiencyVsEta = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        status = cms.int32(1),
        tip = cms.double(3.5)
    ),
    GpSelectorForEfficiencyVsPhi = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        status = cms.int32(1),
        tip = cms.double(3.5)
    ),
    GpSelectorForEfficiencyVsPt = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.05),
        status = cms.int32(1),
        tip = cms.double(3.5)
    ),
    GpSelectorForEfficiencyVsVTXR = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        status = cms.int32(1),
        tip = cms.double(30.0)
    ),
    GpSelectorForEfficiencyVsVTXZ = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(35.0),
        maxRapidity = cms.double(2.5),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        status = cms.int32(1),
        tip = cms.double(3.5)
    ),
    TpSelectorForEfficiencyVsEta = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minHit = cms.int32(0),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        signalOnly = cms.bool(True),
        stableOnly = cms.bool(False),
        tip = cms.double(3.5)
    ),
    TpSelectorForEfficiencyVsPhi = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minHit = cms.int32(0),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        signalOnly = cms.bool(True),
        stableOnly = cms.bool(False),
        tip = cms.double(3.5)
    ),
    TpSelectorForEfficiencyVsPt = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minHit = cms.int32(0),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.05),
        signalOnly = cms.bool(True),
        stableOnly = cms.bool(False),
        tip = cms.double(3.5)
    ),
    TpSelectorForEfficiencyVsVTXR = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minHit = cms.int32(0),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        signalOnly = cms.bool(True),
        stableOnly = cms.bool(False),
        tip = cms.double(60.0)
    ),
    TpSelectorForEfficiencyVsVTXZ = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minHit = cms.int32(0),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        signalOnly = cms.bool(True),
        stableOnly = cms.bool(False),
        tip = cms.double(3.5)
    ),
    cotThetaRes_nbin = cms.int32(300),
    cotThetaRes_rangeMax = cms.double(0.02),
    cotThetaRes_rangeMin = cms.double(-0.02),
    dxyRes_nbin = cms.int32(500),
    dxyRes_rangeMax = cms.double(0.1),
    dxyRes_rangeMin = cms.double(-0.1),
    dzRes_nbin = cms.int32(150),
    dzRes_rangeMax = cms.double(0.05),
    dzRes_rangeMin = cms.double(-0.05),
    generalGpSelector = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        status = cms.int32(1),
        tip = cms.double(3.5)
    ),
    generalTpSelector = cms.PSet(
        chargedOnly = cms.bool(True),
        lip = cms.double(30.0),
        maxRapidity = cms.double(2.5),
        minHit = cms.int32(0),
        minRapidity = cms.double(-2.5),
        pdgId = cms.vint32(),
        ptMin = cms.double(0.9),
        signalOnly = cms.bool(True),
        stableOnly = cms.bool(False),
        tip = cms.double(3.5)
    ),
    maxDeDx = cms.double(10.0),
    maxDxy = cms.double(25),
    maxDz = cms.double(30),
    maxEta = cms.double(2.5),
    maxHit = cms.double(40.5),
    maxLayers = cms.double(15.5),
    maxPhi = cms.double(3.1416),
    maxPt = cms.double(1000),
    maxPu = cms.double(199.5),
    maxVertcount = cms.double(160.5),
    maxVertpos = cms.double(60),
    maxZpos = cms.double(30),
    maxdr = cms.double(1),
    minDeDx = cms.double(0.0),
    minDxy = cms.double(-25),
    minDz = cms.double(-30),
    minEta = cms.double(-2.5),
    minHit = cms.double(-0.5),
    minLayers = cms.double(-0.5),
    minPhi = cms.double(-3.1416),
    minPt = cms.double(0.1),
    minPu = cms.double(-0.5),
    minVertcount = cms.double(-0.5),
    minVertpos = cms.double(0),
    minZpos = cms.double(-30),
    mindr = cms.double(0.001),
    nintDeDx = cms.int32(40),
    nintDxy = cms.int32(100),
    nintDz = cms.int32(60),
    nintEta = cms.int32(50),
    nintHit = cms.int32(41),
    nintLayers = cms.int32(16),
    nintPhi = cms.int32(36),
    nintPt = cms.int32(40),
    nintPu = cms.int32(100),
    nintVertcount = cms.int32(161),
    nintVertpos = cms.int32(60),
    nintZpos = cms.int32(60),
    nintdr = cms.int32(100),
    phiRes_nbin = cms.int32(300),
    phiRes_rangeMax = cms.double(0.01),
    phiRes_rangeMin = cms.double(-0.01),
    ptRes_nbin = cms.int32(100),
    ptRes_rangeMax = cms.double(0.1),
    ptRes_rangeMin = cms.double(-0.1),
    useFabsEta = cms.bool(False),
    useInvPt = cms.bool(False),
    useLogPt = cms.untracked.bool(True)
)

process.MaxConsecLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxConsecLostHitsTrajectoryFilter'),
    maxConsecLostHits = cms.int32(1)
)

process.MaxHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxHitsTrajectoryFilter'),
    maxNumberOfHits = cms.int32(100)
)

process.MaxLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxLostHitsTrajectoryFilter'),
    maxLostHits = cms.int32(1)
)

process.MicroEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*')
)

process.MicroEventContentMC = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*', 
        'keep *_slimmedGenJets*_*_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*')
)

process.MinHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinHitsTrajectoryFilter'),
    minimumNumberOfHits = cms.int32(5)
)

process.MinPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinPtTrajectoryFilter'),
    minHitsMinPt = cms.int32(3),
    minPt = cms.double(1.0),
    nSigmaMinPt = cms.double(5.0)
)

process.MonojetBackupPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_CaloJet500_NoJetID_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(400, 410, 420, 430, 440, 
        450, 460, 470, 480, 490, 
        500, 510, 520, 530, 540, 
        550, 560, 570, 580, 590, 
        600),
    recCaloJetLabel = cms.InputTag("ak4CaloJets"),
    recPFJetLabel = cms.InputTag("ak4PFJets"),
    recPFMETLabel = cms.InputTag("pfMet")
)

process.MonojetPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_PFMETNoMu90_NoiseCleaned_PFMHTNoMu90_IDTight_v', 
        'HLT_PFMETNoMu120_NoiseCleaned_PFMHTNoMu120_IDTight_v', 
        'HLT_CaloMET200_NoiseCleaned_v', 
        'HLT_MonoCentralPFJet80_PFMETNoMu120_NoiseCleaned_PFMHTNoMu120_IDTight_v', 
        'HLT_MonoCentralPFJet80_PFMETNoMu90_NoiseCleaned_PFMHTNoMu90_IDTight_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 60, 70, 80, 90, 
        100, 110, 120, 130, 140, 
        150, 160, 170, 180, 190, 
        200, 220, 240, 260, 280, 
        300, 320, 340, 360, 380, 
        400, 420, 440, 460, 480, 
        500, 600, 700, 800, 900, 
        1100, 1200, 1400, 1600, 1800, 
        2000, 2200, 2400, 2600, 2800, 
        3000),
    recCaloJetLabel = cms.InputTag("ak4CaloJets"),
    recPFJetLabel = cms.InputTag("ak4PFJets"),
    recPFMETLabel = cms.InputTag("recoExoticaValidationMETNoMu"),
    recPFMHTLabel = cms.InputTag("recoExoticaValidationMHTNoMu")
)

process.MuonCaloCompatibilityBlock = cms.PSet(
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    )
)

process.MuonCosmicCompatibilityParameters = cms.PSet(
    CosmicCompFillerParameters = cms.PSet(
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        angleCut = cms.double(0.1),
        corrTimeNeg = cms.double(-10),
        corrTimePos = cms.double(5),
        deltaPt = cms.double(0.1),
        hIpTrdxy = cms.double(0.02),
        hIpTrvProb = cms.double(0.5),
        ipCut = cms.double(0.02),
        largedxy = cms.double(2.0),
        largedxyMult = cms.double(3.0),
        maxdxyLoose = cms.double(0.01),
        maxdxyLooseMult = cms.double(0.01),
        maxdxyTight = cms.double(1.0),
        maxdxyTightMult = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        maxdzLooseMult = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        maxdzTightMult = cms.double(10.0),
        maxvertRho = cms.double(5),
        maxvertZ = cms.double(20),
        minvProb = cms.double(0.001),
        nChamberMatches = cms.int32(1),
        nTrackThreshold = cms.int32(3),
        offTimeNegLoose = cms.double(-15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        offTimeNegTight = cms.double(-20.0),
        offTimeNegTightMult = cms.double(-20.0),
        offTimePosLoose = cms.double(15.0),
        offTimePosLooseMult = cms.double(15.0),
        offTimePosTight = cms.double(25.0),
        offTimePosTightMult = cms.double(25.0),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        sharedHits = cms.int32(5)
    )
)

process.MuonNoBptxPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_L2Mu35_NoVertex_3Sta_NoBPTX3BX_NoHalo_v', 
        'HLT_L2Mu10_NoVertex_NoBPTX_v', 
        'HLT_L2Mu10_NoVertex_NoBPTX3BX_NoHalo_v', 
        'HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_NoHalo_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 5, 10, 15, 20, 
        25, 30, 35, 40, 45, 
        50, 60, 70, 80, 100),
    recMuonTrkLabel = cms.InputTag("refittedStandAloneMuons")
)

process.MuonSegmentMatcher = cms.PSet(
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        DTsegments = cms.InputTag("dt4DSegments"),
        TightMatchCSC = cms.bool(True),
        TightMatchDT = cms.bool(False)
    )
)

process.MuonServiceProxy = cms.PSet(
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.MuonShowerParameters = cms.PSet(
    MuonShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)

process.MuonTrackLoaderForCosmic = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForGLB = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForL2 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForL3 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(True),
        SmoothTkTrack = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoaderL3'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForSTA = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackingRegionCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaR = cms.double(0.2),
        DeltaZ_Region = cms.double(15.9),
        EscapePt = cms.double(1.5),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.double(0.2),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.string(''),
        OnDemand = cms.double(-1.0),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.double(0.2),
        Phi_min = cms.double(0.1),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseFixedRegion = cms.bool(False),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        vertexCollection = cms.InputTag("pixelVertices")
    )
)

process.MuonUpdatorAtVertex = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorOpposite')
    )
)

process.MuonUpdatorAtVertexAnyDirection = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    )
)

process.NoVertexGeneratorBlock = cms.PSet(
    VertexGenerator = cms.PSet(
        type = cms.string('None')
    )
)

process.OutALCARECODtCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECODtCalibCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECODtCalibCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECODtCalibHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECODtCalibHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECODtCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECOEcalCalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Cleaned_*_*', 
        'drop *_*cleaned*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'keep recoSuperClusters_*_uncleanOnly_*', 
        'drop *_*_multi5x5Barrel*Clusters_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'drop *_dqmL1ExtraParticles_*_*', 
        'drop recoSuperClusters_mergedSuperClusters_*_*', 
        'keep *CaloCluster*_*alCaIsolatedElectrons*_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalCalEtaCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*')
)

process.OutALCARECOEcalCalEtaCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*')
)

process.OutALCARECOEcalCalPi0Calib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*')
)

process.OutALCARECOEcalCalPi0Calib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*')
)

process.OutALCARECOEcalCalWElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Cleaned_*_*', 
        'drop *_*cleaned*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'keep recoSuperClusters_*_uncleanOnly_*', 
        'drop *_*_multi5x5Barrel*Clusters_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'drop *_dqmL1ExtraParticles_*_*', 
        'drop recoSuperClusters_mergedSuperClusters_*_*', 
        'keep *CaloCluster*_*alCaIsolatedElectrons*_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalWElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalWElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalCalZElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Cleaned_*_*', 
        'drop *_*cleaned*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'keep recoSuperClusters_*_uncleanOnly_*', 
        'drop *_*_multi5x5Barrel*Clusters_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'drop *_dqmL1ExtraParticles_*_*', 
        'drop recoSuperClusters_mergedSuperClusters_*_*', 
        'keep *CaloCluster*_*alCaIsolatedElectrons*_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalZElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalRecalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalRecalZElectron', 
            'pathALCARECOEcalRecalZSCElectron', 
            'pathALCARECOEcalRecalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_electronRecalibSCAssociator_*_*', 
        'drop *_gedGsfElectron*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*')
)

process.OutALCARECOEcalRecalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_electronRecalibSCAssociator_*_*')
)

process.OutALCARECOEcalUncalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron', 
            'pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'drop *EcalRecHit*_*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalWElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'drop *EcalRecHit*_*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalWElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalZElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'drop *EcalRecHit*_*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalZElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectrons*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhotons_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep l1extraL1EmParticles_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOHcalCalDijets = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_DiJetsProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep recoTracks_generalTracks_*_*')
)

process.OutALCARECOHcalCalDijets_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('keep *_DiJetsProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep recoTracks_generalTracks_*_*')
)

process.OutALCARECOHcalCalGammaJet = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep recoPhotonCores_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_GammaJetProd_*_*')
)

process.OutALCARECOHcalCalGammaJet_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('keep recoPhotonCores_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_GammaJetProd_*_*')
)

process.OutALCARECOHcalCalHO = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hoCalibProducer_*_*')
)

process.OutALCARECOHcalCalHOCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep HOCalibVariabless_*_*_*')
)

process.OutALCARECOHcalCalHOCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep HOCalibVariabless_*_*_*')
)

process.OutALCARECOHcalCalHO_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('keep *_hoCalibProducer_*_*')
)

process.OutALCARECOHcalCalIsoTrk = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*')
)

process.OutALCARECOHcalCalIsoTrk_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*')
)

process.OutALCARECOHcalCalIterativePhiSym = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIterativePhiSym')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_horeco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalIterativePhiSym_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIterativePhiSym')
    ),
    outputCommands = cms.untracked.vstring('keep *_horeco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBiasHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbhereco_*_*', 
        'keep HORecHitsSorted_horeco_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBiasHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbhereco_*_*', 
        'keep HORecHitsSorted_horeco_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalNoise = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalNoise_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalPedestal = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalPedestal')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaPedestal_*_*', 
        'keep HBHERecHitsSorted_hbherecoPedestal_*_*', 
        'keep HORecHitsSorted_horecoPedestal_*_*', 
        'keep HFRecHitsSorted_hfrecoPedestal_*_*')
)

process.OutALCARECOHcalCalPedestal_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalPedestal')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaPedestal_*_*', 
        'keep HBHERecHitsSorted_hbherecoPedestal_*_*', 
        'keep HORecHitsSorted_horecoPedestal_*_*', 
        'keep HFRecHitsSorted_hfrecoPedestal_*_*')
)

process.OutALCARECOHotline = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathHotlineSkimSingleMuon', 
            'pathHotlineSkimDoubleMuon', 
            'pathHotlineSkimTripleMuon', 
            'pathHotlineSkimSingleElectron', 
            'pathHotlineSkimDoubleElectron', 
            'pathHotlineSkimTripleElectron', 
            'pathHotlineSkimSinglePhoton', 
            'pathHotlineSkimDoublePhoton', 
            'pathHotlineSkimTriplePhoton', 
            'pathHotlineSkimSingleJet', 
            'pathHotlineSkimDoubleJet', 
            'pathHotlineSkimMultiJet', 
            'pathHotlineSkimHT', 
            'pathHotlineSkimMassiveDimuon', 
            'pathHotlineSkimMassiveDielectron', 
            'pathHotlineSkimMassiveEMu', 
            'pathHotlineSkimPFMET', 
            'pathHotlineSkimCaloMET', 
            'pathHotlineSkimCondMET')
    ),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*' ) )
)

process.OutALCARECOHotline_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathHotlineSkimSingleMuon', 
            'pathHotlineSkimDoubleMuon', 
            'pathHotlineSkimTripleMuon', 
            'pathHotlineSkimSingleElectron', 
            'pathHotlineSkimDoubleElectron', 
            'pathHotlineSkimTripleElectron', 
            'pathHotlineSkimSinglePhoton', 
            'pathHotlineSkimDoublePhoton', 
            'pathHotlineSkimTriplePhoton', 
            'pathHotlineSkimSingleJet', 
            'pathHotlineSkimDoubleJet', 
            'pathHotlineSkimMultiJet', 
            'pathHotlineSkimHT', 
            'pathHotlineSkimMassiveDimuon', 
            'pathHotlineSkimMassiveDielectron', 
            'pathHotlineSkimMassiveEMu', 
            'pathHotlineSkimPFMET', 
            'pathHotlineSkimCaloMET', 
            'pathHotlineSkimCondMET')
    ),
    outputCommands = cms.untracked.vstring( ('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*' ) )
)

process.OutALCARECOLumiPixels = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixels')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_siPixelClustersForLumi_*_*', 
        'keep *_TriggerResults_*_HLT')
)

process.OutALCARECOLumiPixelsMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixelsMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_siPixelClusters_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOLumiPixelsMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixelsMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_siPixelClusters_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOLumiPixels_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixels')
    ),
    outputCommands = cms.untracked.vstring('keep *_siPixelClustersForLumi_*_*', 
        'keep *_TriggerResults_*_HLT')
)

process.OutALCARECOMuAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOPromptCalibProd = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProdSiStrip = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStrip')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGains = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGains')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGains_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGains_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGains')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGains_*_*')
)

process.OutALCARECOPromptCalibProdSiStrip_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStrip')
    ),
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProd_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECORpcCalHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECORpcCalHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECOSiPixelLorentzAngle = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiPixelLorentzAngle_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiStripCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripPCLHistos = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripPCLHistos')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOSiStripPCLHistos_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripPCLHistos')
    ),
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOTkAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF', 
            'pathALCARECOTkAlCosmicsRegional')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0T = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T', 
            'pathALCARECOTkAlCosmicsRegional0T')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0THLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT', 
            'pathALCARECOTkAlCosmicsRegional0THLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0THLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT', 
            'pathALCARECOTkAlCosmicsRegional0THLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0T_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T', 
            'pathALCARECOTkAlCosmicsRegional0T')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT', 
            'pathALCARECOTkAlCosmicsRegionalHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT', 
            'pathALCARECOTkAlCosmicsRegionalHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF', 
            'pathALCARECOTkAlCosmicsRegional')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlJpsiMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlJpsiMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlLAS = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlLAST0Producer_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlLAS_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlLAST0Producer_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBiasHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBiasHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMuonIsolated = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolatedPA = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedPA')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolatedPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolatedPA_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedPA')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolatedPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolated_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.PFJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)

process.PFRecoTauPFJetInputs = cms.PSet(
    inputJetCollection = cms.InputTag("ak4PFJets"),
    isolationConeSize = cms.double(0.5),
    jetConeSize = cms.double(0.5),
    maxJetAbsEta = cms.double(2.5),
    minJetPt = cms.double(14.0)
)

process.PFTauQualityCuts = cms.PSet(
    isolationQualityCuts = cms.PSet(
        maxDeltaZ = cms.double(0.2),
        maxTrackChi2 = cms.double(100.0),
        maxTransverseImpactParameter = cms.double(0.03),
        minGammaEt = cms.double(1.5),
        minTrackHits = cms.uint32(8),
        minTrackPixelHits = cms.uint32(0),
        minTrackPt = cms.double(1.0),
        minTrackVertexWeight = cms.double(-1.0)
    ),
    leadingTrkOrPFCandOption = cms.string('leadPFCand'),
    primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
    pvFindingAlgo = cms.string('closestInDeltaZ'),
    recoverLeadingTrk = cms.bool(False),
    signalQualityCuts = cms.PSet(
        maxDeltaZ = cms.double(0.4),
        maxTrackChi2 = cms.double(100.0),
        maxTransverseImpactParameter = cms.double(0.1),
        minGammaEt = cms.double(0.5),
        minNeutralHadronEt = cms.double(30.0),
        minTrackHits = cms.uint32(3),
        minTrackPixelHits = cms.uint32(0),
        minTrackPt = cms.double(0.5),
        minTrackVertexWeight = cms.double(-1.0)
    ),
    vertexTrackFiltering = cms.bool(False),
    vxAssocQualityCuts = cms.PSet(
        maxTrackChi2 = cms.double(100.0),
        maxTransverseImpactParameter = cms.double(0.1),
        minGammaEt = cms.double(0.5),
        minTrackHits = cms.uint32(3),
        minTrackPixelHits = cms.uint32(0),
        minTrackPt = cms.double(0.5),
        minTrackVertexWeight = cms.double(-1.0)
    )
)

process.PREMIXEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep recoGenMETs_*_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_simMuonRPCDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.PREMIXRAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'drop CrossingFramePlaybackInfoNew_mix_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.PhilV0 = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt010_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt010_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3050_Loose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3050_Medium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3050_Tight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    tmvaMethod = cms.string('JetID'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/mva_JetID.weights.xml.gz'),
    version = cms.int32(0)
)

process.PhilV1 = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(0.0, 0.0, 0.0, 0.2),
        Pt010_Medium = cms.vdouble(0.2, 0.4, 0.2, 0.6),
        Pt010_Tight = cms.vdouble(0.5, 0.6, 0.6, 0.9),
        Pt1020_Loose = cms.vdouble(-0.4, -0.4, -0.4, 0.4),
        Pt1020_Medium = cms.vdouble(-0.3, 0.0, 0.0, 0.5),
        Pt1020_Tight = cms.vdouble(-0.2, 0.2, 0.2, 0.6),
        Pt2030_Loose = cms.vdouble(0.0, 0.0, 0.2, 0.6),
        Pt2030_Medium = cms.vdouble(0.2, 0.2, 0.5, 0.7),
        Pt2030_Tight = cms.vdouble(0.3, 0.4, 0.7, 0.8),
        Pt3050_Loose = cms.vdouble(0.0, 0.0, 0.6, 0.2),
        Pt3050_Medium = cms.vdouble(0.3, 0.2, 0.7, 0.8),
        Pt3050_Tight = cms.vdouble(0.5, 0.4, 0.8, 0.9)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('philv1'),
    tmvaMethod = cms.string('JetID'),
    tmvaSpectators = cms.vstring(),
    tmvaVariables = cms.vstring('nvtx', 
        'jetPt', 
        'jetEta', 
        'jetPhi', 
        'dZ', 
        'd0', 
        'beta', 
        'betaStar', 
        'nCharged', 
        'nNeutrals', 
        'dRMean', 
        'frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/mva_JetID_v1.weights.xml.gz'),
    version = cms.int32(-1)
)

process.PhotonMETPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Photon135_PFMET100_NoiseCleaned_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 5, 10, 15, 20, 
        25, 30, 35, 40, 45, 
        50, 55, 60, 65, 70, 
        75, 80, 85, 90, 95, 
        100, 105, 110, 115, 120, 
        125, 130, 135, 140, 145, 
        150, 155, 160, 165, 170, 
        175, 180, 185, 190, 195, 
        200),
    recPFMETLabel = cms.InputTag("pfMet"),
    recPhotonLabel = cms.InputTag("gedPhotons")
)

process.PixelFitterByHelixProjections = cms.PSet(
    ComponentName = cms.string('PixelFitterByHelixProjections'),
    TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
)

process.PixelTrackReconstructionBlock = cms.PSet(
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    FilterPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackFilterByKinematics'),
        chi2 = cms.double(1000.0),
        nSigmaInvPtTolerance = cms.double(0.0),
        nSigmaTipMaxTolerance = cms.double(0.0),
        ptMin = cms.double(0.1),
        tipMax = cms.double(1.0)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("PixelLayerTriplets")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    useFilterWithES = cms.bool(False)
)

process.PixelTripletHLTGenerator = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PixelTripletHLTGeneratorWithFilter = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
    ),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PixelTripletLargeTipGenerator = cms.PSet(
    ComponentName = cms.string('PixelTripletLargeTipGenerator'),
    extraHitRPhitolerance = cms.double(0.0),
    extraHitRZtolerance = cms.double(0.0),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PuJetIdCutBased_wp = cms.PSet(
    Pt010_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt010_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt010_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
    Pt010_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.07),
    Pt010_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
    Pt010_RMSTight = cms.vdouble(0.06, 0.07, 0.04, 0.05),
    Pt1020_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt1020_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt1020_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
    Pt1020_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.07),
    Pt1020_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
    Pt1020_RMSTight = cms.vdouble(0.06, 0.07, 0.04, 0.05),
    Pt2030_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt2030_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt2030_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
    Pt2030_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.055),
    Pt2030_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
    Pt2030_RMSTight = cms.vdouble(0.05, 0.07, 0.03, 0.045),
    Pt3050_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt3050_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
    Pt3050_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
    Pt3050_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.055),
    Pt3050_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
    Pt3050_RMSTight = cms.vdouble(0.05, 0.06, 0.03, 0.04)
)

process.PuJetIdMinMVA_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.9, -0.9, -0.94, -0.9),
    Pt010_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
    Pt010_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
    Pt1020_Loose = cms.vdouble(-0.9, -0.9, -0.94, -0.9),
    Pt1020_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
    Pt1020_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
    Pt2030_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
    Pt2030_Medium = cms.vdouble(0.1, -0.4, -0.5, -0.45),
    Pt2030_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0),
    Pt3050_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
    Pt3050_Medium = cms.vdouble(0.1, -0.4, -0.5, -0.45),
    Pt3050_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0)
)

process.PuJetIdOptMVA_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.9, -0.9, -0.9, -0.9),
    Pt010_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
    Pt010_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
    Pt1020_Loose = cms.vdouble(-0.9, -0.9, -0.9, -0.9),
    Pt1020_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
    Pt1020_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
    Pt2030_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
    Pt2030_Medium = cms.vdouble(0.1, -0.4, -0.4, -0.45),
    Pt2030_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0),
    Pt3050_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
    Pt3050_Medium = cms.vdouble(0.1, -0.4, -0.4, -0.45),
    Pt3050_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0)
)

process.PureMETPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_PFMET170_NoiseCleaned_v', 
        'HLT_CaloMET200_NoiseCleaned_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 60, 70, 80, 90, 
        100, 110, 120, 130, 140, 
        150, 160, 170, 180, 190, 
        200, 220, 240, 260, 280, 
        300, 320, 340, 360, 380, 
        400, 420, 440, 460, 480, 
        500),
    recCaloMETLabel = cms.InputTag("caloMet"),
    recPFMETLabel = cms.InputTag("pfMet")
)

process.RAWDEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RAWDEBUGHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECODEBUGHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOSIMHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBUncalibrator_*_*', 
        'keep *_hltAlCaEtaEEUncalibrator_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBUncalibrator_*_*', 
        'keep *_hltAlCaPi0EEUncalibrator_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEvent_*_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECODEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.REDIGIEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('drop *', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'drop *_randomEngineStateProducer_*_*')
)

process.REGENEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('keep *', 
        'drop *_genParticles_*_*', 
        'drop *_genParticlesForJets_*_*', 
        'drop *_kt4GenJets_*_*', 
        'drop *_kt6GenJets_*_*', 
        'drop *_iterativeCone5GenJets_*_*', 
        'drop *_ak4GenJets_*_*', 
        'drop *_ak7GenJets_*_*', 
        'drop *_ak8GenJets_*_*', 
        'drop *_ak4GenJetsNoNu_*_*', 
        'drop *_ak8GenJetsNoNu_*_*', 
        'drop *_genCandidatesForMET_*_*', 
        'drop *_genParticlesForMETAllVisible_*_*', 
        'drop *_genMetCalo_*_*', 
        'drop *_genMetCaloAndNonPrompt_*_*', 
        'drop *_genMetTrue_*_*', 
        'drop *_genMetIC5GenJs_*_*')
)

process.REPACKRAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'drop FEDRawDataCollection_source_*_*', 
        'drop FEDRawDataCollection_rawDataCollector_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.REPACKRAWSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'drop FEDRawDataCollection_source_*_*', 
        'drop FEDRawDataCollection_rawDataCollector_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RESIMEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('drop *', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.RecoBTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*')
)

process.RecoBTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*')
)

process.RecoBTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*')
)

process.RecoBTauAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoEcalAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*')
)

process.RecoEcalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep *_reducedEcalRecHitsEB_*_*', 
        'keep *_reducedEcalRecHitsEE_*_*', 
        'keep *_reducedEcalRecHitsES_*_*', 
        'keep *_interestingEcalDetId*_*_*', 
        'keep *_ecalWeightUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5*_*_*', 
        'keep *_correctedMulti5x5*_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*')
)

process.RecoEcalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*')
)

process.RecoEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*')
)

process.RecoEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_gsfElectronCores_*_*', 
        'keep *_gsfElectrons_*_*', 
        'keep *_uncleanedOnlyGsfElectronCores_*_*', 
        'keep *_uncleanedOnlyGsfElectrons_*_*', 
        'keep *_eidRobustLoose_*_*', 
        'keep *_eidRobustTight_*_*', 
        'keep *_eidRobustHighEnergy_*_*', 
        'keep *_eidLoose_*_*', 
        'keep *_eidTight_*_*', 
        'keep *_egmGedGsfElectronPF*Isolation_*_*', 
        'keep *_egmGsfElectronIDs_*_*', 
        'keep *_egmPhotonIDs_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'keep *_conversions_*_*', 
        'keep *_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotonsTmp_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep *_photonCore_*_*', 
        'keep *_photons_*_*', 
        'keep *_mustachePhotonCore_*_*', 
        'keep *_mustachePhotons_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_allConversionsOldEG_*_*', 
        'keep *_ckfOutInTracksFrom*Conversions_*_*', 
        'keep *_ckfInOutTracksFrom*Conversions_*_*', 
        'keep *_uncleanedOnlyAllConversions_*_*', 
        'keep *_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep *_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*')
)

process.RecoEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*')
)

process.RecoGenJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoHcalNoiseAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('drop recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*')
)

process.RecoJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloJets_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoTrackJets_*_*_*', 
        'keep recoJPTJets_*_*_*', 
        'keep recoBasicJets_*_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_kt4JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex*_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace*_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex*_*_*', 
        'keep *_ak7JetTracksAssociatorAtCaloFace*_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_*JetID_*_*', 
        'keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep *_kt4TrackJets_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ca*Mass_*_*', 
        'keep *_ak*Mass_*_*')
)

process.RecoJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*')
)

process.RecoLocalCaloAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_*_*_*')
)

process.RecoLocalCaloFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HBHERecHitsSorted_hbheprerecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalMultiFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*')
)

process.RecoLocalCaloRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*')
)

process.RecoLocalMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_clusterSummaryProducer_*_*')
)

process.RecoLocalTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*')
)

process.RecoLocalTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*')
)

process.RecoMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*')
)

process.RecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoMuonIsolationFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationParamGlobal = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muParamGlobalIsoDepositGsTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalEcal_*_*', 
        'keep *_muParamGlobalIsoDepositCalHcal_*_*', 
        'keep *_muParamGlobalIsoDepositCtfTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muParamGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoParticleFlowAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*')
)

process.RecoParticleFlowFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHFEM_*_*', 
        'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*')
)

process.RecoParticleFlowRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*')
)

process.RecoPixelVertexingFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*')
)

process.RecoPixelVertexingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*')
)

process.RecoTauTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*')
)

process.RecoTauTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*')
)

process.RecoTauTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*')
)

process.RecoTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*')
)

process.RecoTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*')
)

process.RecoTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*')
)

process.RecoVertexAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.RecoVertexFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.RecoVertexRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.RegionPSetBlock = cms.PSet(
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(21.2),
        originRadius = cms.double(0.2),
        originXPos = cms.double(0.0),
        originYPos = cms.double(0.0),
        originZPos = cms.double(0.0),
        precise = cms.bool(True),
        ptMin = cms.double(0.9)
    )
)

process.RegionPSetWithVerticesBlock = cms.PSet(
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.2),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        sigmaZVertex = cms.double(3.0),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True)
    )
)

process.RegionPsetFomBeamSpotBlock = cms.PSet(
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9)
    )
)

process.RegionPsetFomBeamSpotBlockFixedZ = cms.PSet(
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        originHalfLength = cms.double(21.2),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9)
    )
)

process.SK_ME1234 = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(8.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.SK_ME1A = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.025),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.ST_ME1234 = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(20),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.ST_ME1A = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(24),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.SectCollParametersBlock = cms.PSet(
    SectCollParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SCCSP1 = cms.int32(0),
        SCCSP2 = cms.int32(0),
        SCCSP3 = cms.int32(0),
        SCCSP4 = cms.int32(0),
        SCCSP5 = cms.int32(0),
        SCECF1 = cms.bool(False),
        SCECF2 = cms.bool(False),
        SCECF3 = cms.bool(False),
        SCECF4 = cms.bool(False)
    )
)

process.SiPixelGainCalibrationServiceParameters = cms.PSet(

)

process.SiPixelSimBlock = cms.PSet(
    AdcFullScale = cms.int32(255),
    AdcFullScaleStack = cms.int32(255),
    AddNoise = cms.bool(True),
    AddNoisyPixels = cms.bool(True),
    AddPixelInefficiencyFromPython = cms.bool(True),
    AddThresholdSmearing = cms.bool(True),
    Alpha2Order = cms.bool(True),
    BPix_SignalResponse_p0 = cms.double(0.0035),
    BPix_SignalResponse_p1 = cms.double(1.23),
    BPix_SignalResponse_p2 = cms.double(97.4),
    BPix_SignalResponse_p3 = cms.double(126.5),
    ChargeVCALSmearing = cms.bool(True),
    DeadModules = cms.VPSet(cms.PSet(
        Dead_detID = cms.int32(302055940),
        Module = cms.string('tbmB')
    ), 
        cms.PSet(
            Dead_detID = cms.int32(302059800),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302121992),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302123296),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302125060),
            Module = cms.string('tbmA')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302125076),
            Module = cms.string('tbmA')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302126364),
            Module = cms.string('tbmB')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302126596),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302127136),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302188552),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302188824),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302194200),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302195232),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302197252),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302197784),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453892),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453896),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453900),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453904),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454916),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454920),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454924),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454928),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455940),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455944),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455948),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455952),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454148),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454152),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454156),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455172),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455176),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455180),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352456196),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352456200),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352456204),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999748),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999752),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999756),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999760),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344014340),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344014344),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344014348),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344019460),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344019464),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344019468),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077572),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077576),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077580),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077584),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078596),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078600),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078604),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078608),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079620),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079624),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079628),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079632),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078852),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078856),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078860),
            Module = cms.string('whole')
        )),
    DeadModules_DB = cms.bool(True),
    DoPixelAging = cms.bool(False),
    ElectronPerAdc = cms.double(135.0),
    ElectronsPerVcal = cms.double(65.5),
    ElectronsPerVcal_Offset = cms.double(-414.0),
    FPix_SignalResponse_p0 = cms.double(0.0043),
    FPix_SignalResponse_p1 = cms.double(1.31),
    FPix_SignalResponse_p2 = cms.double(93.6),
    FPix_SignalResponse_p3 = cms.double(134.6),
    FirstStackLayer = cms.int32(5),
    GainSmearing = cms.double(0.0),
    LorentzAngle_DB = cms.bool(True),
    MissCalibrate = cms.bool(True),
    NoiseInElectrons = cms.double(175.0),
    NumPixelBarrel = cms.int32(3),
    NumPixelEndcap = cms.int32(2),
    OffsetSmearing = cms.double(0.0),
    PixGeometryType = cms.string('idealForDigi'),
    ReadoutNoiseInElec = cms.double(350.0),
    RoutList = cms.vstring('TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'),
    TanLorentzAnglePerTesla_BPix = cms.double(0.106),
    TanLorentzAnglePerTesla_FPix = cms.double(0.106),
    ThresholdInElectrons_BPix = cms.double(3500.0),
    ThresholdInElectrons_BPix_L1 = cms.double(3500.0),
    ThresholdInElectrons_FPix = cms.double(3000.0),
    ThresholdSmearing_BPix = cms.double(245.0),
    ThresholdSmearing_BPix_L1 = cms.double(245.0),
    ThresholdSmearing_FPix = cms.double(210.0),
    TofLowerCut = cms.double(-12.5),
    TofUpperCut = cms.double(12.5),
    bunchScaleAt25 = cms.double(1.0),
    deltaProductionCut = cms.double(0.03),
    killModules = cms.bool(True),
    theInnerEfficiency_FPix1 = cms.double(1.0),
    theInnerEfficiency_FPix2 = cms.double(1.0),
    theInstLumiScaleFactor = cms.double(221.95),
    theLadderEfficiency_BPix1 = cms.vdouble(0.978351, 0.971877, 0.974283, 0.969328, 0.972922, 
        0.970964, 0.975762, 0.974786, 0.980244, 0.978452, 
        0.982129, 0.979737, 0.984381, 0.983971, 0.98186, 
        0.983283, 0.981485, 0.979753, 0.980287, 0.975195),
    theLadderEfficiency_BPix2 = cms.vdouble(0.996276, 0.993354, 0.993752, 0.992948, 0.993871, 
        0.992317, 0.997733, 0.992516, 0.992649, 0.993425, 
        0.994065, 0.993481, 0.993169, 0.994223, 0.992397, 
        0.99509, 0.995177, 0.995319, 0.994925, 0.992933, 
        0.994111, 0.9948, 0.994711, 0.994294, 0.995392, 
        0.994229, 0.994414, 0.995271, 0.993585, 0.995264, 
        0.992977, 0.993642),
    theLadderEfficiency_BPix3 = cms.vdouble(0.996206, 0.998039, 0.995801, 0.99665, 0.996414, 
        0.995755, 0.996518, 0.995584, 0.997171, 0.998056, 
        0.99595, 0.997473, 0.996858, 0.996486, 0.997442, 
        0.998002, 0.995429, 0.997939, 0.996896, 0.997434, 
        0.996616, 0.996439, 0.996546, 0.997597, 0.995435, 
        0.996396, 0.99621, 0.998316, 0.998431, 0.99598, 
        0.997063, 0.996245, 0.997502, 0.996254, 0.997545, 
        0.997553, 0.996722, 0.996107, 0.996588, 0.996277, 
        0.99785, 0.997087, 0.998139, 0.997139),
    theModuleEfficiency_BPix1 = cms.vdouble(1.00361, 0.999371, 0.961242, 0.953582),
    theModuleEfficiency_BPix2 = cms.vdouble(1.00069, 0.999792, 0.99562, 1.00341),
    theModuleEfficiency_BPix3 = cms.vdouble(1.00006, 0.999744, 0.998147, 1.00039),
    theOuterEfficiency_FPix1 = cms.double(1.0),
    theOuterEfficiency_FPix2 = cms.double(1.0),
    thePUEfficiency_BPix1 = cms.vdouble(1.0181, -2.28345e-07, -1.30042e-09),
    thePUEfficiency_BPix2 = cms.vdouble(1.00648, -1.28515e-06, -1.85915e-10),
    thePUEfficiency_BPix3 = cms.vdouble(1.0032, -1.96206e-08, -1.99009e-10),
    thePUEfficiency_FPix_Inner = cms.vdouble(1.0),
    thePUEfficiency_FPix_Outer = cms.vdouble(1.0),
    thePixelChipEfficiency_BPix1 = cms.double(1.0),
    thePixelChipEfficiency_BPix2 = cms.double(1.0),
    thePixelChipEfficiency_BPix3 = cms.double(1.0),
    thePixelChipEfficiency_FPix1 = cms.double(0.999),
    thePixelChipEfficiency_FPix2 = cms.double(0.999),
    thePixelColEfficiency_BPix1 = cms.double(1.0),
    thePixelColEfficiency_BPix2 = cms.double(1.0),
    thePixelColEfficiency_BPix3 = cms.double(1.0),
    thePixelColEfficiency_FPix1 = cms.double(0.999),
    thePixelColEfficiency_FPix2 = cms.double(0.999),
    thePixelEfficiency_BPix1 = cms.double(1.0),
    thePixelEfficiency_BPix2 = cms.double(1.0),
    thePixelEfficiency_BPix3 = cms.double(1.0),
    thePixelEfficiency_FPix1 = cms.double(0.999),
    thePixelEfficiency_FPix2 = cms.double(0.999),
    useDB = cms.bool(False)
)

process.SiStripClusterChargeCutLoose = cms.PSet(
    value = cms.double(1620.0)
)

process.SiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)

process.SiStripClusterChargeCutTight = cms.PSet(
    value = cms.double(1945.0)
)

process.SiStripSimBlock = cms.PSet(
    APVSaturationFromHIP = cms.bool(True),
    APVSaturationProb = cms.double(0.001),
    APVpeakmode = cms.bool(False),
    AppliedVoltage = cms.double(300.0),
    BaselineShift = cms.bool(True),
    ChargeDistributionRMS = cms.double(6.5e-10),
    ChargeMobility = cms.double(310.0),
    CommonModeNoise = cms.bool(True),
    CosmicDelayShift = cms.untracked.double(0.0),
    CouplingConstantDecIB1 = cms.vdouble(0.7748, 0.0962, 0.0165),
    CouplingConstantDecIB2 = cms.vdouble(0.83, 0.0756, 0.0094),
    CouplingConstantDecOB1 = cms.vdouble(0.6871, 0.1222, 0.0342),
    CouplingConstantDecOB2 = cms.vdouble(0.725, 0.1102, 0.0273),
    CouplingConstantDecW1a = cms.vdouble(0.786, 0.093, 0.014),
    CouplingConstantDecW1b = cms.vdouble(0.822, 0.08, 0.009),
    CouplingConstantDecW2a = cms.vdouble(0.7962, 0.0914, 0.0104),
    CouplingConstantDecW2b = cms.vdouble(0.888, 0.05, 0.006),
    CouplingConstantDecW3a = cms.vdouble(0.8164, 0.09, 0.0018),
    CouplingConstantDecW3b = cms.vdouble(0.848, 0.06, 0.016),
    CouplingConstantDecW4 = cms.vdouble(0.876, 0.06, 0.002),
    CouplingConstantDecW5 = cms.vdouble(0.7565, 0.0913, 0.0304),
    CouplingConstantDecW6 = cms.vdouble(0.758, 0.093, 0.026),
    CouplingConstantDecW7 = cms.vdouble(0.7828, 0.0862, 0.0224),
    CouplingConstantPeakIB1 = cms.vdouble(0.9006, 0.0497),
    CouplingConstantPeakIB2 = cms.vdouble(0.9342, 0.0328),
    CouplingConstantPeakOB1 = cms.vdouble(0.8542, 0.0729),
    CouplingConstantPeakOB2 = cms.vdouble(0.8719, 0.064),
    CouplingConstantPeakW1a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW1b = cms.vdouble(0.976, 0.012),
    CouplingConstantPeakW2a = cms.vdouble(1.0, 0.0),
    CouplingConstantPeakW2b = cms.vdouble(0.998, 0.001),
    CouplingConstantPeakW3a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW3b = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW4 = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW5 = cms.vdouble(0.968, 0.016),
    CouplingConstantPeakW6 = cms.vdouble(0.972, 0.014),
    CouplingConstantPeakW7 = cms.vdouble(0.964, 0.018),
    DeltaProductionCut = cms.double(0.120425),
    DepletionVoltage = cms.double(170.0),
    DigiModeList = cms.PSet(
        PRDigi = cms.string('ProcessedRaw'),
        SCDigi = cms.string('ScopeMode'),
        VRDigi = cms.string('VirginRaw'),
        ZSDigi = cms.string('ZeroSuppressed')
    ),
    FedAlgorithm = cms.int32(4),
    FedAlgorithm_PM = cms.int32(4),
    Gain = cms.string(''),
    GeometryType = cms.string('idealForDigi'),
    GevPerElectron = cms.double(3.61e-09),
    Inefficiency = cms.double(0.0),
    LandauFluctuations = cms.bool(True),
    LorentzAngle = cms.string(''),
    Noise = cms.bool(True),
    NoiseSigmaThreshold = cms.double(2.0),
    PedestalsOffset = cms.double(128),
    PreMixingMode = cms.bool(False),
    ROUList = cms.vstring('TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof'),
    RealPedestals = cms.bool(True),
    SingleStripNoise = cms.bool(True),
    TOFCutForDeconvolution = cms.double(50.0),
    TOFCutForPeak = cms.double(100.0),
    Temperature = cms.double(273.0),
    TrackerConfigurationFromDB = cms.bool(False),
    ZeroSuppression = cms.bool(True),
    chargeDivisionsPerStrip = cms.int32(10),
    cmnRMStec = cms.double(2.44),
    cmnRMStib = cms.double(5.92),
    cmnRMStid = cms.double(3.08),
    cmnRMStob = cms.double(1.08),
    electronPerAdcDec = cms.double(247.0),
    electronPerAdcPeak = cms.double(262.0),
    noDiffusion = cms.bool(False)
)

process.SimCalorimetryAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimCalorimetryFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*')
)

process.SimCalorimetryRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*')
)

process.SimCalorimetryRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*')
)

process.SimG4CoreRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*')
)

process.SimGeneralAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimGeneralFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*')
)

process.SimGeneralRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimGeneralRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimMuonFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*')
)

process.SimMuonRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*')
)

process.SimMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*')
)

process.SimTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*')
)

process.SimTrackerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*')
)

process.SimTrackerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SingleMuonPSet = cms.PSet(
    hltPathsToCheck = cms.vstring('HLT_Mu45_e2p1_v', 
        'HLT_Mu50_v', 
        'HLT_Mu55_v', 
        'HLT_Mu50_eta2p1_v'),
    minCandidates = cms.uint32(1),
    parametersTurnOn = cms.vdouble(0, 5, 10, 15, 20, 
        25, 30, 35, 40, 42, 
        44, 46, 48, 50, 52, 
        54, 56, 58, 60, 70, 
        80, 90, 100),
    recMuonLabel = cms.InputTag("muons")
)

process.StandardMatchingParameters = cms.PSet(
    DataType = cms.string('Leptons'),
    MatchDeltaR_Jets = cms.double(0.3),
    MatchDeltaR_Leptons = cms.double(0.15),
    RefCollection = cms.InputTag("kinematicSelectedTauValDenominator"),
    SaveOutputHistograms = cms.bool(False),
    TauPtCut = cms.double(0.0),
    chainCuts = cms.bool(False),
    genCuts = cms.string(''),
    recoCuts = cms.string('')
)

process.TC_ME1234 = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.02),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(6.0),
    dRPhiMax = cms.double(1.2),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TC_ME1A = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.013),
    dPhiMax = cms.double(0.00198),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(0.6),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TECi = cms.PSet(
    TTRHBuilder = cms.string('WithTrackAngle'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxRing = cms.int32(2),
    minRing = cms.int32(1),
    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    useRingSlector = cms.bool(True)
)

process.TSPhiParametersBlock = cms.PSet(
    TSPhiParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        TSMCCE1 = cms.bool(True),
        TSMCCE2 = cms.bool(False),
        TSMCCEC = cms.bool(False),
        TSMCGS1 = cms.bool(True),
        TSMCGS2 = cms.bool(True),
        TSMGS1 = cms.int32(1),
        TSMGS2 = cms.int32(1),
        TSMHSP = cms.int32(1),
        TSMHTE1 = cms.bool(True),
        TSMHTE2 = cms.bool(False),
        TSMHTEC = cms.bool(False),
        TSMMSK1 = cms.int32(312),
        TSMMSK2 = cms.int32(312),
        TSMNOE1 = cms.bool(True),
        TSMNOE2 = cms.bool(False),
        TSMNOEC = cms.bool(False),
        TSMWORD = cms.int32(255),
        TSSCCE1 = cms.bool(True),
        TSSCCE2 = cms.bool(False),
        TSSCCEC = cms.bool(False),
        TSSCGS1 = cms.bool(True),
        TSSCGS2 = cms.bool(True),
        TSSGS1 = cms.int32(1),
        TSSGS2 = cms.int32(1),
        TSSHTE1 = cms.bool(True),
        TSSHTE2 = cms.bool(False),
        TSSHTEC = cms.bool(False),
        TSSMSK1 = cms.int32(312),
        TSSMSK2 = cms.int32(312),
        TSSNOE1 = cms.bool(True),
        TSSNOE2 = cms.bool(False),
        TSSNOEC = cms.bool(False),
        TSTREN0 = cms.bool(True),
        TSTREN1 = cms.bool(True),
        TSTREN10 = cms.bool(True),
        TSTREN11 = cms.bool(True),
        TSTREN12 = cms.bool(True),
        TSTREN13 = cms.bool(True),
        TSTREN14 = cms.bool(True),
        TSTREN15 = cms.bool(True),
        TSTREN16 = cms.bool(True),
        TSTREN17 = cms.bool(True),
        TSTREN18 = cms.bool(True),
        TSTREN19 = cms.bool(True),
        TSTREN2 = cms.bool(True),
        TSTREN20 = cms.bool(True),
        TSTREN21 = cms.bool(True),
        TSTREN22 = cms.bool(True),
        TSTREN23 = cms.bool(True),
        TSTREN3 = cms.bool(True),
        TSTREN4 = cms.bool(True),
        TSTREN5 = cms.bool(True),
        TSTREN6 = cms.bool(True),
        TSTREN7 = cms.bool(True),
        TSTREN8 = cms.bool(True),
        TSTREN9 = cms.bool(True)
    )
)

process.TSThetaParametersBlock = cms.PSet(
    TSThetaParameters = cms.PSet(
        Debug = cms.untracked.bool(False)
    )
)

process.TUParamsBlock = cms.PSet(
    Debug = cms.untracked.bool(False)
)

process.TcdsEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_tcdsDigis_*_*')
)

process.ThresholdPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ThresholdPtTrajectoryFilter'),
    minHitsThresholdPt = cms.int32(3),
    nSigmaThresholdPt = cms.double(5.0),
    thresholdPt = cms.double(10.0)
)

process.TimingFillerBlock = cms.PSet(
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    )
)

process.TpSelectorForEfficiencyVsEtaBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    signalOnly = cms.bool(True),
    stableOnly = cms.bool(False),
    tip = cms.double(3.5)
)

process.TpSelectorForEfficiencyVsPhiBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    signalOnly = cms.bool(True),
    stableOnly = cms.bool(False),
    tip = cms.double(3.5)
)

process.TpSelectorForEfficiencyVsPtBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.05),
    signalOnly = cms.bool(True),
    stableOnly = cms.bool(False),
    tip = cms.double(3.5)
)

process.TpSelectorForEfficiencyVsVTXRBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    signalOnly = cms.bool(True),
    stableOnly = cms.bool(False),
    tip = cms.double(60.0)
)

process.TpSelectorForEfficiencyVsVTXZBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    signalOnly = cms.bool(True),
    stableOnly = cms.bool(False),
    tip = cms.double(3.5)
)

process.TrackAssociatorParameterBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    )
)

process.TrackAssociatorParameters = cms.PSet(
    CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
    EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
    HORecHitCollectionLabel = cms.InputTag("horeco"),
    accountForTrajectoryChangeCalo = cms.bool(False),
    dREcal = cms.double(9999.0),
    dREcalPreselection = cms.double(0.05),
    dRHcal = cms.double(9999.0),
    dRHcalPreselection = cms.double(0.2),
    dRMuon = cms.double(9999.0),
    dRMuonPreselection = cms.double(0.2),
    muonMaxDistanceSigmaX = cms.double(0.0),
    muonMaxDistanceSigmaY = cms.double(0.0),
    muonMaxDistanceX = cms.double(5.0),
    muonMaxDistanceY = cms.double(5.0),
    propagateAllDirections = cms.bool(True),
    trajectoryUncertaintyTolerance = cms.double(-1.0),
    truthMatch = cms.bool(False),
    useCalo = cms.bool(False),
    useEcal = cms.bool(True),
    useHO = cms.bool(True),
    useHcal = cms.bool(True),
    useMuon = cms.bool(True),
    usePreshower = cms.bool(False)
)

process.TrackerKinkFinderParametersBlock = cms.PSet(
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    )
)

process.TrackingParticleSelectionForEfficiency = cms.PSet(
    chargedOnlyTP = cms.bool(True),
    lipTP = cms.double(30.0),
    maxRapidityTP = cms.double(2.5),
    minHitTP = cms.int32(0),
    minRapidityTP = cms.double(-2.5),
    pdgIdTP = cms.vint32(),
    ptMinTP = cms.double(0.005),
    signalOnlyTP = cms.bool(False),
    stableOnlyTP = cms.bool(False),
    tipTP = cms.double(60)
)

process.TrackingToolsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*')
)

process.TrackingToolsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep *_electronGsfTracks_*_*')
)

process.TrackingToolsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*')
)

process.TracoParametersBlock = cms.PSet(
    TracoParameters = cms.PSet(
        BTIC = cms.int32(32),
        DD = cms.int32(18),
        Debug = cms.untracked.int32(0),
        FHISM = cms.int32(0),
        FHTMSK = cms.int32(0),
        FHTPRF = cms.int32(1),
        FLTMSK = cms.int32(1),
        FPRGCOMP = cms.int32(2),
        FSLMSK = cms.int32(0),
        IBTIOFF = cms.int32(0),
        KPRGCOM = cms.int32(255),
        KRAD = cms.int32(0),
        LTF = cms.int32(0),
        LTS = cms.int32(0),
        LVALIDIFH = cms.int32(0),
        REUSEI = cms.int32(1),
        REUSEO = cms.int32(1),
        SHISM = cms.int32(0),
        SHTMSK = cms.int32(0),
        SHTPRF = cms.int32(1),
        SLTMSK = cms.int32(1),
        SPRGCOMP = cms.int32(2),
        SSLMSK = cms.int32(0),
        TRGENB0 = cms.int32(1),
        TRGENB1 = cms.int32(1),
        TRGENB10 = cms.int32(1),
        TRGENB11 = cms.int32(1),
        TRGENB12 = cms.int32(1),
        TRGENB13 = cms.int32(1),
        TRGENB14 = cms.int32(1),
        TRGENB15 = cms.int32(1),
        TRGENB2 = cms.int32(1),
        TRGENB3 = cms.int32(1),
        TRGENB4 = cms.int32(1),
        TRGENB5 = cms.int32(1),
        TRGENB6 = cms.int32(1),
        TRGENB7 = cms.int32(1),
        TRGENB8 = cms.int32(1),
        TRGENB9 = cms.int32(1)
    )
)

process.TrajectoryBuilderForConversions = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('eleLooseChi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('alongMomElePropagator'),
    propagatorOpposite = cms.string('oppositeToMomElePropagator'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('TrajectoryFilterForConversions')
    ),
    updator = cms.string('KFUpdator')
)

process.TrajectoryBuilderForElectrons = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('ElectronChi2'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(90.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('fwdGsfElectronPropagator'),
    propagatorOpposite = cms.string('bwdGsfElectronPropagator'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('TrajectoryFilterForElectrons')
    ),
    updator = cms.string('KFUpdator')
)

process.TrajectoryFilterForConversions = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxNumberOfHits = cms.int32(-1),
    minHitsMinPt = cms.int32(-1),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.TrajectoryFilterForElectrons = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxNumberOfHits = cms.int32(-1),
    minHitsMinPt = cms.int32(-1),
    minPt = cms.double(2.0),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.TrkIsoCuts = cms.PSet(
    IsCombinedIso = cms.untracked.bool(False),
    IsRelativeIso = cms.untracked.bool(False),
    IsoCut03 = cms.untracked.double(3.0),
    ptThreshold = cms.untracked.double(0.0)
)

process.VerificationCommonParameters = cms.PSet(
    MCTruthCollection = cms.InputTag("generator"),
    verboseDBE = cms.untracked.bool(False)
)

process.apd_sim_parameters = cms.PSet(
    apdAddToBarrel = cms.bool(False),
    apdDigiTag = cms.string('APD'),
    apdDoPEStats = cms.bool(True),
    apdNonlParms = cms.vdouble(1.48, -3.75, 1.81, 1.26, 2.0, 
        45, 1.0),
    apdSeparateDigi = cms.bool(True),
    apdShapeTau = cms.double(40.5),
    apdShapeTstart = cms.double(74.5),
    apdSimToPEHigh = cms.double(88200000.0),
    apdSimToPELow = cms.double(2450000.0),
    apdTimeOffWidth = cms.double(0.8),
    apdTimeOffset = cms.double(-13.5)
)

process.bTagBProbabilityAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(8.08),
        discriminatorStart = cms.double(-0.08),
        effBConst = cms.double(0.5),
        endEffPur = cms.double(1.005),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagCombinedSVAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        categories = cms.VPSet(cms.PSet(
            flightDistance2dSig = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(80.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            flightDistance2dVal = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(2.5),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            flightDistance3dSig = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(80.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            flightDistance3dVal = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(10.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            jetNSecondaryVertices = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(10.5),
                min = cms.double(-0.5),
                nBins = cms.uint32(11)
            ),
            trackDecayLenVal = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(5.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            trackDeltaR = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(0.3),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            trackEtaRel = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(9.0),
                min = cms.double(1.3),
                nBins = cms.uint32(50)
            ),
            trackJetDist = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(0.0),
                min = cms.double(-0.1),
                nBins = cms.uint32(100)
            ),
            trackMomentum = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(200.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            trackPPar = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(200.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            trackPParRatio = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(1.0),
                min = cms.double(0.86),
                nBins = cms.uint32(50)
            ),
            trackPtRatio = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(0.5),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            trackPtRel = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(15.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            trackSip2dSig = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(60.0),
                min = cms.double(-40.0),
                nBins = cms.uint32(50)
            ),
            trackSip2dSigAboveCharm = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(60.0),
                min = cms.double(-40.0),
                nBins = cms.uint32(50)
            ),
            trackSip2dVal = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(0.2),
                min = cms.double(-0.2),
                nBins = cms.uint32(50)
            ),
            trackSip3dSig = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(60.0),
                min = cms.double(-40.0),
                nBins = cms.uint32(50)
            ),
            trackSip3dSigAboveCharm = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(60.0),
                min = cms.double(-40.0),
                nBins = cms.uint32(50)
            ),
            trackSip3dVal = cms.PSet(
                indices = cms.vuint32(0, 1, 2, 3),
                logScale = cms.bool(True),
                max = cms.double(1.0),
                min = cms.double(-1.0),
                nBins = cms.uint32(50)
            ),
            trackSumJetDeltaR = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(0.3),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            trackSumJetEtRatio = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(4.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            vertexCategory = cms.PSet(
                logScale = cms.bool(False),
                max = cms.double(2.5),
                min = cms.double(-0.5),
                nBins = cms.uint32(3)
            ),
            vertexEnergyRatio = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(1.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            vertexJetDeltaR = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(0.5),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            vertexMass = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(10.0),
                min = cms.double(0.0),
                nBins = cms.uint32(50)
            ),
            vertexNTracks = cms.PSet(
                logScale = cms.bool(True),
                max = cms.double(20.5),
                min = cms.double(-0.5),
                nBins = cms.uint32(21)
            )
        ), 
            cms.PSet(
                flightDistance2dSig = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(80.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                flightDistance2dVal = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(2.5),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                flightDistance3dSig = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(80.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                flightDistance3dVal = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(10.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                jetNSecondaryVertices = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(10.5),
                    min = cms.double(-0.5),
                    nBins = cms.uint32(11)
                ),
                trackDecayLenVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(5.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackDeltaR = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.3),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackEtaRel = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(9.0),
                    min = cms.double(1.3),
                    nBins = cms.uint32(50)
                ),
                trackJetDist = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.0),
                    min = cms.double(-0.1),
                    nBins = cms.uint32(100)
                ),
                trackMomentum = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(200.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPPar = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(200.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPParRatio = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(0.86),
                    nBins = cms.uint32(50)
                ),
                trackPtRatio = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.5),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPtRel = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(15.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dSig = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dSigAboveCharm = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.2),
                    min = cms.double(-0.2),
                    nBins = cms.uint32(50)
                ),
                trackSip3dSig = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip3dSigAboveCharm = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip3dVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(-1.0),
                    nBins = cms.uint32(50)
                ),
                trackSumJetDeltaR = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(0.3),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackSumJetEtRatio = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(4.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexCategory = cms.PSet(
                    logScale = cms.bool(False),
                    max = cms.double(2.5),
                    min = cms.double(-0.5),
                    nBins = cms.uint32(3)
                ),
                vertexEnergyRatio = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexJetDeltaR = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(0.5),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexMass = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(10.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexNTracks = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(20.5),
                    min = cms.double(-0.5),
                    nBins = cms.uint32(21)
                )
            ), 
            cms.PSet(
                trackDecayLenVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(5.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackDeltaR = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.3),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackEtaRel = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(9.0),
                    min = cms.double(1.3),
                    nBins = cms.uint32(50)
                ),
                trackJetDist = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.0),
                    min = cms.double(-0.1),
                    nBins = cms.uint32(100)
                ),
                trackMomentum = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(200.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPPar = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(200.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPParRatio = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(0.86),
                    nBins = cms.uint32(50)
                ),
                trackPtRatio = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.5),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPtRel = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(15.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dSig = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dSigAboveCharm = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.2),
                    min = cms.double(-0.2),
                    nBins = cms.uint32(50)
                ),
                trackSip3dSig = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip3dSigAboveCharm = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip3dVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(-1.0),
                    nBins = cms.uint32(50)
                ),
                trackSumJetDeltaR = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(0.3),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackSumJetEtRatio = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(4.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexCategory = cms.PSet(
                    logScale = cms.bool(False),
                    max = cms.double(2.5),
                    min = cms.double(-0.5),
                    nBins = cms.uint32(3)
                ),
                vertexEnergyRatio = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexJetDeltaR = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(0.5),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexMass = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(10.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexNTracks = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(20.5),
                    min = cms.double(-0.5),
                    nBins = cms.uint32(21)
                )
            ), 
            cms.PSet(
                trackDecayLenVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(5.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackDeltaR = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.3),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackEtaRel = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(9.0),
                    min = cms.double(1.3),
                    nBins = cms.uint32(50)
                ),
                trackJetDist = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.0),
                    min = cms.double(-0.1),
                    nBins = cms.uint32(100)
                ),
                trackMomentum = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(200.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPPar = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(200.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPParRatio = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(0.86),
                    nBins = cms.uint32(50)
                ),
                trackPtRatio = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.5),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackPtRel = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(15.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dSig = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dSigAboveCharm = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip2dVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(0.2),
                    min = cms.double(-0.2),
                    nBins = cms.uint32(50)
                ),
                trackSip3dSig = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip3dSigAboveCharm = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(60.0),
                    min = cms.double(-40.0),
                    nBins = cms.uint32(50)
                ),
                trackSip3dVal = cms.PSet(
                    indices = cms.vuint32(0, 1, 2, 3),
                    logScale = cms.bool(True),
                    max = cms.double(1.0),
                    min = cms.double(-1.0),
                    nBins = cms.uint32(50)
                ),
                trackSumJetDeltaR = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(0.3),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                trackSumJetEtRatio = cms.PSet(
                    logScale = cms.bool(True),
                    max = cms.double(4.0),
                    min = cms.double(0.0),
                    nBins = cms.uint32(50)
                ),
                vertexCategory = cms.PSet(
                    logScale = cms.bool(False),
                    max = cms.double(2.5),
                    min = cms.double(-0.5),
                    nBins = cms.uint32(3)
                )
            )),
        categoryVariable = cms.string('vertexCategory')
    )
)

process.bTagCommonBlock = cms.PSet(
    JECsource = cms.string('ak5PFCHSL1FastL2L3'),
    caloJetMCSrc = cms.InputTag(""),
    doJEC = cms.bool(False),
    doJetID = cms.bool(False),
    etaMax = cms.double(2.4),
    etaMin = cms.double(0.0),
    etaRanges = cms.vdouble(0.0, 1.4, 2.4),
    jetMCSrc = cms.InputTag("mcJetFlavour"),
    ptRanges = cms.vdouble(50.0, 80.0, 120.0),
    ptRecJetMax = cms.double(40000.0),
    ptRecJetMin = cms.double(30.0),
    ratioMax = cms.double(9999.0),
    ratioMin = cms.double(-9999.0),
    softLeptonInfo = cms.InputTag("softPFElectronsTagInfos"),
    tagConfig = cms.VPSet(cms.PSet(
        folder = cms.string('IPTag'),
        label = cms.InputTag("pfImpactParameterTagInfos"),
        parameters = cms.PSet(
            LowerIPBound = cms.double(-0.1),
            LowerIPEBound = cms.double(0.0),
            LowerIPSBound = cms.double(-35.0),
            MaxDecayLength = cms.double(5.0),
            MaxJetDistance = cms.double(0.07),
            MinDecayLength = cms.double(-9999.0),
            MinJetDistance = cms.double(0.0),
            NBinsIP = cms.int32(100),
            NBinsIPE = cms.int32(100),
            NBinsIPS = cms.int32(100),
            QualityPlots = cms.bool(False),
            UpperIPBound = cms.double(0.1),
            UpperIPEBound = cms.double(0.04),
            UpperIPSBound = cms.double(35.0),
            endEffPur = cms.double(1.005),
            nBinEffPur = cms.int32(200),
            startEffPur = cms.double(0.005)
        ),
        type = cms.string('CandIP')
    ), 
        cms.PSet(
            folder = cms.string('CSVTag'),
            ipTagInfos = cms.InputTag("pfImpactParameterTagInfos"),
            label = cms.InputTag("candidateCombinedSecondaryVertexComputer"),
            parameters = cms.PSet(
                categories = cms.VPSet(cms.PSet(
                    flightDistance2dSig = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(80.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    flightDistance2dVal = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(2.5),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    flightDistance3dSig = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(80.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    flightDistance3dVal = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(10.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    jetNSecondaryVertices = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(10.5),
                        min = cms.double(-0.5),
                        nBins = cms.uint32(11)
                    ),
                    trackDecayLenVal = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(5.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    trackDeltaR = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(0.3),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    trackEtaRel = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(9.0),
                        min = cms.double(1.3),
                        nBins = cms.uint32(50)
                    ),
                    trackJetDist = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(0.0),
                        min = cms.double(-0.1),
                        nBins = cms.uint32(100)
                    ),
                    trackMomentum = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(200.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    trackPPar = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(200.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    trackPParRatio = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(1.0),
                        min = cms.double(0.86),
                        nBins = cms.uint32(50)
                    ),
                    trackPtRatio = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(0.5),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    trackPtRel = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(15.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    trackSip2dSig = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(60.0),
                        min = cms.double(-40.0),
                        nBins = cms.uint32(50)
                    ),
                    trackSip2dSigAboveCharm = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(60.0),
                        min = cms.double(-40.0),
                        nBins = cms.uint32(50)
                    ),
                    trackSip2dVal = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(0.2),
                        min = cms.double(-0.2),
                        nBins = cms.uint32(50)
                    ),
                    trackSip3dSig = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(60.0),
                        min = cms.double(-40.0),
                        nBins = cms.uint32(50)
                    ),
                    trackSip3dSigAboveCharm = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(60.0),
                        min = cms.double(-40.0),
                        nBins = cms.uint32(50)
                    ),
                    trackSip3dVal = cms.PSet(
                        indices = cms.vuint32(0, 1, 2, 3),
                        logScale = cms.bool(True),
                        max = cms.double(1.0),
                        min = cms.double(-1.0),
                        nBins = cms.uint32(50)
                    ),
                    trackSumJetDeltaR = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(0.3),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    trackSumJetEtRatio = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(4.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    vertexCategory = cms.PSet(
                        logScale = cms.bool(False),
                        max = cms.double(2.5),
                        min = cms.double(-0.5),
                        nBins = cms.uint32(3)
                    ),
                    vertexEnergyRatio = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(1.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    vertexJetDeltaR = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(0.5),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    vertexMass = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(10.0),
                        min = cms.double(0.0),
                        nBins = cms.uint32(50)
                    ),
                    vertexNTracks = cms.PSet(
                        logScale = cms.bool(True),
                        max = cms.double(20.5),
                        min = cms.double(-0.5),
                        nBins = cms.uint32(21)
                    )
                ), 
                    cms.PSet(
                        flightDistance2dSig = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(80.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        flightDistance2dVal = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(2.5),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        flightDistance3dSig = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(80.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        flightDistance3dVal = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(10.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        jetNSecondaryVertices = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(10.5),
                            min = cms.double(-0.5),
                            nBins = cms.uint32(11)
                        ),
                        trackDecayLenVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(5.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackDeltaR = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.3),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackEtaRel = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(9.0),
                            min = cms.double(1.3),
                            nBins = cms.uint32(50)
                        ),
                        trackJetDist = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.0),
                            min = cms.double(-0.1),
                            nBins = cms.uint32(100)
                        ),
                        trackMomentum = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(200.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPPar = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(200.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPParRatio = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(0.86),
                            nBins = cms.uint32(50)
                        ),
                        trackPtRatio = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.5),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPtRel = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(15.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dSig = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dSigAboveCharm = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.2),
                            min = cms.double(-0.2),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dSig = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dSigAboveCharm = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(-1.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSumJetDeltaR = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(0.3),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSumJetEtRatio = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(4.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexCategory = cms.PSet(
                            logScale = cms.bool(False),
                            max = cms.double(2.5),
                            min = cms.double(-0.5),
                            nBins = cms.uint32(3)
                        ),
                        vertexEnergyRatio = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexJetDeltaR = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(0.5),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexMass = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(10.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexNTracks = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(20.5),
                            min = cms.double(-0.5),
                            nBins = cms.uint32(21)
                        )
                    ), 
                    cms.PSet(
                        trackDecayLenVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(5.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackDeltaR = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.3),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackEtaRel = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(9.0),
                            min = cms.double(1.3),
                            nBins = cms.uint32(50)
                        ),
                        trackJetDist = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.0),
                            min = cms.double(-0.1),
                            nBins = cms.uint32(100)
                        ),
                        trackMomentum = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(200.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPPar = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(200.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPParRatio = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(0.86),
                            nBins = cms.uint32(50)
                        ),
                        trackPtRatio = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.5),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPtRel = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(15.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dSig = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dSigAboveCharm = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.2),
                            min = cms.double(-0.2),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dSig = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dSigAboveCharm = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(-1.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSumJetDeltaR = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(0.3),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSumJetEtRatio = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(4.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexCategory = cms.PSet(
                            logScale = cms.bool(False),
                            max = cms.double(2.5),
                            min = cms.double(-0.5),
                            nBins = cms.uint32(3)
                        ),
                        vertexEnergyRatio = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexJetDeltaR = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(0.5),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexMass = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(10.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexNTracks = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(20.5),
                            min = cms.double(-0.5),
                            nBins = cms.uint32(21)
                        )
                    ), 
                    cms.PSet(
                        trackDecayLenVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(5.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackDeltaR = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.3),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackEtaRel = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(9.0),
                            min = cms.double(1.3),
                            nBins = cms.uint32(50)
                        ),
                        trackJetDist = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.0),
                            min = cms.double(-0.1),
                            nBins = cms.uint32(100)
                        ),
                        trackMomentum = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(200.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPPar = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(200.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPParRatio = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(0.86),
                            nBins = cms.uint32(50)
                        ),
                        trackPtRatio = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.5),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackPtRel = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(15.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dSig = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dSigAboveCharm = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip2dVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(0.2),
                            min = cms.double(-0.2),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dSig = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dSigAboveCharm = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(60.0),
                            min = cms.double(-40.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSip3dVal = cms.PSet(
                            indices = cms.vuint32(0, 1, 2, 3),
                            logScale = cms.bool(True),
                            max = cms.double(1.0),
                            min = cms.double(-1.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSumJetDeltaR = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(0.3),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        trackSumJetEtRatio = cms.PSet(
                            logScale = cms.bool(True),
                            max = cms.double(4.0),
                            min = cms.double(0.0),
                            nBins = cms.uint32(50)
                        ),
                        vertexCategory = cms.PSet(
                            logScale = cms.bool(False),
                            max = cms.double(2.5),
                            min = cms.double(-0.5),
                            nBins = cms.uint32(3)
                        )
                    )),
                categoryVariable = cms.string('vertexCategory')
            ),
            svTagInfos = cms.InputTag("pfSecondaryVertexTagInfos"),
            type = cms.string('GenericMVA')
        ), 
        cms.PSet(
            folder = cms.string('TCHE'),
            label = cms.InputTag("pfTrackCountingHighEffBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(15.0),
                discriminatorStart = cms.double(-5.0),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('TCHP'),
            label = cms.InputTag("pfTrackCountingHighPurBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(15.0),
                discriminatorStart = cms.double(-5.0),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('JP'),
            label = cms.InputTag("pfJetProbabilityBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(2.525),
                discriminatorStart = cms.double(-0.025),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('JBP'),
            label = cms.InputTag("pfJetBProbabilityBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(8.08),
                discriminatorStart = cms.double(-0.08),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('SSVHE'),
            label = cms.InputTag("pfSimpleSecondaryVertexHighEffBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(8.0),
                discriminatorStart = cms.double(0.0),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('SSVHP'),
            label = cms.InputTag("pfSimpleSecondaryVertexHighPurBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(8.0),
                discriminatorStart = cms.double(0.0),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('CSV_tkOnly'),
            label = cms.InputTag("combinedSecondaryVertexBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(1.011),
                discriminatorStart = cms.double(-0.01),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('CSV'),
            label = cms.InputTag("pfCombinedSecondaryVertexBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(1.011),
                discriminatorStart = cms.double(-0.01),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('CSVv2'),
            label = cms.InputTag("pfCombinedInclusiveSecondaryVertexV2BJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(1.011),
                discriminatorStart = cms.double(-0.01),
                effBConst = cms.double(0.5),
                endEffPur = cms.double(1.005),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('SMT'),
            label = cms.InputTag("softPFMuonBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(1.1),
                discriminatorStart = cms.double(-0.1),
                effBConst = cms.double(0.05),
                endEffPur = cms.double(0.205),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        ), 
        cms.PSet(
            folder = cms.string('SET'),
            label = cms.InputTag("softPFElectronBJetTags"),
            parameters = cms.PSet(
                discriminatorEnd = cms.double(1.1),
                discriminatorStart = cms.double(-0.1),
                effBConst = cms.double(0.05),
                endEffPur = cms.double(0.205),
                nBinEffPur = cms.int32(200),
                startEffPur = cms.double(0.005)
            )
        )),
    useOldFlavourTool = cms.bool(False)
)

process.bTagGenericAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(1.011),
        discriminatorStart = cms.double(-0.01),
        effBConst = cms.double(0.5),
        endEffPur = cms.double(1.005),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagProbabilityAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(2.525),
        discriminatorStart = cms.double(-0.025),
        effBConst = cms.double(0.5),
        endEffPur = cms.double(1.005),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagSimpleSVAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(8.0),
        discriminatorStart = cms.double(0.0),
        effBConst = cms.double(0.5),
        endEffPur = cms.double(1.005),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagSoftLeptonAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(1.1),
        discriminatorStart = cms.double(-0.1),
        effBConst = cms.double(0.05),
        endEffPur = cms.double(0.205),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagSoftLeptonByIPAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(30.0),
        discriminatorStart = cms.double(-10.0),
        effBConst = cms.double(0.05),
        endEffPur = cms.double(0.205),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagSoftLeptonByPtAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(8.01),
        discriminatorStart = cms.double(-0.01),
        effBConst = cms.double(0.05),
        endEffPur = cms.double(0.205),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagTrackCountingAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        discriminatorEnd = cms.double(15.0),
        discriminatorStart = cms.double(-5.0),
        effBConst = cms.double(0.5),
        endEffPur = cms.double(1.005),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.bTagTrackIPAnalysisBlock = cms.PSet(
    parameters = cms.PSet(
        LowerIPBound = cms.double(-0.1),
        LowerIPEBound = cms.double(0.0),
        LowerIPSBound = cms.double(-35.0),
        MaxDecayLength = cms.double(5.0),
        MaxJetDistance = cms.double(0.07),
        MinDecayLength = cms.double(-9999.0),
        MinJetDistance = cms.double(0.0),
        NBinsIP = cms.int32(100),
        NBinsIPE = cms.int32(100),
        NBinsIPS = cms.int32(100),
        QualityPlots = cms.bool(False),
        UpperIPBound = cms.double(0.1),
        UpperIPEBound = cms.double(0.04),
        UpperIPSBound = cms.double(35.0),
        endEffPur = cms.double(1.005),
        nBinEffPur = cms.int32(200),
        startEffPur = cms.double(0.005)
    )
)

process.binning = cms.PSet(
    eta = cms.PSet(
        max = cms.double(3.0),
        min = cms.double(-3.0),
        nbins = cms.int32(4)
    ),
    phi = cms.PSet(
        max = cms.double(180.0),
        min = cms.double(-180.0),
        nbins = cms.int32(4)
    ),
    pileup = cms.PSet(
        max = cms.double(72.0),
        min = cms.double(0.0),
        nbins = cms.int32(18)
    ),
    pt = cms.PSet(
        max = cms.double(100.0),
        min = cms.double(0.0),
        nbins = cms.int32(10)
    )
)

process.castorDigitizer = cms.PSet(
    accumulatorType = cms.string('CastorDigiProducer'),
    castor = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(4.009),
        readoutFrameSize = cms.int32(6),
        samplingFactor = cms.double(0.060135),
        simHitToPhotoelectrons = cms.double(1000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(-4.0)
    ),
    doNoise = cms.bool(True),
    doTimeSlew = cms.bool(True),
    hitsProducer = cms.string('g4SimHits'),
    makeDigiSimLinks = cms.untracked.bool(False)
)

process.ckfBaseInOutTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.ckfBaseTrajectoryFilterP5 = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(4),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.5),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.ckfTrajectoryFilterBeamHaloMuon = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(2),
    maxLostHits = cms.int32(3),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0)
)

process.cleaningAlgoConfig = cms.PSet(
    cThreshold_barrel = cms.double(4),
    cThreshold_double = cms.double(10),
    cThreshold_endcap = cms.double(15),
    e4e1Threshold_barrel = cms.double(0.08),
    e4e1Threshold_endcap = cms.double(0.3),
    e4e1_a_barrel = cms.double(0.02),
    e4e1_a_endcap = cms.double(0.02),
    e4e1_b_barrel = cms.double(0.02),
    e4e1_b_endcap = cms.double(-0.0125),
    e6e2thresh = cms.double(0.04),
    ignoreOutOfTimeThresh = cms.double(1000000000.0),
    tightenCrack_e1_double = cms.double(2),
    tightenCrack_e1_single = cms.double(1),
    tightenCrack_e4e1_single = cms.double(2.5),
    tightenCrack_e6e2_double = cms.double(3)
)

process.cleaningParameters = cms.PSet(
    bypassAllDCSChecks = cms.bool(False),
    bypassAllPVChecks = cms.bool(False),
    gtLabel = cms.InputTag("gtDigis"),
    trigSelection = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(False),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_hltsel'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('')
    ),
    vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
)

process.combinedSVNoVertexVariables = cms.PSet(
    trackDecayLenVal = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(5.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    trackDeltaR = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(0.3),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    trackEtaRel = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(9.0),
        min = cms.double(1.3),
        nBins = cms.uint32(50)
    ),
    trackJetDist = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(0.0),
        min = cms.double(-0.1),
        nBins = cms.uint32(100)
    ),
    trackMomentum = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(200.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    trackPPar = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(200.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    trackPParRatio = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(1.0),
        min = cms.double(0.86),
        nBins = cms.uint32(50)
    ),
    trackPtRatio = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(0.5),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    trackPtRel = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(15.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    trackSip2dSig = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(60.0),
        min = cms.double(-40.0),
        nBins = cms.uint32(50)
    ),
    trackSip2dSigAboveCharm = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(60.0),
        min = cms.double(-40.0),
        nBins = cms.uint32(50)
    ),
    trackSip2dVal = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(0.2),
        min = cms.double(-0.2),
        nBins = cms.uint32(50)
    ),
    trackSip3dSig = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(60.0),
        min = cms.double(-40.0),
        nBins = cms.uint32(50)
    ),
    trackSip3dSigAboveCharm = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(60.0),
        min = cms.double(-40.0),
        nBins = cms.uint32(50)
    ),
    trackSip3dVal = cms.PSet(
        indices = cms.vuint32(0, 1, 2, 3),
        logScale = cms.bool(True),
        max = cms.double(1.0),
        min = cms.double(-1.0),
        nBins = cms.uint32(50)
    ),
    trackSumJetDeltaR = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(0.3),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    trackSumJetEtRatio = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(4.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    vertexCategory = cms.PSet(
        logScale = cms.bool(False),
        max = cms.double(2.5),
        min = cms.double(-0.5),
        nBins = cms.uint32(3)
    )
)

process.combinedSVPseudoVertexVariables = cms.PSet(
    vertexEnergyRatio = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(1.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    vertexJetDeltaR = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(0.5),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    vertexMass = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(10.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    vertexNTracks = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(20.5),
        min = cms.double(-0.5),
        nBins = cms.uint32(21)
    )
)

process.combinedSVRecoVertexVariables = cms.PSet(
    flightDistance2dSig = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(80.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    flightDistance2dVal = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(2.5),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    flightDistance3dSig = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(80.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    flightDistance3dVal = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(10.0),
        min = cms.double(0.0),
        nBins = cms.uint32(50)
    ),
    jetNSecondaryVertices = cms.PSet(
        logScale = cms.bool(True),
        max = cms.double(10.5),
        min = cms.double(-0.5),
        nBins = cms.uint32(11)
    )
)

process.combinedSecondaryVertexCommon = cms.PSet(
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)

process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('step3 nevts:10'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
)

process.conv2CkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    clustersToSkip = cms.InputTag("conv2Clusters"),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(3),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('conv2CkfTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.conv2CkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.convCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('convStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(3),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('convCkfTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.convCkfTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.cscRecHitDParameters = cms.PSet(
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023)
)

process.cutbased = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt010_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt010_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
        Pt010_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.07),
        Pt010_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
        Pt010_RMSTight = cms.vdouble(0.06, 0.07, 0.04, 0.05),
        Pt1020_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt1020_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt1020_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
        Pt1020_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.07),
        Pt1020_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
        Pt1020_RMSTight = cms.vdouble(0.06, 0.07, 0.04, 0.05),
        Pt2030_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt2030_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt2030_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
        Pt2030_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.055),
        Pt2030_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
        Pt2030_RMSTight = cms.vdouble(0.05, 0.07, 0.03, 0.045),
        Pt3050_BetaStarLoose = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt3050_BetaStarMedium = cms.vdouble(0.2, 0.3, 999.0, 999.0),
        Pt3050_BetaStarTight = cms.vdouble(0.15, 0.15, 999.0, 999.0),
        Pt3050_RMSLoose = cms.vdouble(0.06, 0.05, 0.05, 0.055),
        Pt3050_RMSMedium = cms.vdouble(0.06, 0.03, 0.03, 0.04),
        Pt3050_RMSTight = cms.vdouble(0.05, 0.06, 0.03, 0.04)
    ),
    cutBased = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('cutbased')
)

process.decayMode_1Prong0Pi0 = cms.PSet(
    maxMass = cms.string('1.'),
    minMass = cms.double(-1000.0),
    nCharged = cms.uint32(1),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(0),
    nTracksMin = cms.uint32(1)
)

process.decayMode_1Prong1Pi0 = cms.PSet(
    assumeStripMass = cms.double(0.1349),
    maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/100.), 4.2))'),
    minMass = cms.double(0.3),
    nCharged = cms.uint32(1),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(1),
    nTracksMin = cms.uint32(1)
)

process.decayMode_1Prong2Pi0 = cms.PSet(
    assumeStripMass = cms.double(0.0),
    maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/100.), 4.0))'),
    maxPi0Mass = cms.double(0.2),
    minMass = cms.double(0.4),
    minPi0Mass = cms.double(0.05),
    nCharged = cms.uint32(1),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(2),
    nTracksMin = cms.uint32(1)
)

process.decayMode_3Prong0Pi0 = cms.PSet(
    maxMass = cms.string('1.5'),
    minMass = cms.double(0.8),
    nCharged = cms.uint32(3),
    nChargedPFCandsMin = cms.uint32(1),
    nPiZeros = cms.uint32(0),
    nTracksMin = cms.uint32(2)
)

process.detachedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('detachedTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.detachedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilterBase')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('detachedTripletStepTrajectoryFilterShape')
        ))
)

process.detachedTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.701),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.detachedTripletStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.displacedMuonTPSet = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(210.0),
    maxRapidity = cms.double(2.4),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.4),
    pdgId = cms.vint32(13, -13),
    ptMin = cms.double(0.9),
    signalOnly = cms.bool(True),
    src = cms.InputTag("mix","MergedTrackTruth"),
    stableOnly = cms.bool(False),
    tip = cms.double(85.0)
)

process.dphiScale = cms.PSet(
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0)
)

process.drawOptStuff = cms.PSet(
    drawOption = cms.string('ex0'),
    drawOptionLegend = cms.string('p'),
    lineColor = cms.int32(1),
    lineStyle = cms.int32(1),
    lineWidth = cms.int32(2),
    markerColor = cms.int32(1),
    markerSize = cms.double(1.0),
    markerStyle = cms.int32(20)
)

process.ecalClusterTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BCE = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Basic cluster energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy map%(suffix)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection eta%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection phi%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEtMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection eta%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('transverse energy (GeV)')
            )
        ),
        BCEtMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection phi%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('transverse energy (GeV)')
            )
        ),
        BCNum = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of basic clusters per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20)
            )
        ),
        BCOccupancy = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Basic cluster occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number map%(suffix)s')
        ),
        BCOccupancyProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the basic cluster occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection eta%(suffix)s')
        ),
        BCOccupancyProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the basic cluster occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection phi%(suffix)s')
        ),
        BCSize = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the basic cluster size (number of crystals).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        BCSizeMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size map%(suffix)s')
        ),
        BCSizeMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection eta%(suffix)s')
        ),
        BCSizeMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection phi%(suffix)s')
        ),
        ExclusiveTriggers = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Counter for the trigger categories'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('None'),
            path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE exclusive triggers'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.0),
                labels = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(5),
                title = cms.untracked.string('triggers')
            )
        ),
        SCClusterVsSeed = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Relation between super cluster energy and its seed crystal energy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy vs seed crystal energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCE = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Super cluster energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCELow = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Energy distribution of the super clusters (low scale).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy (low scale)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(10.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCNBCs = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the super cluster size (number of basic clusters)'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(15)
            )
        ),
        SCNcrystals = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the super cluster size (number of crystals).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size (crystal)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        SCNum = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of super clusters per event in EB/EE.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC number'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20)
            )
        ),
        SCOccupancyProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Supercluster eta.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_eta')
        ),
        SCOccupancyProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Supercluster phi.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_phi')
        ),
        SCR9 = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of E_seed / E_3x3 of the super clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC R9'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.2),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        SCSeedEnergy = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Energy distribution of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed crystal energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCSeedOccupancy = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed occupancy map%(suffix)s')
        ),
        SCSeedOccupancyHighE = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters with energy > 2.0 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (high energy clusters) %(supercrystal)s binned')
        ),
        SCSeedOccupancyTrig = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH2F'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (%(trig)s triggered) %(supercrystal)s binned')
        ),
        SCSeedTimeMapTrigEx = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Mean timing of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing map%(suffix)s (%(trig)s exclusive triggered) %(supercrystal)s binned'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                title = cms.untracked.string('time (ns)')
            )
        ),
        SCSeedTimeTrigEx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Timing distribution of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH1F'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing (%(trig)s exclusive triggered)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        SCSizeVsEnergy = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Mean SC size in crystals as a function of the SC energy.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC size (crystal) vs energy (GeV)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(10.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCSwissCross = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Swiss cross for SC maximum-energy crystal.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('EB'),
            path = cms.untracked.string('EcalBarrel/EBRecoSummary/superClusters_EB_E1oE4'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.5),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        SingleCrystalCluster = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the occurrence of super clusters with only one constituent'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC single crystal cluster seed occupancy map%(suffix)s')
        ),
        TrendBCSize = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the mean size of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of basic clusters')
        ),
        TrendNBC = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of basic clusters per event in EB/EE.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of basic clusters')
        ),
        TrendNSC = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of super clusters per event in EB/EE.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of super clusters')
        ),
        TrendSCSize = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the mean size (number of crystals) of the super clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of super clusters')
        ),
        Triggers = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Counter for the trigger categories'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('None'),
            path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE triggers'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.0),
                labels = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(5),
                title = cms.untracked.string('triggers')
            )
        )
    ),
    params = cms.untracked.PSet(
        L1GlobalTriggerReadoutRecordTag = cms.untracked.InputTag("gtDigis"),
        L1MuGMTReadoutCollectionTag = cms.untracked.InputTag("gtDigis"),
        doExtra = cms.untracked.bool(True),
        egTriggerAlgos = cms.untracked.vstring('L1_SingleEG2', 
            'L1_SingleEG5', 
            'L1_SingleEG8', 
            'L1_SingleEG10', 
            'L1_SingleEG12', 
            'L1_SingleEG15', 
            'L1_SingleEG20', 
            'L1_SingleEG25', 
            'L1_DoubleNoIsoEG_BTB_tight', 
            'L1_DoubleNoIsoEG_BTB_loose', 
            'L1_DoubleNoIsoEGTopBottom', 
            'L1_DoubleNoIsoEGTopBottomCen', 
            'L1_DoubleNoIsoEGTopBottomCen2', 
            'L1_DoubleNoIsoEGTopBottomCenVert'),
        energyThreshold = cms.untracked.double(2.0),
        swissCrossMaxThreshold = cms.untracked.double(3.0)
    )
)

process.ecalCommonParams = cms.untracked.PSet(
    onlineMode = cms.untracked.bool(False),
    willConvertToEDM = cms.untracked.bool(True)
)

process.ecalDQMCollectionTags = cms.untracked.PSet(
    BlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    EBBasicCluster = cms.untracked.InputTag("particleFlowClusterECAL"),
    EBChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EBDigi = cms.untracked.InputTag("ecalDigis","ebDigis"),
    EBGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EBGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EBLaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EBRecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEB"),
    EBReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEB"),
    EBSrFlag = cms.untracked.InputTag("ecalDigis"),
    EBSuperCluster = cms.untracked.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    EBTestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEB"),
    EBUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EEBasicCluster = cms.untracked.InputTag("particleFlowClusterECAL"),
    EEChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EEDigi = cms.untracked.InputTag("ecalDigis","eeDigis"),
    EEGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EEGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EELaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    EERecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEE"),
    EEReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEE"),
    EESrFlag = cms.untracked.InputTag("ecalDigis"),
    EESuperCluster = cms.untracked.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
    EETestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEE"),
    EEUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    EcalRawData = cms.untracked.InputTag("ecalDigis"),
    MEMBlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
    MEMChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
    MEMGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
    MEMTowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
    PnDiodeDigi = cms.untracked.InputTag("ecalDigis"),
    Source = cms.untracked.InputTag("rawDataCollector"),
    TowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    TrigPrimDigi = cms.untracked.InputTag("ecalDigis","EcalTriggerPrimitives"),
    TrigPrimEmulDigi = cms.untracked.InputTag("simEcalTriggerPrimitiveDigis")
)

process.ecalDigitizer = cms.PSet(
    ConstantTerm = cms.double(0.003),
    EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
    EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
    EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
    EBdigiCollection = cms.string(''),
    EBs25notContainment = cms.double(0.97),
    EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
    EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
    EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
    EEdigiCollection = cms.string(''),
    EEs25notContainment = cms.double(0.975),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True),
    accumulatorType = cms.string('EcalDigiProducer'),
    apdAddToBarrel = cms.bool(False),
    apdDigiTag = cms.string('APD'),
    apdDoPEStats = cms.bool(True),
    apdNonlParms = cms.vdouble(1.48, -3.75, 1.81, 1.26, 2.0, 
        45, 1.0),
    apdSeparateDigi = cms.bool(True),
    apdShapeTau = cms.double(40.5),
    apdShapeTstart = cms.double(74.5),
    apdSimToPEHigh = cms.double(88200000.0),
    apdSimToPELow = cms.double(2450000.0),
    apdTimeOffWidth = cms.double(0.8),
    apdTimeOffset = cms.double(-13.5),
    applyConstantTerm = cms.bool(True),
    binOfMaximum = cms.int32(6),
    cosmicsPhase = cms.bool(False),
    cosmicsShift = cms.double(0.0),
    doENoise = cms.bool(True),
    doESNoise = cms.bool(True),
    doFast = cms.bool(True),
    doPhotostatistics = cms.bool(True),
    hitsProducer = cms.string('g4SimHits'),
    makeDigiSimLinks = cms.untracked.bool(False),
    photoelectronsToAnalogBarrel = cms.double(0.000444444),
    photoelectronsToAnalogEndcap = cms.double(0.000555555),
    readoutFrameSize = cms.int32(10),
    samplingFactor = cms.double(1.0),
    simHitToPhotoelectronsBarrel = cms.double(2250.0),
    simHitToPhotoelectronsEndcap = cms.double(1800.0),
    syncPhase = cms.bool(True),
    timePhase = cms.double(0.0)
)

process.ecalDrivenElectronSeedsParameters = cms.PSet(
    DeltaPhi1High = cms.double(0.08),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi2B = cms.double(0.008),
    DeltaPhi2F = cms.double(0.012),
    HighPtThreshold = cms.double(35.0),
    LowPtThreshold = cms.double(5.0),
    PhiMax2B = cms.double(0.002),
    PhiMax2F = cms.double(0.003),
    PhiMin2B = cms.double(-0.002),
    PhiMin2F = cms.double(-0.003),
    SCEtCut = cms.double(0.0),
    SizeWindowENeg = cms.double(0.675),
    applyHOverECut = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    deltaZ1WithVertex = cms.double(25.0),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    ePhiMin1 = cms.double(-0.125),
    fromTrackerSeeds = cms.bool(True),
    hOverEConeSize = cms.double(0.15),
    hOverEHBMinE = cms.double(0.7),
    hOverEHFMinE = cms.double(0.8),
    hOverEPtMin = cms.double(0.0),
    hcalRecHits = cms.InputTag("hbhereco"),
    hcalTowers = cms.InputTag("towerMaker"),
    initialSeeds = cms.InputTag("newCombinedSeeds"),
    maxHBarrel = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    measurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    measurementTrackerName = cms.string(''),
    nSigmasDeltaZ1 = cms.double(5.0),
    pPhiMax1 = cms.double(0.125),
    pPhiMin1 = cms.double(-0.075),
    preFilteredSeeds = cms.bool(False),
    r2MaxF = cms.double(0.15),
    r2MinF = cms.double(-0.15),
    rMaxI = cms.double(0.2),
    rMinI = cms.double(-0.2),
    searchInTIDTEC = cms.bool(True),
    useRecoVertex = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    z2MaxB = cms.double(0.09),
    z2MinB = cms.double(-0.09)
)

process.ecalEnergyTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Hit = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rec hit energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT energy spectrum %(sm)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rec hit energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit spectrum%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitMap = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit energy %(sm)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitMapAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT%(suffix)s energy summary'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        )
    ),
    params = cms.untracked.PSet(
        isPhysicsRun = cms.untracked.bool(True)
    )
)

process.ecalIntegrityTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BlockSize = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTBlockSize/%(prefix)sIT TTBlockSize %(sm)s')
        ),
        ByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of integrity errors for each FED in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/%(prefix)sIT weighted integrity errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        ChId = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/ChId/%(prefix)sIT ChId %(sm)s')
        ),
        Gain = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/Gain/%(prefix)sIT gain %(sm)s')
        ),
        GainSwitch = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/GainSwitch/%(prefix)sIT gain switch %(sm)s')
        ),
        Total = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of integrity errors for each FED.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sIT integrity quality errors summary')
        ),
        TowerId = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTId/%(prefix)sIT TTId %(sm)s')
        ),
        TrendNErrors = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of integrity errors.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('Ecal/Trends/IntegrityTask number of integrity errors')
        )
    )
)

process.ecalLocalRecoAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.ecalLocalRecoFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalMultiFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*')
)

process.ecalLocalRecoRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*')
)

process.ecalOccupancyTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        DCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of entries recoreded by each FED'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT DCC entries')
        ),
        Digi = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('Digi occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy %(sm)s')
        ),
        Digi1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of digis per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of digis in event'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3000.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        DigiAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Digi occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s')
        ),
        DigiDCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('DCC digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT digi occupancy summary 1D')
        ),
        DigiProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection eta')
        ),
        DigiProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection phi')
        ),
        RecHitAll = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('Rec hit occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s')
        ),
        RecHitProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of all rec hits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection eta')
        ),
        RecHitProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the rec hit occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection phi')
        ),
        RecHitThr1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of filtered rec hits in event'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(500.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        RecHitThrAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy for rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s')
        ),
        RecHitThrProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection eta')
        ),
        RecHitThrProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection phi')
        ),
        TPDigiThrAll = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s')
        ),
        TPDigiThrProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection eta')
        ),
        TPDigiThrProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection phi')
        ),
        TrendNDigi = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of digis.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of digis')
        ),
        TrendNRecHitThr = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered recHits')
        ),
        TrendNTPDigi = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered TP digis')
        )
    ),
    params = cms.untracked.PSet(
        recHitThreshold = cms.untracked.double(0.5),
        tpThreshold = cms.untracked.double(4.0)
    )
)

process.ecalPresampleTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Pedestal = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of mean presample value.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sPedestalOnlineTask/Gain12/%(prefix)sPOT pedestal %(sm)s G12')
        )
    ),
    params = cms.untracked.PSet(
        nSamples = cms.untracked.int32(3),
        pulseMaxPosition = cms.untracked.int32(5)
    )
)

process.ecalRawDataTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BXDCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC errors')
        ),
        BXDCCDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC-GT'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        BXFE = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE errors'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(68.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(68),
                title = cms.untracked.string('iFE')
            )
        ),
        BXFEDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE-DCC'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        BXFEInvalid = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing invalid value'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(69.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(69),
                title = cms.untracked.string('iFE')
            )
        ),
        BXSRP = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and SRP.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing SRP errors')
        ),
        BXTCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch corssing value mismatches between DCC and TCC.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing TCC errors')
        ),
        CRC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of CRC errors.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT CRC errors')
        ),
        DesyncByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT FE synchronization errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        DesyncTotal = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT total FE synchronization errors')
        ),
        EventTypeCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing == 3490. This plot is filled using data from the physics data stream during physics runs. It is normal to have very few entries in these cases.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        EventTypePostCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing > 3490.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type post calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        EventTypePreCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing < 3490'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type pre calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        FEByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of front-ends in error status in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT weighted frontend errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        FEStatus = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('FE status counter.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT front-end status bits %(sm)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                labels = cms.untracked.vstring('ENABLED', 
                    'DISABLED', 
                    'TIMEOUT', 
                    'HEADERERROR', 
                    'CHANNELID', 
                    'LINKERROR', 
                    'BLOCKSIZE', 
                    'SUPPRESSED', 
                    'FIFOFULL', 
                    'L1ADESYNC', 
                    'BXDESYNC', 
                    'L1ABXDESYNC', 
                    'FIFOFULLL1ADESYNC', 
                    'HPARITY', 
                    'VPARITY', 
                    'FORCEDZS'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        L1ADCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between L1A recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A DCC errors')
        ),
        L1AFE = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A FE errors'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(68.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(68),
                title = cms.untracked.string('iFE')
            )
        ),
        L1ASRP = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and SRP.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A SRP errors')
        ),
        L1ATCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and TCC.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A TCC errors')
        ),
        Orbit = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number errors')
        ),
        OrbitDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number DCC-GT'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        RunNumber = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between run numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT run number errors')
        ),
        TrendNSyncErrors = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            cumulative = cms.untracked.bool(True),
            description = cms.untracked.string('Accumulated trend of the number of synchronization errors (L1A & BX mismatches) between DCC and FE in this run.'),
            kind = cms.untracked.string('TH1F'),
            online = cms.untracked.bool(True),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('Ecal/Trends/RawDataTask accumulated number of sync errors')
        ),
        TriggerType = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between trigger type recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT trigger type errors')
        )
    )
)

process.ecalRecoSummaryTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Chi2 = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Chi2 of the pulse reconstruction.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_Chi2'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        EnergyMax = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Maximum energy of the rechit.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_energyMax'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-10.0),
                nbins = cms.untracked.int32(110)
            )
        ),
        RecoFlagAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from all rechits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        RecoFlagBasicCluster = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from rechits in basic clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/basicClusters_recHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        RecoFlagReduced = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from reduced rechits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/redRecHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        SwissCross = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Swiss cross.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('EB'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_E1oE4'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.5),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        Time = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rechit time.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_time'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(100)
            )
        )
    ),
    params = cms.untracked.PSet(
        rechitThresholdEB = cms.untracked.double(0.8),
        rechitThresholdEE = cms.untracked.double(1.2)
    )
)

process.ecalSelectiveReadoutTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        DCCSize = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Distribution of the per-DCC data size.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size vs DCC'),
            yaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.0, 0.0608, 0.1216, 0.1824, 0.2432, 
                    0.304, 0.3648, 0.4256, 0.4864, 0.5472, 
                    0.608, 0.608, 1.216, 1.824, 2.432, 
                    3.04, 3.648, 4.256, 4.864, 5.472, 
                    6.08, 6.688, 7.296, 7.904, 8.512, 
                    9.12, 9.728, 10.336, 10.944, 11.552, 
                    12.16, 12.768, 13.376, 13.984, 14.592, 
                    15.2, 15.808, 16.416, 17.024, 17.632, 
                    18.24, 18.848, 19.456, 20.064, 20.672, 
                    21.28, 21.888, 22.496, 23.104, 23.712, 
                    24.32, 24.928, 25.536, 26.144, 26.752, 
                    27.36, 27.968, 28.576, 29.184, 29.792, 
                    30.4, 31.008, 31.616, 32.224, 32.832, 
                    33.44, 34.048, 34.656, 35.264, 35.872, 
                    36.48, 37.088, 37.696, 38.304, 38.912, 
                    39.52, 40.128, 40.736, 41.344),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        DCCSizeProf = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Mean and spread of the per-DCC data size.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT DCC event size'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('event size (kB)')
            )
        ),
        EventSize = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of per-DCC data size.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        FRDropped = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of FR flagged but dropped towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT FR Flagged Dropped Readout Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20),
                title = cms.untracked.string('number of towers')
            )
        ),
        FRDroppedMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Number of FR flagged but dropped towers.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT FR flagged dropped counter%(suffix)s')
        ),
        FlagCounterMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of any SR flag.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower flag counter%(suffix)s')
        ),
        FullReadout = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of FR flags per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT full readout SR Flags Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(200.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('number of towers')
            )
        ),
        FullReadoutMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy with FR flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower full readout counter%(suffix)s')
        ),
        HighIntOutput = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Output of the ZS filter for high interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest ZS filter output%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(60.0),
                low = cms.untracked.double(-60.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('ADC counts*4')
            )
        ),
        HighIntPayload = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Total data size from all high interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest payload%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        LowIntOutput = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Output of the ZS filter for low interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest ZS filter output%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(60.0),
                low = cms.untracked.double(-60.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('ADC counts*4')
            )
        ),
        LowIntPayload = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Total data size from all low interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest payload%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        RUForcedMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of FORCED flag.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT RU with forced SR counter%(suffix)s')
        ),
        TowerSize = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean data size from each readout unit.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT tower event size%(suffix)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('size (bytes)')
            )
        ),
        ZS1Map = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy with ZS1 flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1 counter%(suffix)s')
        ),
        ZSFullReadout = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT ZS Flagged Fully Readout Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20),
                title = cms.untracked.string('number of towers')
            )
        ),
        ZSFullReadoutMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT ZS flagged full readout counter%(suffix)s')
        ),
        ZSMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of ZS1 and ZS2 flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1+ZS2 counter%(suffix)s')
        )
    ),
    params = cms.untracked.PSet(
        DCCZS1stSample = cms.untracked.int32(2),
        ZSFIRWeights = cms.untracked.vdouble(-0.374, -0.374, -0.3629, 0.2721, 0.4681, 
            0.3707),
        useCondDb = cms.untracked.bool(False)
    )
)

process.ecalTimingTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Time1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D %(sm)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D summary%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAllMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 7.0 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing map%(suffix)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(7.0),
                low = cms.untracked.double(-7.0),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAmp = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude %(sm)s'),
            xaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                    0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                    1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                    1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                    3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                    5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                    10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                    17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                    31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                    56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(200),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAmpAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude summary%(suffix)s'),
            xaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                    0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                    1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                    1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                    3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                    5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                    10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                    17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                    31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                    56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(200),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeMap = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 25.0 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing %(sm)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                title = cms.untracked.string('time (ns)')
            )
        )
    ),
    params = cms.untracked.PSet(
        energyThresholdEB = cms.untracked.double(1.0),
        energyThresholdEE = cms.untracked.double(3.0)
    )
)

process.ecalTrigPrimTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        EmulMaxIndex = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the index of emulated TP with the highest Et value.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT max TP matching index%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.5),
                labels = cms.untracked.vstring('no maximum', 
                    '0', 
                    '1', 
                    '2', 
                    '3', 
                    '4'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(6),
                title = cms.untracked.string('TP index')
            )
        ),
        EtEmulError = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulError %(sm)s')
        ),
        EtMaxEmul = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the maximum Et value within one emulated TP'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/Emulated/%(prefix)sTTT Et spectrum Emulated Digis max%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtReal = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et spectrum Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtRealMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et map Real Digis %(sm)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtSummary = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sTTT%(suffix)s Et trigger tower summary'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtVsBx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Mean TP Et in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et vs bx Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(16.0),
                labels = cms.untracked.vstring('1', 
                    '271', 
                    '541', 
                    '892', 
                    '1162', 
                    '1432', 
                    '1783', 
                    '2053', 
                    '2323', 
                    '2674', 
                    '2944', 
                    '3214', 
                    '3446', 
                    '3490', 
                    '3491', 
                    '3565'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(16),
                title = cms.untracked.string('bunch crossing')
            ),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('TP Et')
            )
        ),
        FGEmulError = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulFineGrainVetoError %(sm)s')
        ),
        HighIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of high interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower high interest counter%(suffix)s')
        ),
        LowIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of low interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower low interest counter%(suffix)s')
        ),
        MatchedIndex = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Counter for TP "timing" (= index withing the emulated TP whose Et matched that of the real TP)'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulMatch %(sm)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(6.0),
                labels = cms.untracked.vstring('no emul', 
                    '0', 
                    '1', 
                    '2', 
                    '3', 
                    '4'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(6),
                title = cms.untracked.string('TP index')
            )
        ),
        MedIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of medium interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower med interest counter%(suffix)s')
        ),
        OccVsBx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('TP occupancy in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TP occupancy vs bx Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(16.0),
                labels = cms.untracked.vstring('1', 
                    '271', 
                    '541', 
                    '892', 
                    '1162', 
                    '1432', 
                    '1783', 
                    '2053', 
                    '2323', 
                    '2674', 
                    '2944', 
                    '3214', 
                    '3446', 
                    '3490', 
                    '3491', 
                    '3565'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(16),
                title = cms.untracked.string('bunch crossing')
            )
        ),
        TTFMismatch = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT flag mismatch%(suffix)s')
        ),
        TTFlags = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Distribution of the trigger tower flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT Flags%(suffix)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(7.5),
                labels = cms.untracked.vstring('0', 
                    '1', 
                    '2', 
                    '3', 
                    '4', 
                    '5', 
                    '6', 
                    '7'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(8),
                title = cms.untracked.string('TT flag')
            )
        )
    ),
    params = cms.untracked.PSet(
        runOnEmul = cms.untracked.bool(True)
    )
)

process.ecal_cosmics_sim = cms.PSet(
    cosmicsPhase = cms.bool(False),
    cosmicsShift = cms.double(0.0)
)

process.ecal_digi_parameters = cms.PSet(
    EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
    EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
    EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
    EBdigiCollection = cms.string(''),
    EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
    EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
    EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
    EEdigiCollection = cms.string(''),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True)
)

process.ecal_electronics_sim = cms.PSet(
    ConstantTerm = cms.double(0.003),
    applyConstantTerm = cms.bool(True),
    doENoise = cms.bool(True)
)

process.ecal_notCont_sim = cms.PSet(
    EBs25notContainment = cms.double(0.97),
    EEs25notContainment = cms.double(0.975)
)

process.ecal_pulse_shape_covariances = cms.PSet(
    EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
        -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
        0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
        -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
        -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
        8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
        1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
        0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
        2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
        -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
        6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
        7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
        5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
        1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
        -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
        1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
        3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
        1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
        6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
        0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
        6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
        0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
        7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
        6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
        5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
        3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
    EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
        -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
        0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
        -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
        -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
        6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
        1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
        0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
        3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
        -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
        6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
        9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
        4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
        1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
        -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
        2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
        4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
        2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
        8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
        0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
        8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
        0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
        9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
        7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
        6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
        3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07)
)

process.ecal_pulse_shape_parameters = cms.PSet(
    EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
    EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
    EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
    EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
        -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
        0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
        -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
        -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
        8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
        1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
        0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
        2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
        -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
        6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
        7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
        5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
        1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
        -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
        1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
        3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
        1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
        6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
        0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
        6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
        0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
        7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
        6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
        5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
        3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
    EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
        0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
        0.0693181, 0.0475044),
    EBdigiCollection = cms.string(''),
    EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
    EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
    EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
    EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
        -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
        0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
        -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
        -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
        6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
        1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
        0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
        3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
        -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
        6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
        9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
        4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
        1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
        -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
        2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
        4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
        2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
        8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
        0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
        8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
        0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
        9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
        7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
        6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
        3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07),
    EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
        0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
        0.0874288, 0.061957),
    EEdigiCollection = cms.string(''),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True)
)

process.ecal_pulse_shape_templates = cms.PSet(
    EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
        0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
        0.0693181, 0.0475044),
    EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
        0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
        0.0874288, 0.061957)
)

process.ecal_sim_parameter_map = cms.PSet(
    binOfMaximum = cms.int32(6),
    doPhotostatistics = cms.bool(True),
    photoelectronsToAnalogBarrel = cms.double(0.000444444),
    photoelectronsToAnalogEndcap = cms.double(0.000555555),
    readoutFrameSize = cms.int32(10),
    samplingFactor = cms.double(1.0),
    simHitToPhotoelectronsBarrel = cms.double(2250.0),
    simHitToPhotoelectronsEndcap = cms.double(1800.0),
    syncPhase = cms.bool(True),
    timePhase = cms.double(0.0)
)

process.egHLTOffBaseEleTrigCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('default')
)

process.egHLTOffBasePhoTrigCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('default')
)

process.egHLTOffDQMBinData = cms.PSet(
    HLTenergy = cms.PSet(
        max = cms.double(300.0),
        min = cms.double(0.0),
        nr = cms.int32(60)
    ),
    HLTeta = cms.PSet(
        max = cms.double(3.0),
        min = cms.double(-3.0),
        nr = cms.int32(30)
    ),
    HLTphi = cms.PSet(
        max = cms.double(3.14),
        min = cms.double(-3.14),
        nr = cms.int32(16)
    ),
    charge = cms.PSet(
        max = cms.double(1.5),
        min = cms.double(-1.5),
        nr = cms.int32(2)
    ),
    dEtaIn = cms.PSet(
        max = cms.double(0.02),
        min = cms.double(-0.02),
        nr = cms.int32(10)
    ),
    dPhiIn = cms.PSet(
        max = cms.double(0.15),
        min = cms.double(-0.15),
        nr = cms.int32(10)
    ),
    deltaE = cms.PSet(
        max = cms.double(50.0),
        min = cms.double(-50.0),
        nr = cms.int32(50)
    ),
    e1x5 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    e2x5 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    eOverP = cms.PSet(
        max = cms.double(5),
        min = cms.double(-1.0),
        nr = cms.int32(12)
    ),
    energy = cms.PSet(
        max = cms.double(300.0),
        min = cms.double(0.0),
        nr = cms.int32(60)
    ),
    err = cms.PSet(
        max = cms.double(100.5),
        min = cms.double(-0.5),
        nr = cms.int32(101)
    ),
    et = cms.PSet(
        max = cms.double(155.0),
        min = cms.double(-5.0),
        nr = cms.int32(80)
    ),
    etHigh = cms.PSet(
        max = cms.double(2025),
        min = cms.double(25),
        nr = cms.int32(30)
    ),
    eta = cms.PSet(
        max = cms.double(3.0),
        min = cms.double(-3.0),
        nr = cms.int32(30)
    ),
    etaVsPhi = cms.PSet(
        nrX = cms.int32(15),
        nrY = cms.int32(8),
        xMax = cms.double(3.0),
        xMin = cms.double(-3.0),
        yMax = cms.double(3.14),
        yMin = cms.double(-3.14)
    ),
    hOverE = cms.PSet(
        max = cms.double(0.1),
        min = cms.double(0.0),
        nr = cms.int32(30)
    ),
    invEInvP = cms.PSet(
        max = cms.double(0.2),
        min = cms.double(-0.2),
        nr = cms.int32(10)
    ),
    isolEm = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolHad = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolNrTrks = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolPtTrks = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    mass = cms.PSet(
        max = cms.double(120),
        min = cms.double(-10.0),
        nr = cms.int32(26)
    ),
    massHigh = cms.PSet(
        max = cms.double(5000),
        min = cms.double(0.0),
        nr = cms.int32(20)
    ),
    maxr9 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    minr9 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    nVertex = cms.PSet(
        max = cms.double(21.0),
        min = cms.double(-1.0),
        nr = cms.int32(22)
    ),
    phi = cms.PSet(
        max = cms.double(3.14),
        min = cms.double(-3.14),
        nr = cms.int32(16)
    ),
    sigEtaEta = cms.PSet(
        max = cms.double(0.05),
        min = cms.double(-0.01),
        nr = cms.int32(30)
    )
)

process.egHLTOffDoubleEleEt10SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoubleElectronEt10PixelMatchFilter')
)

process.egHLTOffDoubleEleEt5Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(5.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(5.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoubleElectronEt5PixelMatchFilter')
)

process.egHLTOffDoublePhoEt10Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoublePhotonEt10HcalIsolFilter')
)

process.egHLTOffDoublePhoEt15Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoublePhotonEt15HcalIsolFilter')
)

process.egHLTOffDoublePhoEt15VLEICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(5.0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(5.0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTVLEIDoublePhotonEt15HcalIsolFilter')
)

process.egHLTOffDoublePhotonEt33_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:maxr9:hadem'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(33.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:maxr9:hadem'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(33.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltDoublePhoton33EgammaLHEDoubleFilter')
)

process.egHLTOffEle90_NoSpikeFilter_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hadem'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(90.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hadem'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(90.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle90NoSpikeFilterPixelMatchFilter')
)

process.egHLTOffEleBarrelCuts = cms.PSet(
    cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
    isolEmConstTerm = cms.double(3),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.03),
    isolHadConstTerm = cms.double(3),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.03),
    isolNrTrksConstTerm = cms.int32(0),
    isolPtTrksConstTerm = cms.double(7.5),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.0),
    maxCTFTrkChi2NDof = cms.double(99999),
    maxCTFTrkInnerRadius = cms.double(99999),
    maxDEtaIn = cms.double(0.004),
    maxDPhiIn = cms.double(0.06),
    maxEta = cms.double(1.442),
    maxHLTDEtaIn = cms.double(0.008),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(9999),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0.07),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0.1),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0.09),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.04),
    maxInvEInvP = cms.double(0.1),
    maxNrCTFTrkHitsLost = cms.int32(999),
    maxR9 = cms.double(0.98),
    maxSigmaEtaEta = cms.double(0.01),
    maxSigmaIEtaIEta = cms.double(0.01),
    minCTFTrkOuterRadius = cms.double(0.0),
    minEt = cms.double(15),
    minEta = cms.double(0.0),
    minNrCTFTrkHits = cms.int32(7),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffEleCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffEleEndcapCuts = cms.PSet(
    cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
    isolEmConstTerm = cms.double(3),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.03),
    isolHadConstTerm = cms.double(3),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.03),
    isolNrTrksConstTerm = cms.int32(0),
    isolPtTrksConstTerm = cms.double(15),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.0),
    maxCTFTrkChi2NDof = cms.double(99999),
    maxCTFTrkInnerRadius = cms.double(9999.0),
    maxDEtaIn = cms.double(0.007),
    maxDPhiIn = cms.double(0.03),
    maxEta = cms.double(2.5),
    maxHLTDEtaIn = cms.double(0.008),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(9999),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0.05),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0.025),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0.04),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.025),
    maxInvEInvP = cms.double(0.1),
    maxNrCTFTrkHitsLost = cms.int32(999),
    maxR9 = cms.double(999.0),
    maxSigmaEtaEta = cms.double(0.03),
    maxSigmaIEtaIEta = cms.double(0.03),
    minCTFTrkOuterRadius = cms.double(0.0),
    minEt = cms.double(15),
    minEta = cms.double(1.56),
    minNrCTFTrkHits = cms.int32(7),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffEleEt10LWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt10PixelMatchFilter')
)

process.egHLTOffEleEt10LWEleIdCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt10EleIdDphiFilter')
)

process.egHLTOffEleEt10SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt10PixelMatchFilter')
)

process.egHLTOffEleEt15LWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt15PixelMatchFilter')
)

process.egHLTOffEleEt15SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15PixelMatchFilter')
)

process.egHLTOffEleEt15SWEleIdCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15EleIdDphiFilter')
)

process.egHLTOffEleEt15SWEleIdLTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:dEtaIn:dPhiIn:sigmaIEtaIEta:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:dEtaIn:dPhiIn:sigmaIEtaIEta:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15EleIdTrackIsolFilterESet25LTI')
)

process.egHLTOffEleEt15SWLTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15LTITrackIsolFilter')
)

process.egHLTOffEleEt15_CaloIdVT_CaloIsoT_TrkIdT_TrkIsoT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.125),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.125),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.125),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.075),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.075),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.075),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle15CaloIdVTTrkIdTCaloIsoTTrkIsoTTrackIsolFilter')
)

process.egHLTOffEleEt17_CaloIdL_CaloIsoVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.2),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(17),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(17),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle17CaloIdLCaloIsoVLPixelMatchFilter')
)

process.egHLTOffEleEt20SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(20.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(20.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt20PixelMatchFilter')
)

process.egHLTOffEleEt27_CaloIdVT_CaloIsoT_TrkIdT_TrkIsoT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.125),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.125),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.125),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(27.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.075),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.075),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.075),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(27.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle27CaloIdTCaloIsoTTrkIdTTrkIsoTTrackIsoFilter')
)

process.egHLTOffEleEt45_CaloIdVT_TrkIdT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(45.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(45.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle45CaloIdVTTrkIdTDphiFilter')
)

process.egHLTOffEleEt8_CaloIdL_CaloIsoVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.2),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8CaloIdLCaloIsoVLPixelMatchFilter')
)

process.egHLTOffEleEt8_CaloIdL_TrkIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.01),
        maxDPhiIn = cms.double(0.15),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.01),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8CaloIdLTrkIdVLDphiFilter')
)

process.egHLTOffEleEt8_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hadem:maxr9'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hadem:maxr9'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8PixelMatchFilter')
)

process.egHLTOffEleLooseCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffFiltersToMon = cms.PSet(
    diEleTightLooseTrigNames = cms.vstring(),
    diPhoTightLooseTrigNames = cms.vstring(),
    eleHLTFilterNames = cms.vstring('hltEle65CaloIdVTTrkIdTDphiFilter'),
    eleHLTFilterNames2Leg = cms.vstring(),
    eleTightLooseTrigNames = cms.vstring(),
    phoHLTFilterNames = cms.vstring(),
    phoHLTFilterNames2Leg = cms.vstring(),
    phoTightLooseTrigNames = cms.vstring()
)

process.egHLTOffPhoBarrelCuts = cms.PSet(
    cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
    isolEmConstTerm = cms.double(5.0),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.012),
    isolHadConstTerm = cms.double(3.0),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.005),
    isolNrTrksConstTerm = cms.int32(4),
    isolPtTrksConstTerm = cms.double(3.0),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.002),
    maxCTFTrkChi2NDof = cms.double(99999.0),
    maxCTFTrkInnerRadius = cms.double(9.0),
    maxDEtaIn = cms.double(-1),
    maxDPhiIn = cms.double(-1),
    maxEta = cms.double(1.442),
    maxHLTDEtaIn = cms.double(0.1),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(0.1),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.05),
    maxInvEInvP = cms.double(-1),
    maxNrCTFTrkHitsLost = cms.int32(0),
    maxR9 = cms.double(0.98),
    maxSigmaEtaEta = cms.double(0.011),
    maxSigmaIEtaIEta = cms.double(0.011),
    minCTFTrkOuterRadius = cms.double(40.0),
    minEt = cms.double(20),
    minEta = cms.double(0.0),
    minNrCTFTrkHits = cms.int32(5),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffPhoCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffPhoEndcapCuts = cms.PSet(
    cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
    isolEmConstTerm = cms.double(5.0),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.012),
    isolHadConstTerm = cms.double(3.0),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.005),
    isolNrTrksConstTerm = cms.int32(4),
    isolPtTrksConstTerm = cms.double(3.0),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.002),
    maxCTFTrkChi2NDof = cms.double(99999.0),
    maxCTFTrkInnerRadius = cms.double(9.0),
    maxDEtaIn = cms.double(-1),
    maxDPhiIn = cms.double(-1),
    maxEta = cms.double(2.5),
    maxHLTDEtaIn = cms.double(0.1),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(0.1),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.05),
    maxInvEInvP = cms.double(-1),
    maxNrCTFTrkHitsLost = cms.int32(0),
    maxR9 = cms.double(999.0),
    maxSigmaEtaEta = cms.double(0.031),
    maxSigmaIEtaIEta = cms.double(0.031),
    minCTFTrkOuterRadius = cms.double(40.0),
    minEt = cms.double(20),
    minEta = cms.double(1.56),
    minNrCTFTrkHits = cms.int32(5),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffPhoEt10Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt10HcalIsolFilter')
)

process.egHLTOffPhoEt10LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt10TrackIsolFilter')
)

process.egHLTOffPhoEt15Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt15HcalIsolFilter')
)

process.egHLTOffPhoEt15HTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoSinglePhotonEt15HTITrackIsolFilter')
)

process.egHLTOffPhoEt15LEICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoSinglePhotonEt15LEIHcalIsolFilter')
)

process.egHLTOffPhoEt20Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt20HcalIsolFilter')
)

process.egHLTOffPhoEt20LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt20TrackIsolFilter')
)

process.egHLTOffPhoEt25Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt25HcalIsolFilter')
)

process.egHLTOffPhoEt25LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt25TrackIsolFilter')
)

process.egHLTOffPhoEt30Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt30HcalIsolFilter')
)

process.egHLTOffPhoLooseCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffPhotonEt125_NoSpikeFilter_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(125.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(125.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton125HEFilter')
)

process.egHLTOffPhotonEt30_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton30CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt30_CaloIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEG30CaloIdVLHEFilter')
)

process.egHLTOffPhotonEt50_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(50.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(50.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton50CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt75_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton75CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt75_CaloIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEG75CaloIdVLHEFilter')
)

process.electronMcFakeHistosCfg = cms.PSet(
    Detamatchmax = cms.double(0.05),
    Detamatchmin = cms.double(-0.05),
    Detamax = cms.double(0.005),
    Detamin = cms.double(-0.005),
    Dphimatchmax = cms.double(0.2),
    Dphimatchmin = cms.double(-0.2),
    Dphimax = cms.double(0.01),
    Dphimin = cms.double(-0.01),
    EfficiencyFlag = cms.bool(False),
    Energyerrormax = cms.double(30.0),
    Eopmax = cms.double(5.0),
    Eopmaxsht = cms.double(3.0),
    Etamax = cms.double(2.5),
    Etamin = cms.double(-2.5),
    Fhitsmax = cms.double(30.0),
    Hoemax = cms.double(0.5),
    Hoemin = cms.double(0.0),
    Lhitsmax = cms.double(10.0),
    Meemax = cms.double(150.0),
    Meemin = cms.double(0.0),
    Nbindeta = cms.int32(100),
    Nbindetamatch = cms.int32(100),
    Nbindetamatch2D = cms.int32(50),
    Nbindphi = cms.int32(100),
    Nbindphimatch = cms.int32(100),
    Nbindphimatch2D = cms.int32(50),
    Nbineop = cms.int32(50),
    Nbineop2D = cms.int32(30),
    Nbinerror = cms.int32(30),
    Nbineta = cms.int32(50),
    Nbineta2D = cms.int32(50),
    Nbinfhits = cms.int32(30),
    Nbinhoe = cms.int32(100),
    Nbinlhits = cms.int32(5),
    Nbinmee = cms.int32(100),
    Nbinp = cms.int32(50),
    Nbinp2D = cms.int32(50),
    Nbinphi = cms.int32(64),
    Nbinphi2D = cms.int32(32),
    Nbinpopmatching = cms.int32(75),
    Nbinpt = cms.int32(50),
    Nbinpt2D = cms.int32(50),
    Nbinpteff = cms.int32(19),
    Nbinxyz = cms.int32(50),
    Phimax = cms.double(3.2),
    Phimin = cms.double(-3.2),
    Pmax = cms.double(300.0),
    Popmatchingmax = cms.double(1.5),
    Popmatchingmin = cms.double(0.0),
    Ptmax = cms.double(100.0),
    StatOverflowFlag = cms.bool(False)
)

process.electronMcSignalHistosCfg = cms.PSet(
    Detamatchmax = cms.double(0.05),
    Detamatchmin = cms.double(-0.05),
    Detamax = cms.double(0.005),
    Detamin = cms.double(-0.005),
    Dphimatchmax = cms.double(0.2),
    Dphimatchmin = cms.double(-0.2),
    Dphimax = cms.double(0.01),
    Dphimin = cms.double(-0.01),
    EfficiencyFlag = cms.bool(False),
    Energyerrormax = cms.double(30.0),
    Eopmax = cms.double(5.0),
    Eopmaxsht = cms.double(3.0),
    Etamax = cms.double(2.5),
    Etamin = cms.double(-2.5),
    Fhitsmax = cms.double(30.0),
    Hoemax = cms.double(0.5),
    Hoemin = cms.double(0.0),
    Lhitsmax = cms.double(10.0),
    Meemax = cms.double(150.0),
    Meemin = cms.double(0.0),
    Nbindeta = cms.int32(100),
    Nbindetamatch = cms.int32(100),
    Nbindetamatch2D = cms.int32(50),
    Nbindphi = cms.int32(100),
    Nbindphimatch = cms.int32(100),
    Nbindphimatch2D = cms.int32(50),
    Nbineop = cms.int32(50),
    Nbineop2D = cms.int32(30),
    Nbinerror = cms.int32(30),
    Nbineta = cms.int32(50),
    Nbineta2D = cms.int32(50),
    Nbinfhits = cms.int32(30),
    Nbinhoe = cms.int32(100),
    Nbinlhits = cms.int32(5),
    Nbinmee = cms.int32(100),
    Nbinp = cms.int32(50),
    Nbinp2D = cms.int32(50),
    Nbinphi = cms.int32(64),
    Nbinphi2D = cms.int32(32),
    Nbinpoptrue = cms.int32(75),
    Nbinpt = cms.int32(50),
    Nbinpt2D = cms.int32(50),
    Nbinpteff = cms.int32(19),
    Nbinxyz = cms.int32(50),
    Phimax = cms.double(3.2),
    Phimin = cms.double(-3.2),
    Pmax = cms.double(300.0),
    Poptruemax = cms.double(1.5),
    Poptruemin = cms.double(0.0),
    Ptmax = cms.double(100.0),
    StatOverflowFlag = cms.bool(False)
)

process.es_electronics_sim = cms.PSet(
    doESNoise = cms.bool(True),
    doFast = cms.bool(True)
)

process.full = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.9, -0.9, -0.9, -0.9),
        Pt010_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
        Pt010_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
        Pt1020_Loose = cms.vdouble(-0.9, -0.9, -0.9, -0.9),
        Pt1020_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
        Pt1020_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
        Pt2030_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
        Pt2030_Medium = cms.vdouble(0.1, -0.4, -0.4, -0.45),
        Pt2030_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0),
        Pt3050_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
        Pt3050_Medium = cms.vdouble(0.1, -0.4, -0.4, -0.45),
        Pt3050_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    tmvaMethod = cms.string('PuJetIdOptMVA'),
    tmvaSpectators = cms.vstring('jetPt', 
        'jetEta'),
    tmvaVariables = cms.vstring('frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05', 
        'nvtx', 
        'nNeutrals', 
        'beta', 
        'betaStar', 
        'dZ', 
        'nCharged'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/TMVAClassification_PuJetIdOptMVA.weights.xml.gz'),
    version = cms.int32(-1)
)

process.full_53x = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
        Pt010_MET = cms.vdouble(0.0, -0.6, -0.4, -0.4),
        Pt010_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
        Pt010_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
        Pt1020_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
        Pt1020_MET = cms.vdouble(0.3, -0.2, -0.4, -0.4),
        Pt1020_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
        Pt1020_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
        Pt2030_Loose = cms.vdouble(-0.63, -0.6, -0.55, -0.45),
        Pt2030_MET = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        Pt2030_Medium = cms.vdouble(0.1, -0.36, -0.54, -0.54),
        Pt2030_Tight = cms.vdouble(0.73, 0.05, -0.26, -0.42),
        Pt3050_Loose = cms.vdouble(-0.63, -0.6, -0.55, -0.45),
        Pt3050_MET = cms.vdouble(0.0, 0.0, -0.1, -0.2),
        Pt3050_Medium = cms.vdouble(0.1, -0.36, -0.54, -0.54),
        Pt3050_Tight = cms.vdouble(0.73, 0.05, -0.26, -0.42)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full53x'),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring('jetPt', 
        'jetEta', 
        'jetPhi'),
    tmvaVariables = cms.vstring('nvtx', 
        'dZ', 
        'beta', 
        'betaStar', 
        'nCharged', 
        'nNeutrals', 
        'dR2Mean', 
        'ptD', 
        'frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05'),
    tmvaWeights = cms.string('CondFormats/JetMETObjects/data/TMVAClassificationCategory_JetID_53X_Dec2012.weights.xml'),
    version = cms.int32(-1)
)

process.full_53x_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
        Pt010_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
        Pt010_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
        Pt1020_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
        Pt1020_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
        Pt1020_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
        Pt2030_Loose = cms.vdouble(-0.15, -0.26, -0.16, -0.16),
        Pt2030_Medium = cms.vdouble(-0.07, -0.09, 0.0, -0.06),
        Pt2030_Tight = cms.vdouble(0.78, 0.5, 0.17, 0.17),
        Pt3050_Loose = cms.vdouble(-0.15, -0.26, -0.16, -0.16),
        Pt3050_Medium = cms.vdouble(-0.07, -0.09, 0.0, -0.06),
        Pt3050_Tight = cms.vdouble(0.78, 0.5, 0.17, 0.17)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring('jetPt', 
        'jetEta', 
        'jetPhi'),
    tmvaVariables = cms.vstring('nvtx', 
        'dZ', 
        'beta', 
        'betaStar', 
        'nCharged', 
        'nNeutrals', 
        'dR2Mean', 
        'ptD', 
        'frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05'),
    tmvaWeights = cms.string('CondFormats/JetMETObjects/data/TMVAClassificationCategory_JetID_53X_chs_Dec2012.weights.xml'),
    version = cms.int32(-1)
)

process.full_53x_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
    Pt010_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
    Pt010_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
    Pt1020_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
    Pt1020_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
    Pt1020_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
    Pt2030_Loose = cms.vdouble(-0.15, -0.26, -0.16, -0.16),
    Pt2030_Medium = cms.vdouble(-0.07, -0.09, 0.0, -0.06),
    Pt2030_Tight = cms.vdouble(0.78, 0.5, 0.17, 0.17),
    Pt3050_Loose = cms.vdouble(-0.15, -0.26, -0.16, -0.16),
    Pt3050_Medium = cms.vdouble(-0.07, -0.09, 0.0, -0.06),
    Pt3050_Tight = cms.vdouble(0.78, 0.5, 0.17, 0.17)
)

process.full_53x_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
    Pt010_MET = cms.vdouble(0.0, -0.6, -0.4, -0.4),
    Pt010_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
    Pt010_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
    Pt1020_Loose = cms.vdouble(-0.95, -0.96, -0.94, -0.95),
    Pt1020_MET = cms.vdouble(0.3, -0.2, -0.4, -0.4),
    Pt1020_Medium = cms.vdouble(-0.83, -0.92, -0.9, -0.92),
    Pt1020_Tight = cms.vdouble(-0.83, -0.81, -0.74, -0.81),
    Pt2030_Loose = cms.vdouble(-0.63, -0.6, -0.55, -0.45),
    Pt2030_MET = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    Pt2030_Medium = cms.vdouble(0.1, -0.36, -0.54, -0.54),
    Pt2030_Tight = cms.vdouble(0.73, 0.05, -0.26, -0.42),
    Pt3050_Loose = cms.vdouble(-0.63, -0.6, -0.55, -0.45),
    Pt3050_MET = cms.vdouble(0.0, 0.0, -0.1, -0.2),
    Pt3050_Medium = cms.vdouble(0.1, -0.36, -0.54, -0.54),
    Pt3050_Tight = cms.vdouble(0.73, 0.05, -0.26, -0.42)
)

process.full_5x = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.97, -0.97, -0.97),
        Pt010_Medium = cms.vdouble(-0.83, -0.96, -0.95, -0.96),
        Pt010_Tight = cms.vdouble(-0.47, -0.92, -0.92, -0.94),
        Pt1020_Loose = cms.vdouble(-0.95, -0.97, -0.97, -0.97),
        Pt1020_Medium = cms.vdouble(-0.83, -0.96, -0.95, -0.96),
        Pt1020_Tight = cms.vdouble(-0.47, -0.92, -0.92, -0.94),
        Pt2030_Loose = cms.vdouble(-0.8, -0.85, -0.84, -0.85),
        Pt2030_Medium = cms.vdouble(-0.4, -0.74, -0.76, -0.81),
        Pt2030_Tight = cms.vdouble(0.32, -0.49, -0.61, -0.74),
        Pt3050_Loose = cms.vdouble(-0.8, -0.85, -0.84, -0.85),
        Pt3050_Medium = cms.vdouble(-0.4, -0.74, -0.76, -0.81),
        Pt3050_Tight = cms.vdouble(0.32, -0.49, -0.61, -0.74)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    tmvaMethod = cms.string('BDT_fullPlusRMS'),
    tmvaSpectators = cms.vstring('jetPt', 
        'jetEta'),
    tmvaVariables = cms.vstring('frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05', 
        'dR2Mean', 
        'nvtx', 
        'nNeutrals', 
        'beta', 
        'betaStar', 
        'dZ', 
        'nCharged'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/TMVAClassification_5x_BDT_fullPlusRMS.weights.xml.gz'),
    version = cms.int32(-1)
)

process.full_5x_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.98, -0.95, -0.94, -0.94),
        Pt010_Medium = cms.vdouble(-0.94, -0.91, -0.91, -0.92),
        Pt010_Tight = cms.vdouble(-0.59, -0.75, -0.78, -0.8),
        Pt1020_Loose = cms.vdouble(-0.98, -0.95, -0.94, -0.94),
        Pt1020_Medium = cms.vdouble(-0.94, -0.91, -0.91, -0.92),
        Pt1020_Tight = cms.vdouble(-0.59, -0.75, -0.78, -0.8),
        Pt2030_Loose = cms.vdouble(-0.89, -0.77, -0.69, -0.75),
        Pt2030_Medium = cms.vdouble(-0.58, -0.65, -0.57, -0.67),
        Pt2030_Tight = cms.vdouble(0.41, -0.1, -0.2, -0.45),
        Pt3050_Loose = cms.vdouble(-0.89, -0.77, -0.69, -0.57),
        Pt3050_Medium = cms.vdouble(-0.58, -0.65, -0.57, -0.67),
        Pt3050_Tight = cms.vdouble(0.41, -0.1, -0.2, -0.45)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    tmvaMethod = cms.string('BDT_chsFullPlusRMS'),
    tmvaSpectators = cms.vstring('jetPt', 
        'jetEta'),
    tmvaVariables = cms.vstring('frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05', 
        'dR2Mean', 
        'nvtx', 
        'nNeutrals', 
        'beta', 
        'betaStar', 
        'dZ', 
        'nCharged'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/TMVAClassification_5x_BDT_chsFullPlusRMS.weights.xml.gz'),
    version = cms.int32(-1)
)

process.full_5x_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.98, -0.95, -0.94, -0.94),
    Pt010_Medium = cms.vdouble(-0.94, -0.91, -0.91, -0.92),
    Pt010_Tight = cms.vdouble(-0.59, -0.75, -0.78, -0.8),
    Pt1020_Loose = cms.vdouble(-0.98, -0.95, -0.94, -0.94),
    Pt1020_Medium = cms.vdouble(-0.94, -0.91, -0.91, -0.92),
    Pt1020_Tight = cms.vdouble(-0.59, -0.75, -0.78, -0.8),
    Pt2030_Loose = cms.vdouble(-0.89, -0.77, -0.69, -0.75),
    Pt2030_Medium = cms.vdouble(-0.58, -0.65, -0.57, -0.67),
    Pt2030_Tight = cms.vdouble(0.41, -0.1, -0.2, -0.45),
    Pt3050_Loose = cms.vdouble(-0.89, -0.77, -0.69, -0.57),
    Pt3050_Medium = cms.vdouble(-0.58, -0.65, -0.57, -0.67),
    Pt3050_Tight = cms.vdouble(0.41, -0.1, -0.2, -0.45)
)

process.full_5x_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.97, -0.97, -0.97),
    Pt010_Medium = cms.vdouble(-0.83, -0.96, -0.95, -0.96),
    Pt010_Tight = cms.vdouble(-0.47, -0.92, -0.92, -0.94),
    Pt1020_Loose = cms.vdouble(-0.95, -0.97, -0.97, -0.97),
    Pt1020_Medium = cms.vdouble(-0.83, -0.96, -0.95, -0.96),
    Pt1020_Tight = cms.vdouble(-0.47, -0.92, -0.92, -0.94),
    Pt2030_Loose = cms.vdouble(-0.8, -0.85, -0.84, -0.85),
    Pt2030_Medium = cms.vdouble(-0.4, -0.74, -0.76, -0.81),
    Pt2030_Tight = cms.vdouble(0.32, -0.49, -0.61, -0.74),
    Pt3050_Loose = cms.vdouble(-0.8, -0.85, -0.84, -0.85),
    Pt3050_Medium = cms.vdouble(-0.4, -0.74, -0.76, -0.81),
    Pt3050_Tight = cms.vdouble(0.32, -0.49, -0.61, -0.74)
)

process.genMixPileUpFiles = cms.PSet(
    fileNames = cms.untracked.vstring('MinBias13TeV_001.root', 
        'MinBias13TeV_002.root', 
        'MinBias13TeV_003.root', 
        'MinBias13TeV_004.root', 
        'MinBias13TeV_005.root', 
        'MinBias13TeV_006.root', 
        'MinBias13TeV_007.root', 
        'MinBias13TeV_008.root', 
        'MinBias13TeV_009.root', 
        'MinBias13TeV_010.root')
)

process.generalGpSelectorBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    status = cms.int32(1),
    tip = cms.double(3.5)
)

process.generalTpSelectorBlock = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.5),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.5),
    pdgId = cms.vint32(),
    ptMin = cms.double(0.9),
    signalOnly = cms.bool(True),
    stableOnly = cms.bool(False),
    tip = cms.double(3.5)
)

process.ghostTrackCommon = cms.PSet(
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig')
)

process.ghostTrackVertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        finder = cms.string('gtvr'),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        maxFitChi2 = cms.double(10.0),
        mergeThreshold = cms.double(3.0),
        primcut = cms.double(2.0),
        seccut = cms.double(4.0)
    )
)

process.globalMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(2.0),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.4'),
    z0Cut = cms.untracked.double(25.0)
)

process.hcalDigitizer = cms.PSet(
    ChangeResponse = cms.bool(False),
    CorrFactorFile = cms.FileInPath('SimCalorimetry/HcalSimProducers/data/calor_corr01.txt'),
    DelivLuminosity = cms.double(0),
    HBHEUpgradeQIE = cms.bool(True),
    HBTuningParameter = cms.double(0.875),
    HEDarkening = cms.bool(False),
    HETuningParameter = cms.double(0.9),
    HFDarkening = cms.bool(False),
    HFTuningParameter = cms.double(1.025),
    HFUpgradeQIE = cms.bool(False),
    HOTuningParameter = cms.double(1),
    HcalPreMixStage1 = cms.bool(False),
    HcalPreMixStage2 = cms.bool(False),
    HcalReLabel = cms.PSet(
        RelabelHits = cms.untracked.bool(False),
        RelabelRules = cms.untracked.PSet(
            CorrectPhi = cms.untracked.bool(False),
            Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                2, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                3, 3, 4, 4, 4, 
                4, 4, 5, 5, 5, 
                5, 5, 5, 5)
        )
    ),
    accumulatorType = cms.string('HcalDigiProducer'),
    doEmpty = cms.bool(True),
    doHFWindow = cms.bool(False),
    doHPDNoise = cms.bool(False),
    doIonFeedback = cms.bool(True),
    doNoise = cms.bool(True),
    doThermalNoise = cms.bool(True),
    doTimeSlew = cms.bool(True),
    hb = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(125.44, 125.54, 125.32, 125.13, 124.46, 
            125.01, 125.22, 125.48, 124.45, 125.9, 
            125.83, 127.01, 126.82, 129.73, 131.83, 
            143.52),
        siPMCells = cms.vint32(),
        simHitToPhotoelectrons = cms.double(2000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    he = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(16),
        photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(210.55, 197.93, 186.12, 189.64, 189.63, 
            190.28, 189.61, 189.6, 190.12, 191.22, 
            190.9, 193.06, 188.42, 188.42),
        simHitToPhotoelectrons = cms.double(2000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    hf1 = cms.PSet(
        binOfMaximum = cms.int32(3),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(2.79),
        readoutFrameSize = cms.int32(5),
        samplingFactor = cms.double(0.383),
        simHitToPhotoelectrons = cms.double(6.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(14.0)
    ),
    hf2 = cms.PSet(
        binOfMaximum = cms.int32(3),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(5),
        samplingFactor = cms.double(0.368),
        simHitToPhotoelectrons = cms.double(6.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(13.0)
    ),
    hitsProducer = cms.string('g4SimHits'),
    ho = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(0.24, 0.24, 0.24, 0.24, 0.17, 
            0.17, 0.17, 0.17, 0.17, 0.17, 
            0.17, 0.17, 0.17, 0.17, 0.17),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoHamamatsu = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0),
        pixels = cms.int32(960),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoZecotek = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0),
        pixels = cms.int32(36000),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    injectTestHits = cms.bool(False),
    makeDigiSimLinks = cms.untracked.bool(False),
    useOldHB = cms.bool(True),
    useOldHE = cms.bool(True),
    useOldHF = cms.bool(True),
    useOldHO = cms.bool(True),
    zdc = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(10),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectrons = cms.double(6.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(-4.0)
    )
)

process.hcalSimBlock = cms.PSet(
    ChangeResponse = cms.bool(False),
    CorrFactorFile = cms.FileInPath('SimCalorimetry/HcalSimProducers/data/calor_corr01.txt'),
    DelivLuminosity = cms.double(0),
    HBHEUpgradeQIE = cms.bool(True),
    HBTuningParameter = cms.double(0.875),
    HEDarkening = cms.bool(False),
    HETuningParameter = cms.double(0.9),
    HFDarkening = cms.bool(False),
    HFTuningParameter = cms.double(1.025),
    HFUpgradeQIE = cms.bool(False),
    HOTuningParameter = cms.double(1),
    HcalPreMixStage1 = cms.bool(False),
    HcalPreMixStage2 = cms.bool(False),
    HcalReLabel = cms.PSet(
        RelabelHits = cms.untracked.bool(False),
        RelabelRules = cms.untracked.PSet(
            CorrectPhi = cms.untracked.bool(False),
            Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                2, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                3, 3, 4, 4, 4, 
                4, 4, 5, 5, 5, 
                5, 5, 5, 5)
        )
    ),
    doEmpty = cms.bool(True),
    doHFWindow = cms.bool(False),
    doHPDNoise = cms.bool(False),
    doIonFeedback = cms.bool(True),
    doNoise = cms.bool(True),
    doThermalNoise = cms.bool(True),
    doTimeSlew = cms.bool(True),
    hb = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(125.44, 125.54, 125.32, 125.13, 124.46, 
            125.01, 125.22, 125.48, 124.45, 125.9, 
            125.83, 127.01, 126.82, 129.73, 131.83, 
            143.52),
        siPMCells = cms.vint32(),
        simHitToPhotoelectrons = cms.double(2000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    he = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(16),
        photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
            0.3305, 0.3305, 0.3305, 0.3305),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(210.55, 197.93, 186.12, 189.64, 189.63, 
            190.28, 189.61, 189.6, 190.12, 191.22, 
            190.9, 193.06, 188.42, 188.42),
        simHitToPhotoelectrons = cms.double(2000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(6.0),
        timeSmearing = cms.bool(True)
    ),
    hf1 = cms.PSet(
        binOfMaximum = cms.int32(3),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(2.79),
        readoutFrameSize = cms.int32(5),
        samplingFactor = cms.double(0.383),
        simHitToPhotoelectrons = cms.double(6.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(14.0)
    ),
    hf2 = cms.PSet(
        binOfMaximum = cms.int32(3),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(5),
        samplingFactor = cms.double(0.368),
        simHitToPhotoelectrons = cms.double(6.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(13.0)
    ),
    hitsProducer = cms.string('g4SimHits'),
    ho = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(0.24, 0.24, 0.24, 0.24, 0.17, 
            0.17, 0.17, 0.17, 0.17, 0.17, 
            0.17, 0.17, 0.17, 0.17, 0.17),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoHamamatsu = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0),
        pixels = cms.int32(960),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    hoZecotek = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        firstRing = cms.int32(1),
        photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0, 3.0, 3.0, 3.0, 3.0, 
            3.0),
        pixels = cms.int32(36000),
        readoutFrameSize = cms.int32(10),
        samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0, 
            360.0, 360.0, 360.0, 360.0, 360.0),
        siPMCode = cms.int32(2),
        simHitToPhotoelectrons = cms.double(4000.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(5.0),
        timeSmearing = cms.bool(False)
    ),
    injectTestHits = cms.bool(False),
    useOldHB = cms.bool(True),
    useOldHE = cms.bool(True),
    useOldHF = cms.bool(True),
    useOldHO = cms.bool(True),
    zdc = cms.PSet(
        binOfMaximum = cms.int32(5),
        doPhotoStatistics = cms.bool(True),
        photoelectronsToAnalog = cms.double(1.843),
        readoutFrameSize = cms.int32(10),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectrons = cms.double(6.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(-4.0)
    )
)

process.initialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.initialStepTrajectoryBuilderPreSplitting = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilterPreSplitting')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.initialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilterBase')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('initialStepTrajectoryFilterShape')
        ))
)

process.initialStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.initialStepTrajectoryFilterBasePreSplitting = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.initialStepTrajectoryFilterPreSplitting = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilterBasePreSplitting')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('initialStepTrajectoryFilterShapePreSplitting')
        ))
)

process.initialStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.initialStepTrajectoryFilterShapePreSplitting = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.isolationSumsCalculator = cms.PSet(
    ComponentName = cms.string('isolationSumsCalculator'),
    EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
    EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
    EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
    EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
    EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
    EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
    EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
    EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEA_Barrel = cms.double(0.095),
    EcalRecHitThreshEA_Endcap = cms.double(0.0),
    EcalRecHitThreshEB_Barrel = cms.double(0.095),
    EcalRecHitThreshEB_Endcap = cms.double(0.0),
    EcalRecHitThreshEtA_Barrel = cms.double(0.0),
    EcalRecHitThreshEtA_Endcap = cms.double(0.11),
    EcalRecHitThreshEtB_Barrel = cms.double(0.0),
    EcalRecHitThreshEtB_Endcap = cms.double(0.11),
    HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
    HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
    HcalRecHitCollection = cms.InputTag("towerMaker"),
    HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalTowerThreshEA_Barrel = cms.double(0.0),
    HcalTowerThreshEA_Endcap = cms.double(0.0),
    HcalTowerThreshEB_Barrel = cms.double(0.0),
    HcalTowerThreshEB_Endcap = cms.double(0.0),
    TrackConeInnerRadiusA_Barrel = cms.double(0.04),
    TrackConeInnerRadiusA_Endcap = cms.double(0.04),
    TrackConeInnerRadiusB_Barrel = cms.double(0.04),
    TrackConeInnerRadiusB_Endcap = cms.double(0.04),
    TrackConeOuterRadiusA_Barrel = cms.double(0.4),
    TrackConeOuterRadiusA_Endcap = cms.double(0.4),
    TrackConeOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeOuterRadiusB_Endcap = cms.double(0.3),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotProducer = cms.InputTag("offlineBeamSpot"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isolationtrackEtaSliceA_Barrel = cms.double(0.015),
    isolationtrackEtaSliceA_Endcap = cms.double(0.015),
    isolationtrackEtaSliceB_Barrel = cms.double(0.015),
    isolationtrackEtaSliceB_Endcap = cms.double(0.015),
    isolationtrackThresholdA_Barrel = cms.double(0.0),
    isolationtrackThresholdA_Endcap = cms.double(0.0),
    isolationtrackThresholdB_Barrel = cms.double(0.0),
    isolationtrackThresholdB_Endcap = cms.double(0.0),
    longImpactParameterA_Barrel = cms.double(0.2),
    longImpactParameterA_Endcap = cms.double(0.2),
    longImpactParameterB_Barrel = cms.double(0.2),
    longImpactParameterB_Endcap = cms.double(0.2),
    moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
        0.81, 1.13, 1.15, 1.45, 1.58),
    modulePhiBoundary = cms.double(0.0087),
    trackProducer = cms.InputTag("generalTracks"),
    transImpactParameterA_Barrel = cms.double(0.1),
    transImpactParameterA_Endcap = cms.double(0.1),
    transImpactParameterB_Barrel = cms.double(0.1),
    transImpactParameterB_Endcap = cms.double(0.1),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False)
)

process.j2tParametersCALO = cms.PSet(
    coneSize = cms.double(0.4),
    extrapolations = cms.InputTag("trackExtrapolator"),
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks")
)

process.j2tParametersVX = cms.PSet(
    coneSize = cms.double(0.4),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)

process.jetCoreRegionalStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('jetCoreRegionalStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(50),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('jetCoreRegionalStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.jetCoreRegionalStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.jetDQMParameters = cms.PSet(
    asymmetryThirdJetCut = cms.double(30),
    balanceThirdJetCut = cms.double(0.2),
    eBin = cms.int32(100),
    eMax = cms.double(1000.0),
    eMin = cms.double(0.0),
    etaBin = cms.int32(100),
    etaMax = cms.double(5.0),
    etaMin = cms.double(-5.0),
    fillJIDPassFrac = cms.int32(1),
    pBin = cms.int32(100),
    pMax = cms.double(500.0),
    pMin = cms.double(0.0),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    phiBin = cms.int32(70),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(100),
    ptMax = cms.double(500.0),
    ptMin = cms.double(20.0),
    ptThreshold = cms.double(20.0),
    ptThresholdUnc = cms.double(30),
    verbose = cms.int32(0)
)

process.layerInfo = cms.PSet(
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        useRingSlector = cms.bool(False)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    )
)

process.leadTrackFinding = cms.PSet(
    Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
    cut = cms.double(0.5)
)

process.legStuff = cms.PSet(
    borderSize = cms.int32(0),
    fillColor = cms.int32(0),
    header = cms.string(''),
    option = cms.string('brNDC'),
    posX = cms.double(0.5),
    posY = cms.double(0.72),
    sizeX = cms.double(0.39),
    sizeY = cms.double(0.17)
)

process.looseMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(50),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isPFMuon && (isTrackerMuon || isGlobalMuon) && (pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt < 0.20'),
    z0Cut = cms.untracked.double(100)
)

process.lowPtTripletStepStandardTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.lowPtTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('lowPtTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(4),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('lowPtTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.lowPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('lowPtTripletStepStandardTrajectoryFilter')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('ClusterShapeTrajectoryFilter')
        ))
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(10)
)

process.met_53x = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-2, -2, -2, -2, -2),
        Pt010_MET = cms.vdouble(-0.2, -0.3, -0.5, -0.5),
        Pt010_Medium = cms.vdouble(-2, -2, -2, -2, -2),
        Pt010_Tight = cms.vdouble(-2, -2, -2, -2, -2),
        Pt1020_Loose = cms.vdouble(-2, -2, -2, -2, -2),
        Pt1020_MET = cms.vdouble(-0.2, -0.2, -0.5, -0.3),
        Pt1020_Medium = cms.vdouble(-2, -2, -2, -2, -2),
        Pt1020_Tight = cms.vdouble(-2, -2, -2, -2, -2),
        Pt2030_Loose = cms.vdouble(-2, -2, -2, -2, -2),
        Pt2030_MET = cms.vdouble(-0.2, -0.2, -0.2, 0.1),
        Pt2030_Medium = cms.vdouble(-2, -2, -2, -2, -2),
        Pt2030_Tight = cms.vdouble(-2, -2, -2, -2, -2),
        Pt3050_Loose = cms.vdouble(-2, -2, -2, -2, -2),
        Pt3050_MET = cms.vdouble(-0.2, -0.2, 0.0, 0.2),
        Pt3050_Medium = cms.vdouble(-2, -2, -2, -2, -2),
        Pt3050_Tight = cms.vdouble(-2, -2, -2, -2, -2)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('met53x'),
    tmvaMethod = cms.string('JetIDMVAMET'),
    tmvaSpectators = cms.vstring(),
    tmvaVariables = cms.vstring('nvtx', 
        'jetPt', 
        'jetEta', 
        'jetPhi', 
        'dZ', 
        'beta', 
        'betaStar', 
        'nCharged', 
        'nNeutrals', 
        'dR2Mean', 
        'ptD', 
        'frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/TMVAClassificationCategory_JetID_MET_53X_Dec2012.weights.xml.gz'),
    version = cms.int32(-1)
)

process.met_53x_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-2, -2, -2, -2, -2),
    Pt010_MET = cms.vdouble(-0.2, -0.3, -0.5, -0.5),
    Pt010_Medium = cms.vdouble(-2, -2, -2, -2, -2),
    Pt010_Tight = cms.vdouble(-2, -2, -2, -2, -2),
    Pt1020_Loose = cms.vdouble(-2, -2, -2, -2, -2),
    Pt1020_MET = cms.vdouble(-0.2, -0.2, -0.5, -0.3),
    Pt1020_Medium = cms.vdouble(-2, -2, -2, -2, -2),
    Pt1020_Tight = cms.vdouble(-2, -2, -2, -2, -2),
    Pt2030_Loose = cms.vdouble(-2, -2, -2, -2, -2),
    Pt2030_MET = cms.vdouble(-0.2, -0.2, -0.2, 0.1),
    Pt2030_Medium = cms.vdouble(-2, -2, -2, -2, -2),
    Pt2030_Tight = cms.vdouble(-2, -2, -2, -2, -2),
    Pt3050_Loose = cms.vdouble(-2, -2, -2, -2, -2),
    Pt3050_MET = cms.vdouble(-0.2, -0.2, 0.0, 0.2),
    Pt3050_Medium = cms.vdouble(-2, -2, -2, -2, -2),
    Pt3050_Tight = cms.vdouble(-2, -2, -2, -2, -2)
)

process.metfull_53x_wp = cms.PSet(
    Pt010_MET = cms.vdouble(-0.2, -0.3, -0.5, -0.5),
    Pt1020_MET = cms.vdouble(-0.2, -0.2, -0.5, -0.3),
    Pt2030_MET = cms.vdouble(0.0, 0.0, 0.0, 0.0),
    Pt3050_MET = cms.vdouble(0.0, 0.0, -0.1, -0.2)
)

process.mipVariable = cms.PSet(
    ComponentName = cms.string('mipVariable'),
    HaloDiscThreshold = cms.double(70.0),
    ResidualWidth = cms.double(0.23),
    XRangeFit = cms.double(180.0),
    YRangeFit = cms.double(7.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)

process.mixCaloHits = cms.PSet(
    crossingFrames = cms.untracked.vstring(),
    input = cms.VInputTag(cms.InputTag("g4SimHits","CastorFI"), cms.InputTag("g4SimHits","EcalHitsEB"), cms.InputTag("g4SimHits","EcalHitsEE"), cms.InputTag("g4SimHits","EcalHitsES"), cms.InputTag("g4SimHits","HcalHits"), 
        cms.InputTag("g4SimHits","ZDCHITS")),
    subdets = cms.vstring('CastorFI', 
        'EcalHitsEB', 
        'EcalHitsEE', 
        'EcalHitsES', 
        'HcalHits', 
        'ZDCHITS'),
    type = cms.string('PCaloHit')
)

process.mixHepMCProducts = cms.PSet(
    input = cms.VInputTag(cms.InputTag("generator")),
    makeCrossingFrame = cms.untracked.bool(False),
    type = cms.string('HepMCProduct')
)

process.mixPCFCaloHits = cms.PSet(
    input = cms.VInputTag(cms.InputTag("CFWriter","g4SimHitsCaloHitsTk"), cms.InputTag("CFWriter","g4SimHitsCastorBU"), cms.InputTag("CFWriter","g4SimHitsCastorFI"), cms.InputTag("CFWriter","g4SimHitsCastorPL"), cms.InputTag("CFWriter","g4SimHitsCastorTU"), 
        cms.InputTag("CFWriter","g4SimHitsEcalHitsEB"), cms.InputTag("CFWriter","g4SimHitsEcalHitsEE"), cms.InputTag("CFWriter","g4SimHitsEcalHitsES"), cms.InputTag("CFWriter","g4SimHitsEcalTBH4BeamHits"), cms.InputTag("CFWriter","g4SimHitsHcalHits"), 
        cms.InputTag("CFWriter","g4SimHitsHcalTB06BeamHits"), cms.InputTag("CFWriter","g4SimHitsZDCHITS")),
    subdets = cms.vstring('CaloHitsTk', 
        'CastorBU', 
        'CastorFI', 
        'CastorPL', 
        'CastorTU', 
        'EcalHitsEB', 
        'EcalHitsEE', 
        'EcalHitsES', 
        'EcalTBH4BeamHits', 
        'HcalHits', 
        'HcalTB06BeamHits', 
        'ZDCHITS'),
    type = cms.string('PCaloHitPCrossingFrame')
)

process.mixPCFHepMCProducts = cms.PSet(
    input = cms.VInputTag(cms.InputTag("CFWriter","generator")),
    type = cms.string('HepMCProductPCrossingFrame')
)

process.mixPCFSimHits = cms.PSet(
    input = cms.VInputTag(cms.InputTag("CFWriter","g4SimHitsBSCHits"), cms.InputTag("CFWriter","g4SimHitsBCM1FHits"), cms.InputTag("CFWriter","g4SimHitsPLTHits"), cms.InputTag("CFWriter","g4SimHitsFP420SI"), cms.InputTag("CFWriter","g4SimHitsMuonCSCHits"), 
        cms.InputTag("CFWriter","g4SimHitsMuonDTHits"), cms.InputTag("CFWriter","g4SimHitsMuonRPCHits"), cms.InputTag("CFWriter","g4SimHitsTotemHitsRP"), cms.InputTag("CFWriter","g4SimHitsTotemHitsT1"), cms.InputTag("CFWriter","g4SimHitsTotemHitsT2Gem"), 
        cms.InputTag("CFWriter","g4SimHitsTrackerHitsPixelBarrelHighTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsPixelBarrelLowTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsPixelEndcapHighTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsPixelEndcapLowTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsTECHighTof"), 
        cms.InputTag("CFWriter","g4SimHitsTrackerHitsTECLowTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsTIBHighTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsTIBLowTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsTIDHighTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsTIDLowTof"), 
        cms.InputTag("CFWriter","g4SimHitsTrackerHitsTOBHighTof"), cms.InputTag("CFWriter","g4SimHitsTrackerHitsTOBLowTof")),
    subdets = cms.vstring('BSCHits', 
        'BCM1FHits', 
        'PLTHits', 
        'FP420SI', 
        'MuonCSCHits', 
        'MuonDTHits', 
        'MuonRPCHits', 
        'TotemHitsRP', 
        'TotemHitsT1', 
        'TotemHitsT2Gem', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelEndcapHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTOBLowTof'),
    type = cms.string('PSimHitPCrossingFrame')
)

process.mixPCFSimTracks = cms.PSet(
    input = cms.VInputTag(cms.InputTag("CFWriter","g4SimHits")),
    type = cms.string('SimTrackPCrossingFrame')
)

process.mixPCFSimVertices = cms.PSet(
    input = cms.VInputTag(cms.InputTag("CFWriter","g4SimHits")),
    type = cms.string('SimVertexPCrossingFrame')
)

process.mixSimHits = cms.PSet(
    crossingFrames = cms.untracked.vstring('MuonCSCHits', 
        'MuonDTHits', 
        'MuonRPCHits'),
    input = cms.VInputTag(cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), 
        cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsTECHighTof"), cms.InputTag("g4SimHits","TrackerHitsTECLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIBHighTof"), 
        cms.InputTag("g4SimHits","TrackerHitsTIBLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIDHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIDLowTof"), cms.InputTag("g4SimHits","TrackerHitsTOBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTOBLowTof")),
    subdets = cms.vstring('MuonCSCHits', 
        'MuonDTHits', 
        'MuonRPCHits', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelEndcapHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIBLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTOBLowTof'),
    type = cms.string('PSimHit')
)

process.mixSimTracks = cms.PSet(
    input = cms.VInputTag(cms.InputTag("g4SimHits")),
    makeCrossingFrame = cms.untracked.bool(False),
    type = cms.string('SimTrack')
)

process.mixSimVertices = cms.PSet(
    input = cms.VInputTag(cms.InputTag("g4SimHits")),
    makeCrossingFrame = cms.untracked.bool(False),
    type = cms.string('SimVertex')
)

process.mixedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('mixedTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('mixedTripletStepPropagator'),
    propagatorOpposite = cms.string('mixedTripletStepPropagatorOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('mixedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.mixedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.muonAssociatorByHitsCommonParameters = cms.PSet(
    AbsoluteNumberOfHits_muon = cms.bool(False),
    AbsoluteNumberOfHits_track = cms.bool(False),
    CSClinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCStripDigiSimLinks"),
    CSCsimHitsTag = cms.InputTag("g4SimHits","MuonCSCHits"),
    CSCsimHitsXFTag = cms.InputTag("mix","g4SimHitsMuonCSCHits"),
    CSCwireLinksTag = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigiSimLinks"),
    DTdigiTag = cms.InputTag("simMuonDTDigis"),
    DTdigisimlinkTag = cms.InputTag("simMuonDTDigis"),
    DTrechitTag = cms.InputTag("dt1DRecHits"),
    DTsimhitsTag = cms.InputTag("g4SimHits","MuonDTHits"),
    DTsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonDTHits"),
    EfficiencyCut_muon = cms.double(0.0),
    EfficiencyCut_track = cms.double(0.0),
    NHitCut_muon = cms.uint32(0),
    NHitCut_track = cms.uint32(0),
    PurityCut_muon = cms.double(0.0),
    PurityCut_track = cms.double(0.0),
    ROUList = cms.vstring('TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof', 
        'TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'),
    RPCdigisimlinkTag = cms.InputTag("simMuonRPCDigis","RPCDigiSimLink"),
    RPCsimhitsTag = cms.InputTag("g4SimHits","MuonRPCHits"),
    RPCsimhitsXFTag = cms.InputTag("mix","g4SimHitsMuonRPCHits"),
    ThreeHitTracksAreSpecial = cms.bool(False),
    UseGrouped = cms.bool(True),
    UseMuon = cms.bool(True),
    UsePixels = cms.bool(True),
    UseSplitting = cms.bool(True),
    UseTracker = cms.bool(True),
    acceptOneStubMatchings = cms.bool(True),
    associatePixel = cms.bool(True),
    associateRecoTracks = cms.bool(True),
    associateStrip = cms.bool(True),
    associatorByWire = cms.bool(False),
    crossingframe = cms.bool(False),
    dumpDT = cms.bool(False),
    dumpInputCollections = cms.untracked.bool(False),
    includeZeroHitMuons = cms.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    links_exist = cms.bool(True),
    simtracksTag = cms.InputTag("g4SimHits"),
    simtracksXFTag = cms.InputTag("mix","g4SimHits")
)

process.muonSeededTrajectoryBuilderForInOut = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForInOut'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(2),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryBuilderForOutIn = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutIn'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutIn')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutIn')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryBuilderForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryFilterForInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.muonSeededTrajectoryFilterForOutIn = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.muonSeededTrajectoryFilterForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.muonTPSet = cms.PSet(
    chargedOnly = cms.bool(True),
    lip = cms.double(30.0),
    maxRapidity = cms.double(2.4),
    minHit = cms.int32(0),
    minRapidity = cms.double(-2.4),
    pdgId = cms.vint32(13, -13),
    ptMin = cms.double(0.9),
    signalOnly = cms.bool(True),
    src = cms.InputTag("mix","MergedTrackTruth"),
    stableOnly = cms.bool(False),
    tip = cms.double(3.5)
)

process.noPrediscriminants = cms.PSet(
    BooleanOperator = cms.string('and')
)

process.options = cms.untracked.PSet(
    allowUnscheduled = cms.untracked.bool(True),
    numberOfStreams = cms.untracked.uint32(4),
    numberOfThreads = cms.untracked.uint32(4)
)

process.pfBlockBasedIsolation = cms.PSet(
    ComponentName = cms.string('pfBlockBasedIsolation'),
    coneSize = cms.double(9999999999)
)

process.pfElecMva = cms.PSet(
    MVACut = cms.double(-1.0)
)

process.pfIsolationCalculator = cms.PSet(
    ComponentName = cms.string('pfIsolationCalculator'),
    applyDzDxyVeto = cms.bool(True),
    applyMissHitPhVeto = cms.bool(False),
    applyPFPUVeto = cms.bool(True),
    applyVeto = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    coneDR = cms.double(0.3),
    deltaRVetoBarrel = cms.bool(True),
    deltaRVetoBarrelCharged = cms.double(0.02),
    deltaRVetoBarrelNeutrals = cms.double(-1.0),
    deltaRVetoBarrelPhotons = cms.double(-1.0),
    deltaRVetoEndcap = cms.bool(True),
    deltaRVetoEndcapCharged = cms.double(0.02),
    deltaRVetoEndcapNeutrals = cms.double(-1.0),
    deltaRVetoEndcapPhotons = cms.double(0.07),
    numberOfCrystalEndcapPhotons = cms.double(4.0),
    numberOfRings = cms.int32(1),
    particleType = cms.int32(1),
    rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
    rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
    rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
    rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
    rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
    rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
    rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
    rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
    rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
    rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
    rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
    rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
    rectangleVetoBarrel = cms.bool(True),
    rectangleVetoEndcap = cms.bool(False),
    ringSize = cms.double(0.3),
    useCrystalSize = cms.bool(True)
)

process.pfTausrequireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        Producer = cms.InputTag("pfTausDiscriminationByDecayModeFinding"),
        cut = cms.double(0.5)
    )
)

process.pileupVtxDigitizer = cms.PSet(
    accumulatorType = cms.string('PileupVertexAccumulator'),
    hitsProducer = cms.string('generator'),
    makeDigiSimLinks = cms.untracked.bool(False)
)

process.pixelDigitizer = cms.PSet(
    AdcFullScale = cms.int32(255),
    AdcFullScaleStack = cms.int32(255),
    AddNoise = cms.bool(True),
    AddNoisyPixels = cms.bool(True),
    AddPixelInefficiencyFromPython = cms.bool(True),
    AddThresholdSmearing = cms.bool(True),
    Alpha2Order = cms.bool(True),
    BPix_SignalResponse_p0 = cms.double(0.0035),
    BPix_SignalResponse_p1 = cms.double(1.23),
    BPix_SignalResponse_p2 = cms.double(97.4),
    BPix_SignalResponse_p3 = cms.double(126.5),
    ChargeVCALSmearing = cms.bool(True),
    DeadModules = cms.VPSet(cms.PSet(
        Dead_detID = cms.int32(302055940),
        Module = cms.string('tbmB')
    ), 
        cms.PSet(
            Dead_detID = cms.int32(302059800),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302121992),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302123296),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302125060),
            Module = cms.string('tbmA')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302125076),
            Module = cms.string('tbmA')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302126364),
            Module = cms.string('tbmB')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302126596),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302127136),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302188552),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302188824),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302194200),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302195232),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302197252),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(302197784),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453892),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453896),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453900),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352453904),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454916),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454920),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454924),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454928),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455940),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455944),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455948),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455952),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454148),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454152),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352454156),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455172),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455176),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352455180),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352456196),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352456200),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(352456204),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999748),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999752),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999756),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(343999760),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344014340),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344014344),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344014348),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344019460),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344019464),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344019468),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077572),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077576),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077580),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344077584),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078596),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078600),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078604),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078608),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079620),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079624),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079628),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344079632),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078852),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078856),
            Module = cms.string('whole')
        ), 
        cms.PSet(
            Dead_detID = cms.int32(344078860),
            Module = cms.string('whole')
        )),
    DeadModules_DB = cms.bool(True),
    DoPixelAging = cms.bool(False),
    ElectronPerAdc = cms.double(135.0),
    ElectronsPerVcal = cms.double(65.5),
    ElectronsPerVcal_Offset = cms.double(-414.0),
    FPix_SignalResponse_p0 = cms.double(0.0043),
    FPix_SignalResponse_p1 = cms.double(1.31),
    FPix_SignalResponse_p2 = cms.double(93.6),
    FPix_SignalResponse_p3 = cms.double(134.6),
    FirstStackLayer = cms.int32(5),
    GainSmearing = cms.double(0.0),
    LorentzAngle_DB = cms.bool(True),
    MissCalibrate = cms.bool(True),
    NoiseInElectrons = cms.double(175.0),
    NumPixelBarrel = cms.int32(3),
    NumPixelEndcap = cms.int32(2),
    OffsetSmearing = cms.double(0.0),
    PixGeometryType = cms.string('idealForDigi'),
    ReadoutNoiseInElec = cms.double(350.0),
    RoutList = cms.vstring('TrackerHitsPixelBarrelLowTof', 
        'TrackerHitsPixelBarrelHighTof', 
        'TrackerHitsPixelEndcapLowTof', 
        'TrackerHitsPixelEndcapHighTof'),
    TanLorentzAnglePerTesla_BPix = cms.double(0.106),
    TanLorentzAnglePerTesla_FPix = cms.double(0.106),
    ThresholdInElectrons_BPix = cms.double(3500.0),
    ThresholdInElectrons_BPix_L1 = cms.double(3500.0),
    ThresholdInElectrons_FPix = cms.double(3000.0),
    ThresholdSmearing_BPix = cms.double(245.0),
    ThresholdSmearing_BPix_L1 = cms.double(245.0),
    ThresholdSmearing_FPix = cms.double(210.0),
    TofLowerCut = cms.double(-12.5),
    TofUpperCut = cms.double(12.5),
    accumulatorType = cms.string('SiPixelDigitizer'),
    bunchScaleAt25 = cms.double(1.0),
    deltaProductionCut = cms.double(0.03),
    hitsProducer = cms.string('g4SimHits'),
    killModules = cms.bool(True),
    makeDigiSimLinks = cms.untracked.bool(True),
    theInnerEfficiency_FPix1 = cms.double(1.0),
    theInnerEfficiency_FPix2 = cms.double(1.0),
    theInstLumiScaleFactor = cms.double(221.95),
    theLadderEfficiency_BPix1 = cms.vdouble(0.978351, 0.971877, 0.974283, 0.969328, 0.972922, 
        0.970964, 0.975762, 0.974786, 0.980244, 0.978452, 
        0.982129, 0.979737, 0.984381, 0.983971, 0.98186, 
        0.983283, 0.981485, 0.979753, 0.980287, 0.975195),
    theLadderEfficiency_BPix2 = cms.vdouble(0.996276, 0.993354, 0.993752, 0.992948, 0.993871, 
        0.992317, 0.997733, 0.992516, 0.992649, 0.993425, 
        0.994065, 0.993481, 0.993169, 0.994223, 0.992397, 
        0.99509, 0.995177, 0.995319, 0.994925, 0.992933, 
        0.994111, 0.9948, 0.994711, 0.994294, 0.995392, 
        0.994229, 0.994414, 0.995271, 0.993585, 0.995264, 
        0.992977, 0.993642),
    theLadderEfficiency_BPix3 = cms.vdouble(0.996206, 0.998039, 0.995801, 0.99665, 0.996414, 
        0.995755, 0.996518, 0.995584, 0.997171, 0.998056, 
        0.99595, 0.997473, 0.996858, 0.996486, 0.997442, 
        0.998002, 0.995429, 0.997939, 0.996896, 0.997434, 
        0.996616, 0.996439, 0.996546, 0.997597, 0.995435, 
        0.996396, 0.99621, 0.998316, 0.998431, 0.99598, 
        0.997063, 0.996245, 0.997502, 0.996254, 0.997545, 
        0.997553, 0.996722, 0.996107, 0.996588, 0.996277, 
        0.99785, 0.997087, 0.998139, 0.997139),
    theModuleEfficiency_BPix1 = cms.vdouble(1.00361, 0.999371, 0.961242, 0.953582),
    theModuleEfficiency_BPix2 = cms.vdouble(1.00069, 0.999792, 0.99562, 1.00341),
    theModuleEfficiency_BPix3 = cms.vdouble(1.00006, 0.999744, 0.998147, 1.00039),
    theOuterEfficiency_FPix1 = cms.double(1.0),
    theOuterEfficiency_FPix2 = cms.double(1.0),
    thePUEfficiency_BPix1 = cms.vdouble(1.0181, -2.28345e-07, -1.30042e-09),
    thePUEfficiency_BPix2 = cms.vdouble(1.00648, -1.28515e-06, -1.85915e-10),
    thePUEfficiency_BPix3 = cms.vdouble(1.0032, -1.96206e-08, -1.99009e-10),
    thePUEfficiency_FPix_Inner = cms.vdouble(1.0),
    thePUEfficiency_FPix_Outer = cms.vdouble(1.0),
    thePixelChipEfficiency_BPix1 = cms.double(1.0),
    thePixelChipEfficiency_BPix2 = cms.double(1.0),
    thePixelChipEfficiency_BPix3 = cms.double(1.0),
    thePixelChipEfficiency_FPix1 = cms.double(0.999),
    thePixelChipEfficiency_FPix2 = cms.double(0.999),
    thePixelColEfficiency_BPix1 = cms.double(1.0),
    thePixelColEfficiency_BPix2 = cms.double(1.0),
    thePixelColEfficiency_BPix3 = cms.double(1.0),
    thePixelColEfficiency_FPix1 = cms.double(0.999),
    thePixelColEfficiency_FPix2 = cms.double(0.999),
    thePixelEfficiency_BPix1 = cms.double(1.0),
    thePixelEfficiency_BPix2 = cms.double(1.0),
    thePixelEfficiency_BPix3 = cms.double(1.0),
    thePixelEfficiency_FPix1 = cms.double(0.999),
    thePixelEfficiency_FPix2 = cms.double(0.999),
    useDB = cms.bool(False)
)

process.pixelLessStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelLessStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(4),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('pixelLessStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.pixelLessStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0)
)

process.pixelPairStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelPairStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.pixelPairStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryFilterBase')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('pixelPairStepTrajectoryFilterShape')
        ))
)

process.pixelPairStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.pixelPairStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.plotPset = cms.PSet(
    HPSIDDecayModeFindingEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByDecayModeFinding/DecayModeFindingEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByDecayModeFinding/hpsPFTauDiscriminationByDecayModeFinding_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDDecayModeFindingNewDMsEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByDecayModeFindingNewDMs/DecayModeFindingNewDMsEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByDecayModeFindingNewDMs/hpsPFTauDiscriminationByDecayModeFindingNewDMs_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDDecayModeFindingOldDMsEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByDecayModeFindingOldDMs/DecayModeFindingOldDMsEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByDecayModeFindingOldDMs/hpsPFTauDiscriminationByDecayModeFindingOldDMs_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDLooseChargedIsolationEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseChargedIsolation/LooseChargedIsolationEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseChargedIsolation/hpsPFTauDiscriminationByLooseChargedIsolation_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDLooseCombinedIsolationDBSumPtCorr3HitsEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits/LooseCombinedIsolationDBSumPtCorr3HitsEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits/hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDLooseCombinedIsolationDBSumPtCorrEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr/LooseCombinedIsolationDBSumPtCorrEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr/hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDLooseElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseElectronRejection/LooseElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseElectronRejection/hpsPFTauDiscriminationByLooseElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDLooseIsolationEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolation/LooseIsolationEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolation/hpsPFTauDiscriminationByLooseIsolation_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDLooseIsolationMVA3newDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3newDMwLT/LooseIsolationMVA3newDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3newDMwLT/hpsPFTauDiscriminationByLooseIsolationMVA3newDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDLooseIsolationMVA3newDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3newDMwoLT/LooseIsolationMVA3newDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3newDMwoLT/hpsPFTauDiscriminationByLooseIsolationMVA3newDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDLooseIsolationMVA3oldDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwLT/LooseIsolationMVA3oldDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwLT/hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDLooseIsolationMVA3oldDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwoLT/LooseIsolationMVA3oldDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwoLT/hpsPFTauDiscriminationByLooseIsolationMVA3oldDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDLooseMuonRejection2Efficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseMuonRejection2/LooseMuonRejection2Eff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseMuonRejection2/hpsPFTauDiscriminationByLooseMuonRejection2_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDLooseMuonRejection3Efficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseMuonRejection3/LooseMuonRejection3Eff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseMuonRejection3/hpsPFTauDiscriminationByLooseMuonRejection3_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDLooseMuonRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseMuonRejection/LooseMuonRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByLooseMuonRejection/hpsPFTauDiscriminationByLooseMuonRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMVA5LooseElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5LooseElectronRejection/MVA5LooseElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5LooseElectronRejection/hpsPFTauDiscriminationByMVA5LooseElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMVA5MediumElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5MediumElectronRejection/MVA5MediumElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5MediumElectronRejection/hpsPFTauDiscriminationByMVA5MediumElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMVA5TightElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5TightElectronRejection/MVA5TightElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5TightElectronRejection/hpsPFTauDiscriminationByMVA5TightElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMVA5VLooseElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5VLooseElectronRejection/MVA5VLooseElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5VLooseElectronRejection/hpsPFTauDiscriminationByMVA5VLooseElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMVA5VTightElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5VTightElectronRejection/MVA5VTightElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVA5VTightElectronRejection/hpsPFTauDiscriminationByMVA5VTightElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMVALooseMuonRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVALooseMuonRejection/MVALooseMuonRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVALooseMuonRejection/hpsPFTauDiscriminationByMVALooseMuonRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMVAMediumMuonRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVAMediumMuonRejection/MVAMediumMuonRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVAMediumMuonRejection/hpsPFTauDiscriminationByMVAMediumMuonRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMVATightMuonRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVATightMuonRejection/MVATightMuonRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMVATightMuonRejection/hpsPFTauDiscriminationByMVATightMuonRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMatchingEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_Matched/PFJetMatchingEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_Matched/hpsPFTauProducerMatched_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumCombinedIsolationDBSumPtCorr3HitsEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits/MediumCombinedIsolationDBSumPtCorr3HitsEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits/hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumCombinedIsolationDBSumPtCorrEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr/MediumCombinedIsolationDBSumPtCorrEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr/hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumElectronRejection/MediumElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumElectronRejection/hpsPFTauDiscriminationByMediumElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumIsolationMVA3newDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3newDMwLT/MediumIsolationMVA3newDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3newDMwLT/hpsPFTauDiscriminationByMediumIsolationMVA3newDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumIsolationMVA3newDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3newDMwoLT/MediumIsolationMVA3newDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3newDMwoLT/hpsPFTauDiscriminationByMediumIsolationMVA3newDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumIsolationMVA3oldDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwLT/MediumIsolationMVA3oldDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwLT/hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumIsolationMVA3oldDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwoLT/MediumIsolationMVA3oldDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwoLT/hpsPFTauDiscriminationByMediumIsolationMVA3oldDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDMediumMuonRejection2Efficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumMuonRejection2/MediumMuonRejection2Eff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumMuonRejection2/hpsPFTauDiscriminationByMediumMuonRejection2_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDMediumMuonRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumMuonRejection/MediumMuonRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByMediumMuonRejection/hpsPFTauDiscriminationByMediumMuonRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDTightChargedIsolationEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightChargedIsolation/TightChargedIsolationEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightChargedIsolation/hpsPFTauDiscriminationByTightChargedIsolation_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDTightCombinedIsolationDBSumPtCorr3HitsEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits/TightCombinedIsolationDBSumPtCorr3HitsEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits/hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDTightCombinedIsolationDBSumPtCorrEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr/TightCombinedIsolationDBSumPtCorrEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr/hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDTightElectronRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightElectronRejection/TightElectronRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightElectronRejection/hpsPFTauDiscriminationByTightElectronRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDTightIsolationMVA3newDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3newDMwLT/TightIsolationMVA3newDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3newDMwLT/hpsPFTauDiscriminationByTightIsolationMVA3newDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDTightIsolationMVA3newDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3newDMwoLT/TightIsolationMVA3newDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3newDMwoLT/hpsPFTauDiscriminationByTightIsolationMVA3newDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDTightIsolationMVA3oldDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3oldDMwLT/TightIsolationMVA3oldDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3oldDMwLT/hpsPFTauDiscriminationByTightIsolationMVA3oldDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDTightIsolationMVA3oldDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3oldDMwoLT/TightIsolationMVA3oldDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightIsolationMVA3oldDMwoLT/hpsPFTauDiscriminationByTightIsolationMVA3oldDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDTightMuonRejection2Efficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightMuonRejection2/TightMuonRejection2Eff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightMuonRejection2/hpsPFTauDiscriminationByTightMuonRejection2_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDTightMuonRejection3Efficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightMuonRejection3/TightMuonRejection3Eff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightMuonRejection3/hpsPFTauDiscriminationByTightMuonRejection3_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDTightMuonRejectionEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightMuonRejection/TightMuonRejectionEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByTightMuonRejection/hpsPFTauDiscriminationByTightMuonRejection_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDVLooseChargedIsolationEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseChargedIsolation/VLooseChargedIsolationEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseChargedIsolation/hpsPFTauDiscriminationByVLooseChargedIsolation_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(False)
    ),
    HPSIDVLooseCombinedIsolationDBSumPtCorrEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr/VLooseCombinedIsolationDBSumPtCorrEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr/hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVLooseIsolationMVA3newDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwLT/VLooseIsolationMVA3newDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwLT/hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVLooseIsolationMVA3newDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwoLT/VLooseIsolationMVA3newDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwoLT/hpsPFTauDiscriminationByVLooseIsolationMVA3newDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVLooseIsolationMVA3oldDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwLT/VLooseIsolationMVA3oldDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwLT/hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVLooseIsolationMVA3oldDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwoLT/VLooseIsolationMVA3oldDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwoLT/hpsPFTauDiscriminationByVLooseIsolationMVA3oldDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVTightIsolationMVA3newDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3newDMwLT/VTightIsolationMVA3newDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3newDMwLT/hpsPFTauDiscriminationByVTightIsolationMVA3newDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVTightIsolationMVA3newDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3newDMwoLT/VTightIsolationMVA3newDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3newDMwoLT/hpsPFTauDiscriminationByVTightIsolationMVA3newDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVTightIsolationMVA3oldDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwLT/VTightIsolationMVA3oldDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwLT/hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVTightIsolationMVA3oldDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwoLT/VTightIsolationMVA3oldDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwoLT/hpsPFTauDiscriminationByVTightIsolationMVA3oldDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVVTightIsolationMVA3newDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwLT/VVTightIsolationMVA3newDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwLT/hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVVTightIsolationMVA3newDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwoLT/VVTightIsolationMVA3newDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwoLT/hpsPFTauDiscriminationByVVTightIsolationMVA3newDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVVTightIsolationMVA3oldDMwLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwLT/VVTightIsolationMVA3oldDMwLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwLT/hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    ),
    HPSIDVVTightIsolationMVA3oldDMwoLTEfficiencies = cms.PSet(
        denominator = cms.string('RecoTauV/hpsPFTauProducer_ReferenceCollection/nRef_Taus_vs_#PAR#TauVisible'),
        efficiency = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwoLT/VVTightIsolationMVA3oldDMwoLTEff#PAR#'),
        numerator = cms.string('RecoTauV/hpsPFTauProducer_hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwoLT/hpsPFTauDiscriminationByVVTightIsolationMVA3oldDMwoLT_vs_#PAR#TauVisible'),
        parameter = cms.vstring('pt', 
            'eta', 
            'phi', 
            'pileup'),
        stepByStep = cms.bool(True)
    )
)

process.ptSeedParameterization = cms.PSet(
    CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
        0.0),
    CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
        0.253916),
    CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
        0.72802),
    CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
        3.478874),
    CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
        2.0142),
    CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
        0.514139),
    CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
        -4.267065),
    CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
        -4.241835),
    CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
        43.430395),
    DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
        0.222219),
    DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
        0.155638),
    DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
        -0.133269),
    DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
        0.261012),
    DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
        0.010984),
    DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
        -0.304346),
    OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
        0.0),
    OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
        0.0),
    OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
        0.0),
    OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
        0.0),
    OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
        0.0),
    SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
        0.0),
    SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
        0.0),
    SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
        0.0),
    SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
        0.0),
    SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
        0.0),
    SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
        0.0),
    SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
        0.0),
    SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
        0.0),
    SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
        0.0),
    SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
        0.0),
    SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
        0.0),
    SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
        0.0),
    SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
        0.0),
    SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
        0.0),
    SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
        0.0),
    SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
        0.0),
    SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0)
)

process.pvSelector = cms.PSet(
    NPV = cms.int32(1),
    maxRho = cms.double(2.0),
    maxZ = cms.double(15.0),
    minNdof = cms.double(4.0),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)

process.requireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingNewDMs"),
        cut = cms.double(0.5)
    )
)

process.requireLeadPion = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadPion = cms.PSet(
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
        cut = cms.double(0.5)
    )
)

process.requireLeadTrack = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding"),
        cut = cms.double(0.5)
    )
)

process.requireLeadTrackCalo = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding"),
        cut = cms.double(0.5)
    )
)

process.simple = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.9, -0.9, -0.94, -0.9),
        Pt010_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
        Pt010_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
        Pt1020_Loose = cms.vdouble(-0.9, -0.9, -0.94, -0.9),
        Pt1020_Medium = cms.vdouble(-0.73, -0.89, -0.89, -0.83),
        Pt1020_Tight = cms.vdouble(-0.5, -0.2, -0.83, -0.7),
        Pt2030_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
        Pt2030_Medium = cms.vdouble(0.1, -0.4, -0.5, -0.45),
        Pt2030_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0),
        Pt3050_Loose = cms.vdouble(-0.4, -0.85, -0.7, -0.6),
        Pt3050_Medium = cms.vdouble(0.1, -0.4, -0.5, -0.45),
        Pt3050_Tight = cms.vdouble(-0.2, 0.0, 0.0, 0.0)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('simple'),
    tmvaMethod = cms.string('PuJetIdMinMVA'),
    tmvaSpectators = cms.vstring('nvtx', 
        'jetPt', 
        'jetEta'),
    tmvaVariables = cms.vstring('frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05', 
        'beta', 
        'betaStar'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/TMVAClassification_PuJetIdMinMVA.weights.xml.gz'),
    version = cms.int32(-1)
)

process.simple_5x = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.97, -0.96, -0.97),
        Pt010_Medium = cms.vdouble(-0.85, -0.96, -0.95, -0.96),
        Pt010_Tight = cms.vdouble(-0.54, -0.93, -0.93, -0.94),
        Pt1020_Loose = cms.vdouble(-0.95, -0.97, -0.96, -0.97),
        Pt1020_Medium = cms.vdouble(-0.85, -0.96, -0.95, -0.96),
        Pt1020_Tight = cms.vdouble(-0.54, -0.93, -0.93, -0.94),
        Pt2030_Loose = cms.vdouble(-0.8, -0.86, -0.8, -0.84),
        Pt2030_Medium = cms.vdouble(-0.4, -0.73, -0.74, -0.8),
        Pt2030_Tight = cms.vdouble(0.26, -0.54, -0.63, -0.74),
        Pt3050_Loose = cms.vdouble(-0.8, -0.86, -0.8, -0.84),
        Pt3050_Medium = cms.vdouble(-0.4, -0.73, -0.74, -0.8),
        Pt3050_Tight = cms.vdouble(0.26, -0.54, -0.63, -0.74)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('simple'),
    tmvaMethod = cms.string('BDT_simpleNoVtxCat'),
    tmvaSpectators = cms.vstring('jetPt', 
        'jetEta'),
    tmvaVariables = cms.vstring('frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05', 
        'nvtx', 
        'beta', 
        'betaStar'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/TMVAClassification_5x_BDT_simpleNoVtxCat.weights.xml.gz'),
    version = cms.int32(-1)
)

process.simple_5x_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.98, -0.96, -0.94, -0.94),
        Pt010_Medium = cms.vdouble(-0.95, -0.94, -0.92, -0.91),
        Pt010_Tight = cms.vdouble(-0.6, -0.74, -0.78, -0.81),
        Pt1020_Loose = cms.vdouble(-0.98, -0.96, -0.94, -0.94),
        Pt1020_Medium = cms.vdouble(-0.95, -0.94, -0.92, -0.91),
        Pt1020_Tight = cms.vdouble(-0.6, -0.74, -0.78, -0.81),
        Pt2030_Loose = cms.vdouble(-0.89, -0.75, -0.72, -0.75),
        Pt2030_Medium = cms.vdouble(-0.59, -0.65, -0.56, -0.68),
        Pt2030_Tight = cms.vdouble(-0.47, -0.06, -0.23, -0.47),
        Pt3050_Loose = cms.vdouble(-0.89, -0.75, -0.72, -0.75),
        Pt3050_Medium = cms.vdouble(-0.59, -0.65, -0.56, -0.68),
        Pt3050_Tight = cms.vdouble(-0.47, -0.06, -0.23, -0.47)
    ),
    cutBased = cms.bool(False),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('simple'),
    tmvaMethod = cms.string('BDT_chsSimpleNoVtxCat'),
    tmvaSpectators = cms.vstring('jetPt', 
        'jetEta'),
    tmvaVariables = cms.vstring('frac01', 
        'frac02', 
        'frac03', 
        'frac04', 
        'frac05', 
        'nvtx', 
        'beta', 
        'betaStar'),
    tmvaWeights = cms.string('RecoJets/JetProducers/data/TMVAClassification_5x_BDT_chsSimpleNoVtxCat.weights.xml.gz'),
    version = cms.int32(-1)
)

process.simple_5x_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.98, -0.96, -0.94, -0.94),
    Pt010_Medium = cms.vdouble(-0.95, -0.94, -0.92, -0.91),
    Pt010_Tight = cms.vdouble(-0.6, -0.74, -0.78, -0.81),
    Pt1020_Loose = cms.vdouble(-0.98, -0.96, -0.94, -0.94),
    Pt1020_Medium = cms.vdouble(-0.95, -0.94, -0.92, -0.91),
    Pt1020_Tight = cms.vdouble(-0.6, -0.74, -0.78, -0.81),
    Pt2030_Loose = cms.vdouble(-0.89, -0.75, -0.72, -0.75),
    Pt2030_Medium = cms.vdouble(-0.59, -0.65, -0.56, -0.68),
    Pt2030_Tight = cms.vdouble(-0.47, -0.06, -0.23, -0.47),
    Pt3050_Loose = cms.vdouble(-0.89, -0.75, -0.72, -0.75),
    Pt3050_Medium = cms.vdouble(-0.59, -0.65, -0.56, -0.68),
    Pt3050_Tight = cms.vdouble(-0.47, -0.06, -0.23, -0.47)
)

process.simple_5x_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.97, -0.96, -0.97),
    Pt010_Medium = cms.vdouble(-0.85, -0.96, -0.95, -0.96),
    Pt010_Tight = cms.vdouble(-0.54, -0.93, -0.93, -0.94),
    Pt1020_Loose = cms.vdouble(-0.95, -0.97, -0.96, -0.97),
    Pt1020_Medium = cms.vdouble(-0.85, -0.96, -0.95, -0.96),
    Pt1020_Tight = cms.vdouble(-0.54, -0.93, -0.93, -0.94),
    Pt2030_Loose = cms.vdouble(-0.8, -0.86, -0.8, -0.84),
    Pt2030_Medium = cms.vdouble(-0.4, -0.73, -0.74, -0.8),
    Pt2030_Tight = cms.vdouble(0.26, -0.54, -0.63, -0.74),
    Pt3050_Loose = cms.vdouble(-0.8, -0.86, -0.8, -0.84),
    Pt3050_Medium = cms.vdouble(-0.4, -0.73, -0.74, -0.8),
    Pt3050_Tight = cms.vdouble(0.26, -0.54, -0.63, -0.74)
)

process.standardCompareTestAndReference = cms.PSet(
    processes = cms.PSet(
        reference = cms.PSet(
            dqmDirectory = cms.string('reference'),
            legendEntry = cms.string('no ref label'),
            type = cms.string('smMC')
        ),
        test = cms.PSet(
            dqmDirectory = cms.string('test'),
            legendEntry = cms.string('no test label'),
            type = cms.string('smMC')
        )
    )
)

process.standardDrawingStuff = cms.PSet(
    canvasSizeX = cms.int32(640),
    canvasSizeY = cms.int32(640),
    drawOptionEntries = cms.PSet(
        eff_overlay01 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(1),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(1),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay010 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(4),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(4),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(29)
        ),
        eff_overlay011 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(6),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(6),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(29)
        ),
        eff_overlay02 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(2),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(2),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay03 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(3),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(3),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay04 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(4),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(4),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay05 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(6),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(6),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay06 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(5),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(5),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay07 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(7),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(7),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay08 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(28),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(28),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(20)
        ),
        eff_overlay09 = cms.PSet(
            drawOption = cms.string('ex0'),
            drawOptionLegend = cms.string('p'),
            lineColor = cms.int32(2),
            lineStyle = cms.int32(1),
            lineWidth = cms.int32(2),
            markerColor = cms.int32(2),
            markerSize = cms.double(1.0),
            markerStyle = cms.int32(29)
        )
    ),
    drawOptionSets = cms.PSet(
        efficiency = cms.PSet(
            reference = cms.PSet(
                drawOption = cms.string('eBand'),
                drawOptionLegend = cms.string('l'),
                fillColor = cms.int32(41),
                lineColor = cms.int32(1),
                lineStyle = cms.int32(1),
                lineWidth = cms.int32(1)
            ),
            test = cms.PSet(
                drawOption = cms.string('ep'),
                drawOptionLegend = cms.string('p'),
                lineColor = cms.int32(1),
                lineStyle = cms.int32(1),
                lineWidth = cms.int32(1),
                markerColor = cms.int32(4),
                markerSize = cms.double(1.0),
                markerStyle = cms.int32(20)
            )
        )
    ),
    indOutputFileName = cms.string('#PLOT#.png'),
    labels = cms.PSet(
        eta = cms.PSet(
            borderSize = cms.int32(0),
            fillColor = cms.int32(0),
            option = cms.string('brNDC'),
            posX = cms.double(0.19),
            posY = cms.double(0.83),
            sizeX = cms.double(0.12),
            sizeY = cms.double(0.04),
            text = cms.vstring('-2.5 < #eta < +2.5'),
            textAlign = cms.int32(22),
            textColor = cms.int32(1),
            textSize = cms.double(0.04)
        ),
        pt = cms.PSet(
            borderSize = cms.int32(0),
            fillColor = cms.int32(0),
            option = cms.string('brNDC'),
            posX = cms.double(0.19),
            posY = cms.double(0.77),
            sizeX = cms.double(0.12),
            sizeY = cms.double(0.04),
            text = cms.vstring('P_{T} > 5 GeV'),
            textAlign = cms.int32(22),
            textColor = cms.int32(1),
            textSize = cms.double(0.04)
        )
    ),
    legends = cms.PSet(
        efficiency = cms.PSet(
            borderSize = cms.int32(0),
            fillColor = cms.int32(0),
            header = cms.string(''),
            option = cms.string('brNDC'),
            posX = cms.double(0.5),
            posY = cms.double(0.72),
            sizeX = cms.double(0.39),
            sizeY = cms.double(0.17)
        ),
        efficiency_overlay = cms.PSet(
            borderSize = cms.int32(0),
            fillColor = cms.int32(0),
            header = cms.string(''),
            option = cms.string('brNDC'),
            posX = cms.double(0.5),
            posY = cms.double(0.66),
            sizeX = cms.double(0.39),
            sizeY = cms.double(0.23)
        )
    ),
    xAxes = cms.PSet(
        eta = cms.PSet(
            xAxisTitle = cms.string('#eta'),
            xAxisTitleOffset = cms.double(0.9),
            xAxisTitleSize = cms.double(0.05)
        ),
        phi = cms.PSet(
            xAxisTitle = cms.string('#phi'),
            xAxisTitleOffset = cms.double(0.9),
            xAxisTitleSize = cms.double(0.05)
        ),
        pileup = cms.PSet(
            xAxisTitle = cms.string('# of Reco Vertices'),
            xAxisTitleOffset = cms.double(0.9),
            xAxisTitleSize = cms.double(0.05)
        ),
        pt = cms.PSet(
            xAxisTitle = cms.string('P_{T} / GeV'),
            xAxisTitleOffset = cms.double(0.9),
            xAxisTitleSize = cms.double(0.05)
        )
    ),
    yAxes = cms.PSet(
        efficiency = cms.PSet(
            maxY_linear = cms.double(1.6),
            maxY_log = cms.double(1.8),
            minY_linear = cms.double(0.0),
            minY_log = cms.double(0.001),
            yAxisTitle = cms.string('#varepsilon'),
            yAxisTitleOffset = cms.double(1.1),
            yAxisTitleSize = cms.double(0.05),
            yScale = cms.string('linear')
        ),
        fakeRate = cms.PSet(
            maxY_linear = cms.double(1.6),
            maxY_log = cms.double(1.8),
            minY_linear = cms.double(0.0),
            minY_log = cms.double(0.001),
            yAxisTitle = cms.string('Fake rate'),
            yAxisTitleOffset = cms.double(1.1),
            yAxisTitleSize = cms.double(0.05),
            yScale = cms.string('log')
        )
    )
)

process.stripDigitizer = cms.PSet(
    APVSaturationFromHIP = cms.bool(True),
    APVSaturationProb = cms.double(0.001),
    APVpeakmode = cms.bool(False),
    AppliedVoltage = cms.double(300.0),
    BaselineShift = cms.bool(True),
    ChargeDistributionRMS = cms.double(6.5e-10),
    ChargeMobility = cms.double(310.0),
    CommonModeNoise = cms.bool(True),
    CosmicDelayShift = cms.untracked.double(0.0),
    CouplingConstantDecIB1 = cms.vdouble(0.7748, 0.0962, 0.0165),
    CouplingConstantDecIB2 = cms.vdouble(0.83, 0.0756, 0.0094),
    CouplingConstantDecOB1 = cms.vdouble(0.6871, 0.1222, 0.0342),
    CouplingConstantDecOB2 = cms.vdouble(0.725, 0.1102, 0.0273),
    CouplingConstantDecW1a = cms.vdouble(0.786, 0.093, 0.014),
    CouplingConstantDecW1b = cms.vdouble(0.822, 0.08, 0.009),
    CouplingConstantDecW2a = cms.vdouble(0.7962, 0.0914, 0.0104),
    CouplingConstantDecW2b = cms.vdouble(0.888, 0.05, 0.006),
    CouplingConstantDecW3a = cms.vdouble(0.8164, 0.09, 0.0018),
    CouplingConstantDecW3b = cms.vdouble(0.848, 0.06, 0.016),
    CouplingConstantDecW4 = cms.vdouble(0.876, 0.06, 0.002),
    CouplingConstantDecW5 = cms.vdouble(0.7565, 0.0913, 0.0304),
    CouplingConstantDecW6 = cms.vdouble(0.758, 0.093, 0.026),
    CouplingConstantDecW7 = cms.vdouble(0.7828, 0.0862, 0.0224),
    CouplingConstantPeakIB1 = cms.vdouble(0.9006, 0.0497),
    CouplingConstantPeakIB2 = cms.vdouble(0.9342, 0.0328),
    CouplingConstantPeakOB1 = cms.vdouble(0.8542, 0.0729),
    CouplingConstantPeakOB2 = cms.vdouble(0.8719, 0.064),
    CouplingConstantPeakW1a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW1b = cms.vdouble(0.976, 0.012),
    CouplingConstantPeakW2a = cms.vdouble(1.0, 0.0),
    CouplingConstantPeakW2b = cms.vdouble(0.998, 0.001),
    CouplingConstantPeakW3a = cms.vdouble(0.996, 0.002),
    CouplingConstantPeakW3b = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW4 = cms.vdouble(0.992, 0.004),
    CouplingConstantPeakW5 = cms.vdouble(0.968, 0.016),
    CouplingConstantPeakW6 = cms.vdouble(0.972, 0.014),
    CouplingConstantPeakW7 = cms.vdouble(0.964, 0.018),
    DeltaProductionCut = cms.double(0.120425),
    DepletionVoltage = cms.double(170.0),
    DigiModeList = cms.PSet(
        PRDigi = cms.string('ProcessedRaw'),
        SCDigi = cms.string('ScopeMode'),
        VRDigi = cms.string('VirginRaw'),
        ZSDigi = cms.string('ZeroSuppressed')
    ),
    FedAlgorithm = cms.int32(4),
    FedAlgorithm_PM = cms.int32(4),
    Gain = cms.string(''),
    GeometryType = cms.string('idealForDigi'),
    GevPerElectron = cms.double(3.61e-09),
    Inefficiency = cms.double(0.0),
    LandauFluctuations = cms.bool(True),
    LorentzAngle = cms.string(''),
    Noise = cms.bool(True),
    NoiseSigmaThreshold = cms.double(2.0),
    PedestalsOffset = cms.double(128),
    PreMixingMode = cms.bool(False),
    ROUList = cms.vstring('TrackerHitsTIBLowTof', 
        'TrackerHitsTIBHighTof', 
        'TrackerHitsTIDLowTof', 
        'TrackerHitsTIDHighTof', 
        'TrackerHitsTOBLowTof', 
        'TrackerHitsTOBHighTof', 
        'TrackerHitsTECLowTof', 
        'TrackerHitsTECHighTof'),
    RealPedestals = cms.bool(True),
    SingleStripNoise = cms.bool(True),
    TOFCutForDeconvolution = cms.double(50.0),
    TOFCutForPeak = cms.double(100.0),
    Temperature = cms.double(273.0),
    TrackerConfigurationFromDB = cms.bool(False),
    ZeroSuppression = cms.bool(True),
    accumulatorType = cms.string('SiStripDigitizer'),
    chargeDivisionsPerStrip = cms.int32(10),
    cmnRMStec = cms.double(2.44),
    cmnRMStib = cms.double(5.92),
    cmnRMStid = cms.double(3.08),
    cmnRMStob = cms.double(1.08),
    electronPerAdcDec = cms.double(247.0),
    electronPerAdcPeak = cms.double(262.0),
    hitsProducer = cms.string('g4SimHits'),
    makeDigiSimLinks = cms.untracked.bool(True),
    noDiffusion = cms.bool(False)
)

process.tautagInfoModifer = cms.PSet(
    name = cms.string('TTIworkaround'),
    pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
    plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
)

process.theDigitizers = cms.PSet(
    castor = cms.PSet(
        accumulatorType = cms.string('CastorDigiProducer'),
        castor = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(4.009),
            readoutFrameSize = cms.int32(6),
            samplingFactor = cms.double(0.060135),
            simHitToPhotoelectrons = cms.double(1000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(-4.0)
        ),
        doNoise = cms.bool(True),
        doTimeSlew = cms.bool(True),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(False)
    ),
    ecal = cms.PSet(
        ConstantTerm = cms.double(0.003),
        EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
            0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
        EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
            0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
        EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
            0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
        EBdigiCollection = cms.string(''),
        EBs25notContainment = cms.double(0.97),
        EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
            0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
        EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
            0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
        EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
            0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
        EEdigiCollection = cms.string(''),
        EEs25notContainment = cms.double(0.975),
        ESdigiCollection = cms.string(''),
        EcalPreMixStage1 = cms.bool(False),
        EcalPreMixStage2 = cms.bool(False),
        UseLCcorrection = cms.untracked.bool(True),
        accumulatorType = cms.string('EcalDigiProducer'),
        apdAddToBarrel = cms.bool(False),
        apdDigiTag = cms.string('APD'),
        apdDoPEStats = cms.bool(True),
        apdNonlParms = cms.vdouble(1.48, -3.75, 1.81, 1.26, 2.0, 
            45, 1.0),
        apdSeparateDigi = cms.bool(True),
        apdShapeTau = cms.double(40.5),
        apdShapeTstart = cms.double(74.5),
        apdSimToPEHigh = cms.double(88200000.0),
        apdSimToPELow = cms.double(2450000.0),
        apdTimeOffWidth = cms.double(0.8),
        apdTimeOffset = cms.double(-13.5),
        applyConstantTerm = cms.bool(True),
        binOfMaximum = cms.int32(6),
        cosmicsPhase = cms.bool(False),
        cosmicsShift = cms.double(0.0),
        doENoise = cms.bool(True),
        doESNoise = cms.bool(True),
        doFast = cms.bool(True),
        doPhotostatistics = cms.bool(True),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(False),
        photoelectronsToAnalogBarrel = cms.double(0.000444444),
        photoelectronsToAnalogEndcap = cms.double(0.000555555),
        readoutFrameSize = cms.int32(10),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectronsBarrel = cms.double(2250.0),
        simHitToPhotoelectronsEndcap = cms.double(1800.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(0.0)
    ),
    hcal = cms.PSet(
        ChangeResponse = cms.bool(False),
        CorrFactorFile = cms.FileInPath('SimCalorimetry/HcalSimProducers/data/calor_corr01.txt'),
        DelivLuminosity = cms.double(0),
        HBHEUpgradeQIE = cms.bool(True),
        HBTuningParameter = cms.double(0.875),
        HEDarkening = cms.bool(False),
        HETuningParameter = cms.double(0.9),
        HFDarkening = cms.bool(False),
        HFTuningParameter = cms.double(1.025),
        HFUpgradeQIE = cms.bool(False),
        HOTuningParameter = cms.double(1),
        HcalPreMixStage1 = cms.bool(False),
        HcalPreMixStage2 = cms.bool(False),
        HcalReLabel = cms.PSet(
            RelabelHits = cms.untracked.bool(False),
            RelabelRules = cms.untracked.PSet(
                CorrectPhi = cms.untracked.bool(False),
                Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3, 3, 3),
                Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                    2, 2, 2, 2, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3, 3, 3),
                Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                    3, 3, 4, 4, 4, 
                    4, 4, 5, 5, 5, 
                    5, 5, 5, 5)
            )
        ),
        accumulatorType = cms.string('HcalDigiProducer'),
        doEmpty = cms.bool(True),
        doHFWindow = cms.bool(False),
        doHPDNoise = cms.bool(False),
        doIonFeedback = cms.bool(True),
        doNoise = cms.bool(True),
        doThermalNoise = cms.bool(True),
        doTimeSlew = cms.bool(True),
        hb = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(125.44, 125.54, 125.32, 125.13, 124.46, 
                125.01, 125.22, 125.48, 124.45, 125.9, 
                125.83, 127.01, 126.82, 129.73, 131.83, 
                143.52),
            siPMCells = cms.vint32(),
            simHitToPhotoelectrons = cms.double(2000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        he = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(16),
            photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(210.55, 197.93, 186.12, 189.64, 189.63, 
                190.28, 189.61, 189.6, 190.12, 191.22, 
                190.9, 193.06, 188.42, 188.42),
            simHitToPhotoelectrons = cms.double(2000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        hf1 = cms.PSet(
            binOfMaximum = cms.int32(3),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(2.79),
            readoutFrameSize = cms.int32(5),
            samplingFactor = cms.double(0.383),
            simHitToPhotoelectrons = cms.double(6.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(14.0)
        ),
        hf2 = cms.PSet(
            binOfMaximum = cms.int32(3),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(5),
            samplingFactor = cms.double(0.368),
            simHitToPhotoelectrons = cms.double(6.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(13.0)
        ),
        hitsProducer = cms.string('g4SimHits'),
        ho = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(0.24, 0.24, 0.24, 0.24, 0.17, 
                0.17, 0.17, 0.17, 0.17, 0.17, 
                0.17, 0.17, 0.17, 0.17, 0.17),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoHamamatsu = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0),
            pixels = cms.int32(960),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoZecotek = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0),
            pixels = cms.int32(36000),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        injectTestHits = cms.bool(False),
        makeDigiSimLinks = cms.untracked.bool(False),
        useOldHB = cms.bool(True),
        useOldHE = cms.bool(True),
        useOldHF = cms.bool(True),
        useOldHO = cms.bool(True),
        zdc = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(10),
            samplingFactor = cms.double(1.0),
            simHitToPhotoelectrons = cms.double(6.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(-4.0)
        )
    ),
    pixel = cms.PSet(
        AdcFullScale = cms.int32(255),
        AdcFullScaleStack = cms.int32(255),
        AddNoise = cms.bool(True),
        AddNoisyPixels = cms.bool(True),
        AddPixelInefficiencyFromPython = cms.bool(True),
        AddThresholdSmearing = cms.bool(True),
        Alpha2Order = cms.bool(True),
        BPix_SignalResponse_p0 = cms.double(0.0035),
        BPix_SignalResponse_p1 = cms.double(1.23),
        BPix_SignalResponse_p2 = cms.double(97.4),
        BPix_SignalResponse_p3 = cms.double(126.5),
        ChargeVCALSmearing = cms.bool(True),
        DeadModules = cms.VPSet(cms.PSet(
            Dead_detID = cms.int32(302055940),
            Module = cms.string('tbmB')
        ), 
            cms.PSet(
                Dead_detID = cms.int32(302059800),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302121992),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302123296),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302125060),
                Module = cms.string('tbmA')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302125076),
                Module = cms.string('tbmA')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302126364),
                Module = cms.string('tbmB')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302126596),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302127136),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302188552),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302188824),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302194200),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302195232),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302197252),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302197784),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453892),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453896),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453900),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453904),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454916),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454920),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454924),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454928),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455940),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455944),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455948),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455952),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454148),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454152),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454156),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455172),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455176),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455180),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352456196),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352456200),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352456204),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999748),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999752),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999756),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999760),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344014340),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344014344),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344014348),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344019460),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344019464),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344019468),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077572),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077576),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077580),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077584),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078596),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078600),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078604),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078608),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079620),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079624),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079628),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079632),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078852),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078856),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078860),
                Module = cms.string('whole')
            )),
        DeadModules_DB = cms.bool(True),
        DoPixelAging = cms.bool(False),
        ElectronPerAdc = cms.double(135.0),
        ElectronsPerVcal = cms.double(65.5),
        ElectronsPerVcal_Offset = cms.double(-414.0),
        FPix_SignalResponse_p0 = cms.double(0.0043),
        FPix_SignalResponse_p1 = cms.double(1.31),
        FPix_SignalResponse_p2 = cms.double(93.6),
        FPix_SignalResponse_p3 = cms.double(134.6),
        FirstStackLayer = cms.int32(5),
        GainSmearing = cms.double(0.0),
        LorentzAngle_DB = cms.bool(True),
        MissCalibrate = cms.bool(True),
        NoiseInElectrons = cms.double(175.0),
        NumPixelBarrel = cms.int32(3),
        NumPixelEndcap = cms.int32(2),
        OffsetSmearing = cms.double(0.0),
        PixGeometryType = cms.string('idealForDigi'),
        ReadoutNoiseInElec = cms.double(350.0),
        RoutList = cms.vstring('TrackerHitsPixelBarrelLowTof', 
            'TrackerHitsPixelBarrelHighTof', 
            'TrackerHitsPixelEndcapLowTof', 
            'TrackerHitsPixelEndcapHighTof'),
        TanLorentzAnglePerTesla_BPix = cms.double(0.106),
        TanLorentzAnglePerTesla_FPix = cms.double(0.106),
        ThresholdInElectrons_BPix = cms.double(3500.0),
        ThresholdInElectrons_BPix_L1 = cms.double(3500.0),
        ThresholdInElectrons_FPix = cms.double(3000.0),
        ThresholdSmearing_BPix = cms.double(245.0),
        ThresholdSmearing_BPix_L1 = cms.double(245.0),
        ThresholdSmearing_FPix = cms.double(210.0),
        TofLowerCut = cms.double(-12.5),
        TofUpperCut = cms.double(12.5),
        accumulatorType = cms.string('SiPixelDigitizer'),
        bunchScaleAt25 = cms.double(1.0),
        deltaProductionCut = cms.double(0.03),
        hitsProducer = cms.string('g4SimHits'),
        killModules = cms.bool(True),
        makeDigiSimLinks = cms.untracked.bool(True),
        theInnerEfficiency_FPix1 = cms.double(1.0),
        theInnerEfficiency_FPix2 = cms.double(1.0),
        theInstLumiScaleFactor = cms.double(221.95),
        theLadderEfficiency_BPix1 = cms.vdouble(0.978351, 0.971877, 0.974283, 0.969328, 0.972922, 
            0.970964, 0.975762, 0.974786, 0.980244, 0.978452, 
            0.982129, 0.979737, 0.984381, 0.983971, 0.98186, 
            0.983283, 0.981485, 0.979753, 0.980287, 0.975195),
        theLadderEfficiency_BPix2 = cms.vdouble(0.996276, 0.993354, 0.993752, 0.992948, 0.993871, 
            0.992317, 0.997733, 0.992516, 0.992649, 0.993425, 
            0.994065, 0.993481, 0.993169, 0.994223, 0.992397, 
            0.99509, 0.995177, 0.995319, 0.994925, 0.992933, 
            0.994111, 0.9948, 0.994711, 0.994294, 0.995392, 
            0.994229, 0.994414, 0.995271, 0.993585, 0.995264, 
            0.992977, 0.993642),
        theLadderEfficiency_BPix3 = cms.vdouble(0.996206, 0.998039, 0.995801, 0.99665, 0.996414, 
            0.995755, 0.996518, 0.995584, 0.997171, 0.998056, 
            0.99595, 0.997473, 0.996858, 0.996486, 0.997442, 
            0.998002, 0.995429, 0.997939, 0.996896, 0.997434, 
            0.996616, 0.996439, 0.996546, 0.997597, 0.995435, 
            0.996396, 0.99621, 0.998316, 0.998431, 0.99598, 
            0.997063, 0.996245, 0.997502, 0.996254, 0.997545, 
            0.997553, 0.996722, 0.996107, 0.996588, 0.996277, 
            0.99785, 0.997087, 0.998139, 0.997139),
        theModuleEfficiency_BPix1 = cms.vdouble(1.00361, 0.999371, 0.961242, 0.953582),
        theModuleEfficiency_BPix2 = cms.vdouble(1.00069, 0.999792, 0.99562, 1.00341),
        theModuleEfficiency_BPix3 = cms.vdouble(1.00006, 0.999744, 0.998147, 1.00039),
        theOuterEfficiency_FPix1 = cms.double(1.0),
        theOuterEfficiency_FPix2 = cms.double(1.0),
        thePUEfficiency_BPix1 = cms.vdouble(1.0181, -2.28345e-07, -1.30042e-09),
        thePUEfficiency_BPix2 = cms.vdouble(1.00648, -1.28515e-06, -1.85915e-10),
        thePUEfficiency_BPix3 = cms.vdouble(1.0032, -1.96206e-08, -1.99009e-10),
        thePUEfficiency_FPix_Inner = cms.vdouble(1.0),
        thePUEfficiency_FPix_Outer = cms.vdouble(1.0),
        thePixelChipEfficiency_BPix1 = cms.double(1.0),
        thePixelChipEfficiency_BPix2 = cms.double(1.0),
        thePixelChipEfficiency_BPix3 = cms.double(1.0),
        thePixelChipEfficiency_FPix1 = cms.double(0.999),
        thePixelChipEfficiency_FPix2 = cms.double(0.999),
        thePixelColEfficiency_BPix1 = cms.double(1.0),
        thePixelColEfficiency_BPix2 = cms.double(1.0),
        thePixelColEfficiency_BPix3 = cms.double(1.0),
        thePixelColEfficiency_FPix1 = cms.double(0.999),
        thePixelColEfficiency_FPix2 = cms.double(0.999),
        thePixelEfficiency_BPix1 = cms.double(1.0),
        thePixelEfficiency_BPix2 = cms.double(1.0),
        thePixelEfficiency_BPix3 = cms.double(1.0),
        thePixelEfficiency_FPix1 = cms.double(0.999),
        thePixelEfficiency_FPix2 = cms.double(0.999),
        useDB = cms.bool(False)
    ),
    puVtx = cms.PSet(
        accumulatorType = cms.string('PileupVertexAccumulator'),
        hitsProducer = cms.string('generator'),
        makeDigiSimLinks = cms.untracked.bool(False)
    ),
    strip = cms.PSet(
        APVSaturationFromHIP = cms.bool(True),
        APVSaturationProb = cms.double(0.001),
        APVpeakmode = cms.bool(False),
        AppliedVoltage = cms.double(300.0),
        BaselineShift = cms.bool(True),
        ChargeDistributionRMS = cms.double(6.5e-10),
        ChargeMobility = cms.double(310.0),
        CommonModeNoise = cms.bool(True),
        CosmicDelayShift = cms.untracked.double(0.0),
        CouplingConstantDecIB1 = cms.vdouble(0.7748, 0.0962, 0.0165),
        CouplingConstantDecIB2 = cms.vdouble(0.83, 0.0756, 0.0094),
        CouplingConstantDecOB1 = cms.vdouble(0.6871, 0.1222, 0.0342),
        CouplingConstantDecOB2 = cms.vdouble(0.725, 0.1102, 0.0273),
        CouplingConstantDecW1a = cms.vdouble(0.786, 0.093, 0.014),
        CouplingConstantDecW1b = cms.vdouble(0.822, 0.08, 0.009),
        CouplingConstantDecW2a = cms.vdouble(0.7962, 0.0914, 0.0104),
        CouplingConstantDecW2b = cms.vdouble(0.888, 0.05, 0.006),
        CouplingConstantDecW3a = cms.vdouble(0.8164, 0.09, 0.0018),
        CouplingConstantDecW3b = cms.vdouble(0.848, 0.06, 0.016),
        CouplingConstantDecW4 = cms.vdouble(0.876, 0.06, 0.002),
        CouplingConstantDecW5 = cms.vdouble(0.7565, 0.0913, 0.0304),
        CouplingConstantDecW6 = cms.vdouble(0.758, 0.093, 0.026),
        CouplingConstantDecW7 = cms.vdouble(0.7828, 0.0862, 0.0224),
        CouplingConstantPeakIB1 = cms.vdouble(0.9006, 0.0497),
        CouplingConstantPeakIB2 = cms.vdouble(0.9342, 0.0328),
        CouplingConstantPeakOB1 = cms.vdouble(0.8542, 0.0729),
        CouplingConstantPeakOB2 = cms.vdouble(0.8719, 0.064),
        CouplingConstantPeakW1a = cms.vdouble(0.996, 0.002),
        CouplingConstantPeakW1b = cms.vdouble(0.976, 0.012),
        CouplingConstantPeakW2a = cms.vdouble(1.0, 0.0),
        CouplingConstantPeakW2b = cms.vdouble(0.998, 0.001),
        CouplingConstantPeakW3a = cms.vdouble(0.996, 0.002),
        CouplingConstantPeakW3b = cms.vdouble(0.992, 0.004),
        CouplingConstantPeakW4 = cms.vdouble(0.992, 0.004),
        CouplingConstantPeakW5 = cms.vdouble(0.968, 0.016),
        CouplingConstantPeakW6 = cms.vdouble(0.972, 0.014),
        CouplingConstantPeakW7 = cms.vdouble(0.964, 0.018),
        DeltaProductionCut = cms.double(0.120425),
        DepletionVoltage = cms.double(170.0),
        DigiModeList = cms.PSet(
            PRDigi = cms.string('ProcessedRaw'),
            SCDigi = cms.string('ScopeMode'),
            VRDigi = cms.string('VirginRaw'),
            ZSDigi = cms.string('ZeroSuppressed')
        ),
        FedAlgorithm = cms.int32(4),
        FedAlgorithm_PM = cms.int32(4),
        Gain = cms.string(''),
        GeometryType = cms.string('idealForDigi'),
        GevPerElectron = cms.double(3.61e-09),
        Inefficiency = cms.double(0.0),
        LandauFluctuations = cms.bool(True),
        LorentzAngle = cms.string(''),
        Noise = cms.bool(True),
        NoiseSigmaThreshold = cms.double(2.0),
        PedestalsOffset = cms.double(128),
        PreMixingMode = cms.bool(False),
        ROUList = cms.vstring('TrackerHitsTIBLowTof', 
            'TrackerHitsTIBHighTof', 
            'TrackerHitsTIDLowTof', 
            'TrackerHitsTIDHighTof', 
            'TrackerHitsTOBLowTof', 
            'TrackerHitsTOBHighTof', 
            'TrackerHitsTECLowTof', 
            'TrackerHitsTECHighTof'),
        RealPedestals = cms.bool(True),
        SingleStripNoise = cms.bool(True),
        TOFCutForDeconvolution = cms.double(50.0),
        TOFCutForPeak = cms.double(100.0),
        Temperature = cms.double(273.0),
        TrackerConfigurationFromDB = cms.bool(False),
        ZeroSuppression = cms.bool(True),
        accumulatorType = cms.string('SiStripDigitizer'),
        chargeDivisionsPerStrip = cms.int32(10),
        cmnRMStec = cms.double(2.44),
        cmnRMStib = cms.double(5.92),
        cmnRMStid = cms.double(3.08),
        cmnRMStob = cms.double(1.08),
        electronPerAdcDec = cms.double(247.0),
        electronPerAdcPeak = cms.double(262.0),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(True),
        noDiffusion = cms.bool(False)
    )
)

process.theDigitizersValid = cms.PSet(
    castor = cms.PSet(
        accumulatorType = cms.string('CastorDigiProducer'),
        castor = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(4.009),
            readoutFrameSize = cms.int32(6),
            samplingFactor = cms.double(0.060135),
            simHitToPhotoelectrons = cms.double(1000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(-4.0)
        ),
        doNoise = cms.bool(True),
        doTimeSlew = cms.bool(True),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(False)
    ),
    ecal = cms.PSet(
        ConstantTerm = cms.double(0.003),
        EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
            0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
        EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
            0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
        EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
            0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
        EBdigiCollection = cms.string(''),
        EBs25notContainment = cms.double(0.97),
        EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
            0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
        EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
            0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
        EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
            0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
        EEdigiCollection = cms.string(''),
        EEs25notContainment = cms.double(0.975),
        ESdigiCollection = cms.string(''),
        EcalPreMixStage1 = cms.bool(False),
        EcalPreMixStage2 = cms.bool(False),
        UseLCcorrection = cms.untracked.bool(True),
        accumulatorType = cms.string('EcalDigiProducer'),
        apdAddToBarrel = cms.bool(False),
        apdDigiTag = cms.string('APD'),
        apdDoPEStats = cms.bool(True),
        apdNonlParms = cms.vdouble(1.48, -3.75, 1.81, 1.26, 2.0, 
            45, 1.0),
        apdSeparateDigi = cms.bool(True),
        apdShapeTau = cms.double(40.5),
        apdShapeTstart = cms.double(74.5),
        apdSimToPEHigh = cms.double(88200000.0),
        apdSimToPELow = cms.double(2450000.0),
        apdTimeOffWidth = cms.double(0.8),
        apdTimeOffset = cms.double(-13.5),
        applyConstantTerm = cms.bool(True),
        binOfMaximum = cms.int32(6),
        cosmicsPhase = cms.bool(False),
        cosmicsShift = cms.double(0.0),
        doENoise = cms.bool(True),
        doESNoise = cms.bool(True),
        doFast = cms.bool(True),
        doPhotostatistics = cms.bool(True),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(False),
        photoelectronsToAnalogBarrel = cms.double(0.000444444),
        photoelectronsToAnalogEndcap = cms.double(0.000555555),
        readoutFrameSize = cms.int32(10),
        samplingFactor = cms.double(1.0),
        simHitToPhotoelectronsBarrel = cms.double(2250.0),
        simHitToPhotoelectronsEndcap = cms.double(1800.0),
        syncPhase = cms.bool(True),
        timePhase = cms.double(0.0)
    ),
    hcal = cms.PSet(
        ChangeResponse = cms.bool(False),
        CorrFactorFile = cms.FileInPath('SimCalorimetry/HcalSimProducers/data/calor_corr01.txt'),
        DelivLuminosity = cms.double(0),
        HBHEUpgradeQIE = cms.bool(True),
        HBTuningParameter = cms.double(0.875),
        HEDarkening = cms.bool(False),
        HETuningParameter = cms.double(0.9),
        HFDarkening = cms.bool(False),
        HFTuningParameter = cms.double(1.025),
        HFUpgradeQIE = cms.bool(False),
        HOTuningParameter = cms.double(1),
        HcalPreMixStage1 = cms.bool(False),
        HcalPreMixStage2 = cms.bool(False),
        HcalReLabel = cms.PSet(
            RelabelHits = cms.untracked.bool(False),
            RelabelRules = cms.untracked.PSet(
                CorrectPhi = cms.untracked.bool(False),
                Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3, 3, 3),
                Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                    2, 2, 2, 2, 3, 
                    3, 3, 3, 3, 3, 
                    3, 3, 3, 3),
                Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                    3, 3, 4, 4, 4, 
                    4, 4, 5, 5, 5, 
                    5, 5, 5, 5)
            )
        ),
        accumulatorType = cms.string('HcalDigiProducer'),
        doEmpty = cms.bool(True),
        doHFWindow = cms.bool(False),
        doHPDNoise = cms.bool(False),
        doIonFeedback = cms.bool(True),
        doNoise = cms.bool(True),
        doThermalNoise = cms.bool(True),
        doTimeSlew = cms.bool(True),
        hb = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(125.44, 125.54, 125.32, 125.13, 124.46, 
                125.01, 125.22, 125.48, 124.45, 125.9, 
                125.83, 127.01, 126.82, 129.73, 131.83, 
                143.52),
            siPMCells = cms.vint32(),
            simHitToPhotoelectrons = cms.double(2000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        he = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(16),
            photoelectronsToAnalog = cms.vdouble(0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305, 0.3305, 
                0.3305, 0.3305, 0.3305, 0.3305),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(210.55, 197.93, 186.12, 189.64, 189.63, 
                190.28, 189.61, 189.6, 190.12, 191.22, 
                190.9, 193.06, 188.42, 188.42),
            simHitToPhotoelectrons = cms.double(2000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(6.0),
            timeSmearing = cms.bool(True)
        ),
        hf1 = cms.PSet(
            binOfMaximum = cms.int32(3),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(2.79),
            readoutFrameSize = cms.int32(5),
            samplingFactor = cms.double(0.383),
            simHitToPhotoelectrons = cms.double(6.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(14.0)
        ),
        hf2 = cms.PSet(
            binOfMaximum = cms.int32(3),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(5),
            samplingFactor = cms.double(0.368),
            simHitToPhotoelectrons = cms.double(6.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(13.0)
        ),
        hitsProducer = cms.string('g4SimHits'),
        ho = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(0.24, 0.24, 0.24, 0.24, 0.17, 
                0.17, 0.17, 0.17, 0.17, 0.17, 
                0.17, 0.17, 0.17, 0.17, 0.17),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoHamamatsu = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0),
            pixels = cms.int32(960),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        hoZecotek = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            firstRing = cms.int32(1),
            photoelectronsToAnalog = cms.vdouble(3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0, 3.0, 3.0, 3.0, 3.0, 
                3.0),
            pixels = cms.int32(36000),
            readoutFrameSize = cms.int32(10),
            samplingFactors = cms.vdouble(231.0, 231.0, 231.0, 231.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0, 
                360.0, 360.0, 360.0, 360.0, 360.0),
            siPMCode = cms.int32(2),
            simHitToPhotoelectrons = cms.double(4000.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(5.0),
            timeSmearing = cms.bool(False)
        ),
        injectTestHits = cms.bool(False),
        makeDigiSimLinks = cms.untracked.bool(False),
        useOldHB = cms.bool(True),
        useOldHE = cms.bool(True),
        useOldHF = cms.bool(True),
        useOldHO = cms.bool(True),
        zdc = cms.PSet(
            binOfMaximum = cms.int32(5),
            doPhotoStatistics = cms.bool(True),
            photoelectronsToAnalog = cms.double(1.843),
            readoutFrameSize = cms.int32(10),
            samplingFactor = cms.double(1.0),
            simHitToPhotoelectrons = cms.double(6.0),
            syncPhase = cms.bool(True),
            timePhase = cms.double(-4.0)
        )
    ),
    mergedtruth = cms.PSet(
        HepMCProductLabel = cms.InputTag("generator"),
        accumulatorType = cms.string('TrackingTruthAccumulator'),
        allowDifferentSimHitProcesses = cms.bool(False),
        alwaysAddAncestors = cms.bool(True),
        createMergedBremsstrahlung = cms.bool(True),
        createUnmergedCollection = cms.bool(True),
        genParticleCollection = cms.InputTag("genParticles"),
        ignoreTracksOutsideVolume = cms.bool(False),
        maximumPreviousBunchCrossing = cms.uint32(9999),
        maximumSubsequentBunchCrossing = cms.uint32(9999),
        removeDeadModules = cms.bool(False),
        select = cms.PSet(
            chargedOnlyTP = cms.bool(True),
            lipTP = cms.double(1000),
            maxRapidityTP = cms.double(5.0),
            minHitTP = cms.int32(0),
            minRapidityTP = cms.double(-5.0),
            pdgIdTP = cms.vint32(),
            ptMinTP = cms.double(0.1),
            signalOnlyTP = cms.bool(False),
            stableOnlyTP = cms.bool(False),
            tipTP = cms.double(1000)
        ),
        simHitCollections = cms.PSet(
            muon = cms.VInputTag(cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonRPCHits")),
            pixel = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof")),
            tracker = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsTIBLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIDLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIDHighTof"), cms.InputTag("g4SimHits","TrackerHitsTOBLowTof"), 
                cms.InputTag("g4SimHits","TrackerHitsTOBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTECLowTof"), cms.InputTag("g4SimHits","TrackerHitsTECHighTof"))
        ),
        simTrackCollection = cms.InputTag("g4SimHits"),
        simVertexCollection = cms.InputTag("g4SimHits"),
        vertexDistanceCut = cms.double(0.003),
        volumeRadius = cms.double(120.0),
        volumeZ = cms.double(300.0)
    ),
    pixel = cms.PSet(
        AdcFullScale = cms.int32(255),
        AdcFullScaleStack = cms.int32(255),
        AddNoise = cms.bool(True),
        AddNoisyPixels = cms.bool(True),
        AddPixelInefficiencyFromPython = cms.bool(True),
        AddThresholdSmearing = cms.bool(True),
        Alpha2Order = cms.bool(True),
        BPix_SignalResponse_p0 = cms.double(0.0035),
        BPix_SignalResponse_p1 = cms.double(1.23),
        BPix_SignalResponse_p2 = cms.double(97.4),
        BPix_SignalResponse_p3 = cms.double(126.5),
        ChargeVCALSmearing = cms.bool(True),
        DeadModules = cms.VPSet(cms.PSet(
            Dead_detID = cms.int32(302055940),
            Module = cms.string('tbmB')
        ), 
            cms.PSet(
                Dead_detID = cms.int32(302059800),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302121992),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302123296),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302125060),
                Module = cms.string('tbmA')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302125076),
                Module = cms.string('tbmA')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302126364),
                Module = cms.string('tbmB')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302126596),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302127136),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302188552),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302188824),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302194200),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302195232),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302197252),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(302197784),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453892),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453896),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453900),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352453904),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454916),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454920),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454924),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454928),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455940),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455944),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455948),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455952),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454148),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454152),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352454156),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455172),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455176),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352455180),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352456196),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352456200),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(352456204),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999748),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999752),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999756),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(343999760),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344014340),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344014344),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344014348),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344019460),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344019464),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344019468),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077572),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077576),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077580),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344077584),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078596),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078600),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078604),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078608),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079620),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079624),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079628),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344079632),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078852),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078856),
                Module = cms.string('whole')
            ), 
            cms.PSet(
                Dead_detID = cms.int32(344078860),
                Module = cms.string('whole')
            )),
        DeadModules_DB = cms.bool(True),
        DoPixelAging = cms.bool(False),
        ElectronPerAdc = cms.double(135.0),
        ElectronsPerVcal = cms.double(65.5),
        ElectronsPerVcal_Offset = cms.double(-414.0),
        FPix_SignalResponse_p0 = cms.double(0.0043),
        FPix_SignalResponse_p1 = cms.double(1.31),
        FPix_SignalResponse_p2 = cms.double(93.6),
        FPix_SignalResponse_p3 = cms.double(134.6),
        FirstStackLayer = cms.int32(5),
        GainSmearing = cms.double(0.0),
        LorentzAngle_DB = cms.bool(True),
        MissCalibrate = cms.bool(True),
        NoiseInElectrons = cms.double(175.0),
        NumPixelBarrel = cms.int32(3),
        NumPixelEndcap = cms.int32(2),
        OffsetSmearing = cms.double(0.0),
        PixGeometryType = cms.string('idealForDigi'),
        ReadoutNoiseInElec = cms.double(350.0),
        RoutList = cms.vstring('TrackerHitsPixelBarrelLowTof', 
            'TrackerHitsPixelBarrelHighTof', 
            'TrackerHitsPixelEndcapLowTof', 
            'TrackerHitsPixelEndcapHighTof'),
        TanLorentzAnglePerTesla_BPix = cms.double(0.106),
        TanLorentzAnglePerTesla_FPix = cms.double(0.106),
        ThresholdInElectrons_BPix = cms.double(3500.0),
        ThresholdInElectrons_BPix_L1 = cms.double(3500.0),
        ThresholdInElectrons_FPix = cms.double(3000.0),
        ThresholdSmearing_BPix = cms.double(245.0),
        ThresholdSmearing_BPix_L1 = cms.double(245.0),
        ThresholdSmearing_FPix = cms.double(210.0),
        TofLowerCut = cms.double(-12.5),
        TofUpperCut = cms.double(12.5),
        accumulatorType = cms.string('SiPixelDigitizer'),
        bunchScaleAt25 = cms.double(1.0),
        deltaProductionCut = cms.double(0.03),
        hitsProducer = cms.string('g4SimHits'),
        killModules = cms.bool(True),
        makeDigiSimLinks = cms.untracked.bool(True),
        theInnerEfficiency_FPix1 = cms.double(1.0),
        theInnerEfficiency_FPix2 = cms.double(1.0),
        theInstLumiScaleFactor = cms.double(221.95),
        theLadderEfficiency_BPix1 = cms.vdouble(0.978351, 0.971877, 0.974283, 0.969328, 0.972922, 
            0.970964, 0.975762, 0.974786, 0.980244, 0.978452, 
            0.982129, 0.979737, 0.984381, 0.983971, 0.98186, 
            0.983283, 0.981485, 0.979753, 0.980287, 0.975195),
        theLadderEfficiency_BPix2 = cms.vdouble(0.996276, 0.993354, 0.993752, 0.992948, 0.993871, 
            0.992317, 0.997733, 0.992516, 0.992649, 0.993425, 
            0.994065, 0.993481, 0.993169, 0.994223, 0.992397, 
            0.99509, 0.995177, 0.995319, 0.994925, 0.992933, 
            0.994111, 0.9948, 0.994711, 0.994294, 0.995392, 
            0.994229, 0.994414, 0.995271, 0.993585, 0.995264, 
            0.992977, 0.993642),
        theLadderEfficiency_BPix3 = cms.vdouble(0.996206, 0.998039, 0.995801, 0.99665, 0.996414, 
            0.995755, 0.996518, 0.995584, 0.997171, 0.998056, 
            0.99595, 0.997473, 0.996858, 0.996486, 0.997442, 
            0.998002, 0.995429, 0.997939, 0.996896, 0.997434, 
            0.996616, 0.996439, 0.996546, 0.997597, 0.995435, 
            0.996396, 0.99621, 0.998316, 0.998431, 0.99598, 
            0.997063, 0.996245, 0.997502, 0.996254, 0.997545, 
            0.997553, 0.996722, 0.996107, 0.996588, 0.996277, 
            0.99785, 0.997087, 0.998139, 0.997139),
        theModuleEfficiency_BPix1 = cms.vdouble(1.00361, 0.999371, 0.961242, 0.953582),
        theModuleEfficiency_BPix2 = cms.vdouble(1.00069, 0.999792, 0.99562, 1.00341),
        theModuleEfficiency_BPix3 = cms.vdouble(1.00006, 0.999744, 0.998147, 1.00039),
        theOuterEfficiency_FPix1 = cms.double(1.0),
        theOuterEfficiency_FPix2 = cms.double(1.0),
        thePUEfficiency_BPix1 = cms.vdouble(1.0181, -2.28345e-07, -1.30042e-09),
        thePUEfficiency_BPix2 = cms.vdouble(1.00648, -1.28515e-06, -1.85915e-10),
        thePUEfficiency_BPix3 = cms.vdouble(1.0032, -1.96206e-08, -1.99009e-10),
        thePUEfficiency_FPix_Inner = cms.vdouble(1.0),
        thePUEfficiency_FPix_Outer = cms.vdouble(1.0),
        thePixelChipEfficiency_BPix1 = cms.double(1.0),
        thePixelChipEfficiency_BPix2 = cms.double(1.0),
        thePixelChipEfficiency_BPix3 = cms.double(1.0),
        thePixelChipEfficiency_FPix1 = cms.double(0.999),
        thePixelChipEfficiency_FPix2 = cms.double(0.999),
        thePixelColEfficiency_BPix1 = cms.double(1.0),
        thePixelColEfficiency_BPix2 = cms.double(1.0),
        thePixelColEfficiency_BPix3 = cms.double(1.0),
        thePixelColEfficiency_FPix1 = cms.double(0.999),
        thePixelColEfficiency_FPix2 = cms.double(0.999),
        thePixelEfficiency_BPix1 = cms.double(1.0),
        thePixelEfficiency_BPix2 = cms.double(1.0),
        thePixelEfficiency_BPix3 = cms.double(1.0),
        thePixelEfficiency_FPix1 = cms.double(0.999),
        thePixelEfficiency_FPix2 = cms.double(0.999),
        useDB = cms.bool(False)
    ),
    puVtx = cms.PSet(
        accumulatorType = cms.string('PileupVertexAccumulator'),
        hitsProducer = cms.string('generator'),
        makeDigiSimLinks = cms.untracked.bool(False)
    ),
    strip = cms.PSet(
        APVSaturationFromHIP = cms.bool(True),
        APVSaturationProb = cms.double(0.001),
        APVpeakmode = cms.bool(False),
        AppliedVoltage = cms.double(300.0),
        BaselineShift = cms.bool(True),
        ChargeDistributionRMS = cms.double(6.5e-10),
        ChargeMobility = cms.double(310.0),
        CommonModeNoise = cms.bool(True),
        CosmicDelayShift = cms.untracked.double(0.0),
        CouplingConstantDecIB1 = cms.vdouble(0.7748, 0.0962, 0.0165),
        CouplingConstantDecIB2 = cms.vdouble(0.83, 0.0756, 0.0094),
        CouplingConstantDecOB1 = cms.vdouble(0.6871, 0.1222, 0.0342),
        CouplingConstantDecOB2 = cms.vdouble(0.725, 0.1102, 0.0273),
        CouplingConstantDecW1a = cms.vdouble(0.786, 0.093, 0.014),
        CouplingConstantDecW1b = cms.vdouble(0.822, 0.08, 0.009),
        CouplingConstantDecW2a = cms.vdouble(0.7962, 0.0914, 0.0104),
        CouplingConstantDecW2b = cms.vdouble(0.888, 0.05, 0.006),
        CouplingConstantDecW3a = cms.vdouble(0.8164, 0.09, 0.0018),
        CouplingConstantDecW3b = cms.vdouble(0.848, 0.06, 0.016),
        CouplingConstantDecW4 = cms.vdouble(0.876, 0.06, 0.002),
        CouplingConstantDecW5 = cms.vdouble(0.7565, 0.0913, 0.0304),
        CouplingConstantDecW6 = cms.vdouble(0.758, 0.093, 0.026),
        CouplingConstantDecW7 = cms.vdouble(0.7828, 0.0862, 0.0224),
        CouplingConstantPeakIB1 = cms.vdouble(0.9006, 0.0497),
        CouplingConstantPeakIB2 = cms.vdouble(0.9342, 0.0328),
        CouplingConstantPeakOB1 = cms.vdouble(0.8542, 0.0729),
        CouplingConstantPeakOB2 = cms.vdouble(0.8719, 0.064),
        CouplingConstantPeakW1a = cms.vdouble(0.996, 0.002),
        CouplingConstantPeakW1b = cms.vdouble(0.976, 0.012),
        CouplingConstantPeakW2a = cms.vdouble(1.0, 0.0),
        CouplingConstantPeakW2b = cms.vdouble(0.998, 0.001),
        CouplingConstantPeakW3a = cms.vdouble(0.996, 0.002),
        CouplingConstantPeakW3b = cms.vdouble(0.992, 0.004),
        CouplingConstantPeakW4 = cms.vdouble(0.992, 0.004),
        CouplingConstantPeakW5 = cms.vdouble(0.968, 0.016),
        CouplingConstantPeakW6 = cms.vdouble(0.972, 0.014),
        CouplingConstantPeakW7 = cms.vdouble(0.964, 0.018),
        DeltaProductionCut = cms.double(0.120425),
        DepletionVoltage = cms.double(170.0),
        DigiModeList = cms.PSet(
            PRDigi = cms.string('ProcessedRaw'),
            SCDigi = cms.string('ScopeMode'),
            VRDigi = cms.string('VirginRaw'),
            ZSDigi = cms.string('ZeroSuppressed')
        ),
        FedAlgorithm = cms.int32(4),
        FedAlgorithm_PM = cms.int32(4),
        Gain = cms.string(''),
        GeometryType = cms.string('idealForDigi'),
        GevPerElectron = cms.double(3.61e-09),
        Inefficiency = cms.double(0.0),
        LandauFluctuations = cms.bool(True),
        LorentzAngle = cms.string(''),
        Noise = cms.bool(True),
        NoiseSigmaThreshold = cms.double(2.0),
        PedestalsOffset = cms.double(128),
        PreMixingMode = cms.bool(False),
        ROUList = cms.vstring('TrackerHitsTIBLowTof', 
            'TrackerHitsTIBHighTof', 
            'TrackerHitsTIDLowTof', 
            'TrackerHitsTIDHighTof', 
            'TrackerHitsTOBLowTof', 
            'TrackerHitsTOBHighTof', 
            'TrackerHitsTECLowTof', 
            'TrackerHitsTECHighTof'),
        RealPedestals = cms.bool(True),
        SingleStripNoise = cms.bool(True),
        TOFCutForDeconvolution = cms.double(50.0),
        TOFCutForPeak = cms.double(100.0),
        Temperature = cms.double(273.0),
        TrackerConfigurationFromDB = cms.bool(False),
        ZeroSuppression = cms.bool(True),
        accumulatorType = cms.string('SiStripDigitizer'),
        chargeDivisionsPerStrip = cms.int32(10),
        cmnRMStec = cms.double(2.44),
        cmnRMStib = cms.double(5.92),
        cmnRMStid = cms.double(3.08),
        cmnRMStob = cms.double(1.08),
        electronPerAdcDec = cms.double(247.0),
        electronPerAdcPeak = cms.double(262.0),
        hitsProducer = cms.string('g4SimHits'),
        makeDigiSimLinks = cms.untracked.bool(True),
        noDiffusion = cms.bool(False)
    )
)

process.theMixObjects = cms.PSet(
    mixCH = cms.PSet(
        crossingFrames = cms.untracked.vstring(),
        input = cms.VInputTag(cms.InputTag("g4SimHits","CastorFI"), cms.InputTag("g4SimHits","EcalHitsEB"), cms.InputTag("g4SimHits","EcalHitsEE"), cms.InputTag("g4SimHits","EcalHitsES"), cms.InputTag("g4SimHits","HcalHits"), 
            cms.InputTag("g4SimHits","ZDCHITS")),
        subdets = cms.vstring('CastorFI', 
            'EcalHitsEB', 
            'EcalHitsEE', 
            'EcalHitsES', 
            'HcalHits', 
            'ZDCHITS'),
        type = cms.string('PCaloHit')
    ),
    mixHepMC = cms.PSet(
        input = cms.VInputTag(cms.InputTag("generator")),
        makeCrossingFrame = cms.untracked.bool(False),
        type = cms.string('HepMCProduct')
    ),
    mixSH = cms.PSet(
        crossingFrames = cms.untracked.vstring('MuonCSCHits', 
            'MuonDTHits', 
            'MuonRPCHits'),
        input = cms.VInputTag(cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonRPCHits"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), 
            cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsTECHighTof"), cms.InputTag("g4SimHits","TrackerHitsTECLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIBHighTof"), 
            cms.InputTag("g4SimHits","TrackerHitsTIBLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIDHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIDLowTof"), cms.InputTag("g4SimHits","TrackerHitsTOBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTOBLowTof")),
        subdets = cms.vstring('MuonCSCHits', 
            'MuonDTHits', 
            'MuonRPCHits', 
            'TrackerHitsPixelBarrelHighTof', 
            'TrackerHitsPixelBarrelLowTof', 
            'TrackerHitsPixelEndcapHighTof', 
            'TrackerHitsPixelEndcapLowTof', 
            'TrackerHitsTECHighTof', 
            'TrackerHitsTECLowTof', 
            'TrackerHitsTIBHighTof', 
            'TrackerHitsTIBLowTof', 
            'TrackerHitsTIDHighTof', 
            'TrackerHitsTIDLowTof', 
            'TrackerHitsTOBHighTof', 
            'TrackerHitsTOBLowTof'),
        type = cms.string('PSimHit')
    ),
    mixTracks = cms.PSet(
        input = cms.VInputTag(cms.InputTag("g4SimHits")),
        makeCrossingFrame = cms.untracked.bool(False),
        type = cms.string('SimTrack')
    ),
    mixVertices = cms.PSet(
        input = cms.VInputTag(cms.InputTag("g4SimHits")),
        makeCrossingFrame = cms.untracked.bool(False),
        type = cms.string('SimVertex')
    )
)

process.tightMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(0.2),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isGlobalMuon && isPFMuon && isTrackerMuon && abs(eta) < 2.4 && innerTrack.hitPattern.numberOfValidPixelHits > 0 && innerTrack.hitPattern.trackerLayersWithMeasurement > 5 && (pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt < 0.12 && globalTrack.hitPattern.numberOfValidMuonHits > 0 && globalTrack.normalizedChi2 < 10 && numberOfMatches > 1'),
    z0Cut = cms.untracked.double(0.5)
)

process.tobTecStepInOutTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0)
)

process.tobTecStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('tobTecStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('tobTecStepInOutTrajectoryFilter')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(4),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('tobTecStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(False)
)

process.tobTecStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.trackPseudoSelectionBlock = cms.PSet(
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    )
)

process.trackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    )
)

process.trackWithVertexSelectorParams = cms.PSet(
    copyExtras = cms.untracked.bool(False),
    copyTrajectories = cms.untracked.bool(False),
    d0Max = cms.double(999.0),
    dzMax = cms.double(999.0),
    etaMax = cms.double(5.0),
    etaMin = cms.double(0.0),
    nVertices = cms.uint32(0),
    normalizedChi2 = cms.double(999999.0),
    numberOfLostHits = cms.uint32(999),
    numberOfValidHits = cms.uint32(0),
    numberOfValidPixelHits = cms.uint32(0),
    ptErrorCut = cms.double(0.2),
    ptMax = cms.double(500.0),
    ptMin = cms.double(0.3),
    quality = cms.string('highPurity'),
    rhoVtx = cms.double(0.2),
    src = cms.InputTag("generalTracks"),
    useVtx = cms.bool(True),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    vtxFallback = cms.bool(True),
    zetaVtx = cms.double(1.0)
)

process.trackerMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(2.0),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isTrackerMuon && abs(eta) < 2.4'),
    z0Cut = cms.untracked.double(25.0)
)

process.trackingParticles = cms.PSet(
    HepMCProductLabel = cms.InputTag("generator"),
    accumulatorType = cms.string('TrackingTruthAccumulator'),
    allowDifferentSimHitProcesses = cms.bool(False),
    alwaysAddAncestors = cms.bool(True),
    createMergedBremsstrahlung = cms.bool(True),
    createUnmergedCollection = cms.bool(True),
    genParticleCollection = cms.InputTag("genParticles"),
    ignoreTracksOutsideVolume = cms.bool(False),
    maximumPreviousBunchCrossing = cms.uint32(9999),
    maximumSubsequentBunchCrossing = cms.uint32(9999),
    removeDeadModules = cms.bool(False),
    select = cms.PSet(
        chargedOnlyTP = cms.bool(True),
        lipTP = cms.double(1000),
        maxRapidityTP = cms.double(5.0),
        minHitTP = cms.int32(0),
        minRapidityTP = cms.double(-5.0),
        pdgIdTP = cms.vint32(),
        ptMinTP = cms.double(0.1),
        signalOnlyTP = cms.bool(False),
        stableOnlyTP = cms.bool(False),
        tipTP = cms.double(1000)
    ),
    simHitCollections = cms.PSet(
        muon = cms.VInputTag(cms.InputTag("g4SimHits","MuonDTHits"), cms.InputTag("g4SimHits","MuonCSCHits"), cms.InputTag("g4SimHits","MuonRPCHits")),
        pixel = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof")),
        tracker = cms.VInputTag(cms.InputTag("g4SimHits","TrackerHitsTIBLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIDLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIDHighTof"), cms.InputTag("g4SimHits","TrackerHitsTOBLowTof"), 
            cms.InputTag("g4SimHits","TrackerHitsTOBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTECLowTof"), cms.InputTag("g4SimHits","TrackerHitsTECHighTof"))
    ),
    simTrackCollection = cms.InputTag("g4SimHits"),
    simVertexCollection = cms.InputTag("g4SimHits"),
    vertexDistanceCut = cms.double(0.003),
    volumeRadius = cms.double(120.0),
    volumeZ = cms.double(300.0)
)

process.trackingParticlesSelection = cms.PSet(
    chargedOnlyTP = cms.bool(True),
    lipTP = cms.double(1000),
    maxRapidityTP = cms.double(5.0),
    minHitTP = cms.int32(0),
    minRapidityTP = cms.double(-5.0),
    pdgIdTP = cms.vint32(),
    ptMinTP = cms.double(0.1),
    signalOnlyTP = cms.bool(False),
    stableOnlyTP = cms.bool(False),
    tipTP = cms.double(1000)
)

process.variableJTAPars = cms.PSet(
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5)
)

process.vertexCutsBlock = cms.PSet(
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(3.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.65),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    )
)

process.vertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    )
)

process.vertexSelectionBlock = cms.PSet(
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)

process.vertexTrackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(2),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(8),
        useVariableJTA = cms.bool(False)
    )
)

process.xAxisStuff = cms.PSet(
    xAxisTitle = cms.string('P_{T} / GeV'),
    xAxisTitleOffset = cms.double(0.9),
    xAxisTitleSize = cms.double(0.05)
)

process.yAxisStuff = cms.PSet(
    maxY_linear = cms.double(1.6),
    maxY_log = cms.double(1.8),
    minY_linear = cms.double(0.0),
    minY_log = cms.double(0.001),
    yAxisTitle = cms.string('#varepsilon'),
    yAxisTitleOffset = cms.double(1.1),
    yAxisTitleSize = cms.double(0.05),
    yScale = cms.string('linear')
)

process.schedule = cms.Schedule(*[ process.raw2digi_step, process.L1Reco_step, process.reconstruction_step, process.dqmoffline_step, process.stats, process.RECOSIMoutput_step, process.MINIAODSIMoutput_step, process.DQMoutput_step ])

